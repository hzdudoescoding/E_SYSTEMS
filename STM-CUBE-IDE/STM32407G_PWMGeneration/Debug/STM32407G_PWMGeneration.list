
STM32407G_PWMGeneration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009684  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800980c  0800980c  0000a80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009828  08009828  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009828  08009828  0000a828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009830  08009830  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009830  08009830  0000a830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009834  08009834  0000a834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009838  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a0c  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a88  20000a88  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f3d  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b86  00000000  00000000  00022fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  00026b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001001  00000000  00000000  00028030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e66  00000000  00000000  00029031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b965  00000000  00000000  0004ce97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2551  00000000  00000000  000687fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ad4d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b08  00000000  00000000  0013ad90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00140898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080097f4 	.word	0x080097f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080097f4 	.word	0x080097f4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
uint32_t gCounter = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fc8d 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f82d 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f94d 	bl	80007a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800050a:	f000 f893 	bl	8000634 <MX_I2C1_Init>
  MX_I2S3_Init();
 800050e:	f000 f8bf 	bl	8000690 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8000512:	f008 fd19 	bl	8008f48 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000516:	f000 f8eb 	bl	80006f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800051a:	2100      	movs	r1, #0
 800051c:	480e      	ldr	r0, [pc, #56]	@ (8000558 <main+0x64>)
 800051e:	f004 fd23 	bl	8004f68 <HAL_TIM_PWM_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, gCounter);
 8000522:	4b0d      	ldr	r3, [pc, #52]	@ (8000558 <main+0x64>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	635a      	str	r2, [r3, #52]	@ 0x34

	  gCounter++;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3301      	adds	r3, #1
 800052e:	607b      	str	r3, [r7, #4]

	  gCounter = gCounter % 1000;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a0a      	ldr	r2, [pc, #40]	@ (800055c <main+0x68>)
 8000534:	fba2 1203 	umull	r1, r2, r2, r3
 8000538:	0992      	lsrs	r2, r2, #6
 800053a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800053e:	fb01 f202 	mul.w	r2, r1, r2
 8000542:	1a9b      	subs	r3, r3, r2
 8000544:	607b      	str	r3, [r7, #4]

	  HAL_Delay(500);
 8000546:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800054a:	f000 fcd9 	bl	8000f00 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800054e:	f008 fd21 	bl	8008f94 <MX_USB_HOST_Process>
	 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, gCounter);
 8000552:	bf00      	nop
 8000554:	e7e5      	b.n	8000522 <main+0x2e>
 8000556:	bf00      	nop
 8000558:	20000134 	.word	0x20000134
 800055c:	10624dd3 	.word	0x10624dd3

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	@ 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f009 f8b2 	bl	80096d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	@ (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	@ (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	@ (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	@ (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005de:	2307      	movs	r3, #7
 80005e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fea8 	bl	800433c <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005f2:	f000 fa09 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2302      	movs	r3, #2
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000602:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2105      	movs	r1, #5
 8000614:	4618      	mov	r0, r3
 8000616:	f004 f909 	bl	800482c <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000620:	f000 f9f2 	bl	8000a08 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	@ 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <MX_I2C1_Init+0x50>)
 800063a:	4a13      	ldr	r2, [pc, #76]	@ (8000688 <MX_I2C1_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000640:	4a12      	ldr	r2, [pc, #72]	@ (800068c <MX_I2C1_Init+0x58>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000644:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064a:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000652:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000672:	f003 f87f 	bl	8003774 <HAL_I2C_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800067c:	f000 f9c4 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000098 	.word	0x20000098
 8000688:	40005400 	.word	0x40005400
 800068c:	000186a0 	.word	0x000186a0

08000690 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000694:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <MX_I2S3_Init+0x54>)
 8000696:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <MX_I2S3_Init+0x58>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_I2S3_Init+0x54>)
 800069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006b8:	4a0c      	ldr	r2, [pc, #48]	@ (80006ec <MX_I2S3_Init+0x5c>)
 80006ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006d0:	f003 f994 	bl	80039fc <HAL_I2S_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006da:	f000 f995 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000ec 	.word	0x200000ec
 80006e8:	40003c00 	.word	0x40003c00
 80006ec:	00017700 	.word	0x00017700

080006f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]
 8000710:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000712:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <MX_TIM2_Init+0xb0>)
 8000714:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000718:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 800071a:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <MX_TIM2_Init+0xb0>)
 800071c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000720:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000722:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <MX_TIM2_Init+0xb0>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000728:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_TIM2_Init+0xb0>)
 800072a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800072e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_TIM2_Init+0xb0>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_TIM2_Init+0xb0>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800073c:	4818      	ldr	r0, [pc, #96]	@ (80007a0 <MX_TIM2_Init+0xb0>)
 800073e:	f004 fbc3 	bl	8004ec8 <HAL_TIM_PWM_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000748:	f000 f95e 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4619      	mov	r1, r3
 800075a:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <MX_TIM2_Init+0xb0>)
 800075c:	f005 f976 	bl	8005a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000766:	f000 f94f 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076a:	2360      	movs	r3, #96	@ 0x60
 800076c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800076e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000772:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	4619      	mov	r1, r3
 8000782:	4807      	ldr	r0, [pc, #28]	@ (80007a0 <MX_TIM2_Init+0xb0>)
 8000784:	f004 fdf6 	bl	8005374 <HAL_TIM_PWM_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800078e:	f000 f93b 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000792:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <MX_TIM2_Init+0xb0>)
 8000794:	f000 fa54 	bl	8000c40 <HAL_TIM_MspPostInit>

}
 8000798:	bf00      	nop
 800079a:	3728      	adds	r7, #40	@ 0x28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000134 	.word	0x20000134

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	@ 0x30
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	4b80      	ldr	r3, [pc, #512]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a7f      	ldr	r2, [pc, #508]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 80007c4:	f043 0310 	orr.w	r3, r3, #16
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b7d      	ldr	r3, [pc, #500]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0310 	and.w	r3, r3, #16
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	4b79      	ldr	r3, [pc, #484]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a78      	ldr	r2, [pc, #480]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b76      	ldr	r3, [pc, #472]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b72      	ldr	r3, [pc, #456]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a71      	ldr	r2, [pc, #452]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b6f      	ldr	r3, [pc, #444]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b6b      	ldr	r3, [pc, #428]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a6a      	ldr	r2, [pc, #424]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b68      	ldr	r3, [pc, #416]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b64      	ldr	r3, [pc, #400]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a63      	ldr	r2, [pc, #396]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b61      	ldr	r3, [pc, #388]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b5d      	ldr	r3, [pc, #372]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a5c      	ldr	r2, [pc, #368]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b5a      	ldr	r3, [pc, #360]	@ (80009c0 <MX_GPIO_Init+0x21c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2108      	movs	r1, #8
 8000866:	4857      	ldr	r0, [pc, #348]	@ (80009c4 <MX_GPIO_Init+0x220>)
 8000868:	f000 fe1c 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	2101      	movs	r1, #1
 8000870:	4855      	ldr	r0, [pc, #340]	@ (80009c8 <MX_GPIO_Init+0x224>)
 8000872:	f000 fe17 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000876:	2200      	movs	r2, #0
 8000878:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800087c:	4853      	ldr	r0, [pc, #332]	@ (80009cc <MX_GPIO_Init+0x228>)
 800087e:	f000 fe11 	bl	80014a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	484a      	ldr	r0, [pc, #296]	@ (80009c4 <MX_GPIO_Init+0x220>)
 800089a:	f000 fc67 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800089e:	2301      	movs	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4844      	ldr	r0, [pc, #272]	@ (80009c8 <MX_GPIO_Init+0x224>)
 80008b6:	f000 fc59 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ba:	2308      	movs	r3, #8
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ca:	2305      	movs	r3, #5
 80008cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	483c      	ldr	r0, [pc, #240]	@ (80009c8 <MX_GPIO_Init+0x224>)
 80008d6:	f000 fc49 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008da:	2301      	movs	r3, #1
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008de:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4838      	ldr	r0, [pc, #224]	@ (80009d0 <MX_GPIO_Init+0x22c>)
 80008f0:	f000 fc3c 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008f4:	23c0      	movs	r3, #192	@ 0xc0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000904:	2305      	movs	r3, #5
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4830      	ldr	r0, [pc, #192]	@ (80009d0 <MX_GPIO_Init+0x22c>)
 8000910:	f000 fc2c 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000914:	2304      	movs	r3, #4
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	482b      	ldr	r0, [pc, #172]	@ (80009d4 <MX_GPIO_Init+0x230>)
 8000928:	f000 fc20 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800092c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093e:	2305      	movs	r3, #5
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4822      	ldr	r0, [pc, #136]	@ (80009d4 <MX_GPIO_Init+0x230>)
 800094a:	f000 fc0f 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : button1_Pin */
  GPIO_InitStruct.Pin = button1_Pin;
 800094e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000958:	2302      	movs	r3, #2
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(button1_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	481a      	ldr	r0, [pc, #104]	@ (80009cc <MX_GPIO_Init+0x228>)
 8000964:	f000 fc02 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000968:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800096c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4812      	ldr	r0, [pc, #72]	@ (80009cc <MX_GPIO_Init+0x228>)
 8000982:	f000 fbf3 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000986:	2320      	movs	r3, #32
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	@ (80009cc <MX_GPIO_Init+0x228>)
 800099a:	f000 fbe7 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800099e:	2302      	movs	r3, #2
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <MX_GPIO_Init+0x220>)
 80009b4:	f000 fbda 	bl	800116c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009b8:	bf00      	nop
 80009ba:	3730      	adds	r7, #48	@ 0x30
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020c00 	.word	0x40020c00
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400

080009d8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009e8:	d108      	bne.n	80009fc <HAL_TIM_PWM_PulseFinishedCallback+0x24>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	7f1b      	ldrb	r3, [r3, #28]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d104      	bne.n	80009fc <HAL_TIM_PWM_PulseFinishedCallback+0x24>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80009f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009f6:	4803      	ldr	r0, [pc, #12]	@ (8000a04 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 80009f8:	f000 fd6d 	bl	80014d6 <HAL_GPIO_TogglePin>
	}
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40020c00 	.word	0x40020c00

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	4a0f      	ldr	r2, [pc, #60]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a52:	2007      	movs	r0, #7
 8000a54:	f000 fb48 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800

08000a64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a19      	ldr	r2, [pc, #100]	@ (8000ae8 <HAL_I2C_MspInit+0x84>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d12c      	bne.n	8000ae0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <HAL_I2C_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a17      	ldr	r2, [pc, #92]	@ (8000aec <HAL_I2C_MspInit+0x88>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <HAL_I2C_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aa2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa8:	2312      	movs	r3, #18
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <HAL_I2C_MspInit+0x8c>)
 8000ac0:	f000 fb54 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <HAL_I2C_MspInit+0x88>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000acc:	4a07      	ldr	r2, [pc, #28]	@ (8000aec <HAL_I2C_MspInit+0x88>)
 8000ace:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_I2C_MspInit+0x88>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	@ 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020400 	.word	0x40020400

08000af4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	@ 0x38
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a31      	ldr	r2, [pc, #196]	@ (8000be4 <HAL_I2S_MspInit+0xf0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d15a      	bne.n	8000bda <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b24:	2301      	movs	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b28:	23c0      	movs	r3, #192	@ 0xc0
 8000b2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4618      	mov	r0, r3
 8000b36:	f004 f885 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b40:	f7ff ff62 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	4a26      	ldr	r2, [pc, #152]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b54:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	4a1f      	ldr	r2, [pc, #124]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b70:	4b1d      	ldr	r3, [pc, #116]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	4a18      	ldr	r2, [pc, #96]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8c:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <HAL_I2S_MspInit+0xf4>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba8:	2306      	movs	r3, #6
 8000baa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480e      	ldr	r0, [pc, #56]	@ (8000bec <HAL_I2S_MspInit+0xf8>)
 8000bb4:	f000 fada 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bb8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <HAL_I2S_MspInit+0xfc>)
 8000bd6:	f000 fac9 	bl	800116c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000bda:	bf00      	nop
 8000bdc:	3738      	adds	r7, #56	@ 0x38
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40003c00 	.word	0x40003c00
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020800 	.word	0x40020800

08000bf4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c04:	d115      	bne.n	8000c32 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <HAL_TIM_PWM_MspInit+0x48>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c3c <HAL_TIM_PWM_MspInit+0x48>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <HAL_TIM_PWM_MspInit+0x48>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	201c      	movs	r0, #28
 8000c28:	f000 fa69 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c2c:	201c      	movs	r0, #28
 8000c2e:	f000 fa82 	bl	8001136 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c60:	d11d      	bne.n	8000c9e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <HAL_TIM_MspPostInit+0x68>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca8 <HAL_TIM_MspPostInit+0x68>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <HAL_TIM_MspPostInit+0x68>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c7e:	2320      	movs	r3, #32
 8000c80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	4619      	mov	r1, r3
 8000c98:	4804      	ldr	r0, [pc, #16]	@ (8000cac <HAL_TIM_MspPostInit+0x6c>)
 8000c9a:	f000 fa67 	bl	800116c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d06:	f000 f8db 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d14:	4802      	ldr	r0, [pc, #8]	@ (8000d20 <TIM2_IRQHandler+0x10>)
 8000d16:	f004 fa3d 	bl	8005194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000134 	.word	0x20000134

08000d24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d28:	4802      	ldr	r0, [pc, #8]	@ (8000d34 <OTG_FS_IRQHandler+0x10>)
 8000d2a:	f000 fecf 	bl	8001acc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000560 	.word	0x20000560

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f008 fcce 	bl	8009708 <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20020000 	.word	0x20020000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	2000017c 	.word	0x2000017c
 8000da0:	20000a88 	.word	0x20000a88

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dcc:	f7ff ffea 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd0:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dd2:	490d      	ldr	r1, [pc, #52]	@ (8000e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df6:	f008 fc8d 	bl	8009714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fb7b 	bl	80004f4 <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e0c:	08009838 	.word	0x08009838
  ldr r2, =_sbss
 8000e10:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e14:	20000a88 	.word	0x20000a88

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e20:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <HAL_Init+0x40>)
 8000e26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <HAL_Init+0x40>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	@ (8000e5c <HAL_Init+0x40>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f94f 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff fde0 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023c00 	.word	0x40023c00

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f967 	bl	8001152 <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f92f 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	@ (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000180 	.word	0x20000180

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000180 	.word	0x20000180

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_Delay+0x44>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	@ (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	@ (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	@ (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	@ 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	@ 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff8e 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff29 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff3e 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff8e 	bl	800103c <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff31 	bl	8000fac <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa2 	bl	80010a4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	@ 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e16b      	b.n	8001460 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 815a 	bne.w	800145a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d130      	bne.n	8001220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 0201 	and.w	r2, r3, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b03      	cmp	r3, #3
 800122a:	d017      	beq.n	800125c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80b4 	beq.w	800145a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b60      	ldr	r3, [pc, #384]	@ (8001478 <HAL_GPIO_Init+0x30c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001478 <HAL_GPIO_Init+0x30c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001300:	6453      	str	r3, [r2, #68]	@ 0x44
 8001302:	4b5d      	ldr	r3, [pc, #372]	@ (8001478 <HAL_GPIO_Init+0x30c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130e:	4a5b      	ldr	r2, [pc, #364]	@ (800147c <HAL_GPIO_Init+0x310>)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a52      	ldr	r2, [pc, #328]	@ (8001480 <HAL_GPIO_Init+0x314>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d02b      	beq.n	8001392 <HAL_GPIO_Init+0x226>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a51      	ldr	r2, [pc, #324]	@ (8001484 <HAL_GPIO_Init+0x318>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d025      	beq.n	800138e <HAL_GPIO_Init+0x222>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a50      	ldr	r2, [pc, #320]	@ (8001488 <HAL_GPIO_Init+0x31c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d01f      	beq.n	800138a <HAL_GPIO_Init+0x21e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4f      	ldr	r2, [pc, #316]	@ (800148c <HAL_GPIO_Init+0x320>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x21a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4e      	ldr	r2, [pc, #312]	@ (8001490 <HAL_GPIO_Init+0x324>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x216>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4d      	ldr	r2, [pc, #308]	@ (8001494 <HAL_GPIO_Init+0x328>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x212>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4c      	ldr	r2, [pc, #304]	@ (8001498 <HAL_GPIO_Init+0x32c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x20e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4b      	ldr	r2, [pc, #300]	@ (800149c <HAL_GPIO_Init+0x330>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x20a>
 8001372:	2307      	movs	r3, #7
 8001374:	e00e      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001376:	2308      	movs	r3, #8
 8001378:	e00c      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800137a:	2306      	movs	r3, #6
 800137c:	e00a      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800137e:	2305      	movs	r3, #5
 8001380:	e008      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001382:	2304      	movs	r3, #4
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001386:	2303      	movs	r3, #3
 8001388:	e004      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800138a:	2302      	movs	r3, #2
 800138c:	e002      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001392:	2300      	movs	r3, #0
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f002 0203 	and.w	r2, r2, #3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4093      	lsls	r3, r2
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a4:	4935      	ldr	r1, [pc, #212]	@ (800147c <HAL_GPIO_Init+0x310>)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b3b      	ldr	r3, [pc, #236]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d6:	4a32      	ldr	r2, [pc, #200]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013dc:	4b30      	ldr	r3, [pc, #192]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001400:	4a27      	ldr	r2, [pc, #156]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142a:	4a1d      	ldr	r2, [pc, #116]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001454:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	f67f ae90 	bls.w	8001188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40013800 	.word	0x40013800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400
 8001488:	40020800 	.word	0x40020800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021000 	.word	0x40021000
 8001494:	40021400 	.word	0x40021400
 8001498:	40021800 	.word	0x40021800
 800149c:	40021c00 	.word	0x40021c00
 80014a0:	40013c00 	.word	0x40013c00

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014e8:	887a      	ldrh	r2, [r7, #2]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	041a      	lsls	r2, r3, #16
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	400b      	ands	r3, r1
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	619a      	str	r2, [r3, #24]
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af02      	add	r7, sp, #8
 8001510:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e059      	b.n	80015d0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f007 fd64 	bl	8009004 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2203      	movs	r2, #3
 8001540:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800154a:	d102      	bne.n	8001552 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f004 fb7d 	bl	8005c56 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7c1a      	ldrb	r2, [r3, #16]
 8001564:	f88d 2000 	strb.w	r2, [sp]
 8001568:	3304      	adds	r3, #4
 800156a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156c:	f004 fafe 	bl	8005b6c <USB_CoreInit>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e026      	b.n	80015d0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2101      	movs	r1, #1
 8001588:	4618      	mov	r0, r3
 800158a:	f004 fb75 	bl	8005c78 <USB_SetCurrentMode>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2202      	movs	r2, #2
 8001598:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e017      	b.n	80015d0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7c1a      	ldrb	r2, [r3, #16]
 80015a8:	f88d 2000 	strb.w	r2, [sp]
 80015ac:	3304      	adds	r3, #4
 80015ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b0:	f004 fd18 	bl	8005fe4 <USB_HostInit>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2202      	movs	r2, #2
 80015be:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e004      	b.n	80015d0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b08b      	sub	sp, #44	@ 0x2c
 80015dc:	af04      	add	r7, sp, #16
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	4608      	mov	r0, r1
 80015e2:	4611      	mov	r1, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	70fb      	strb	r3, [r7, #3]
 80015ea:	460b      	mov	r3, r1
 80015ec:	70bb      	strb	r3, [r7, #2]
 80015ee:	4613      	mov	r3, r2
 80015f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015f2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015f4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_HCD_HC_Init+0x2c>
 8001600:	2302      	movs	r3, #2
 8001602:	e09d      	b.n	8001740 <HAL_HCD_HC_Init+0x168>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800160c:	78fa      	ldrb	r2, [r7, #3]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3319      	adds	r3, #25
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001620:	78fa      	ldrb	r2, [r7, #3]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	3314      	adds	r3, #20
 8001630:	787a      	ldrb	r2, [r7, #1]
 8001632:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3315      	adds	r3, #21
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	3326      	adds	r3, #38	@ 0x26
 8001658:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800165c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	78bb      	ldrb	r3, [r7, #2]
 8001662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001666:	b2d8      	uxtb	r0, r3
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	1a9b      	subs	r3, r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3316      	adds	r3, #22
 8001676:	4602      	mov	r2, r0
 8001678:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	4619      	mov	r1, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fbc8 	bl	8001e14 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001684:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001688:	2b00      	cmp	r3, #0
 800168a:	da0a      	bge.n	80016a2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	1a9b      	subs	r3, r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	3317      	adds	r3, #23
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	e009      	b.n	80016b6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016a2:	78fa      	ldrb	r2, [r7, #3]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	3317      	adds	r3, #23
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 fdf6 	bl	80062ac <USB_GetHostSpeed>
 80016c0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d10b      	bne.n	80016e2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_HCD_HC_Init+0x10a>
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d104      	bne.n	80016e2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2bbc      	cmp	r3, #188	@ 0xbc
 80016dc:	d901      	bls.n	80016e2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016de:	23bc      	movs	r3, #188	@ 0xbc
 80016e0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	3318      	adds	r3, #24
 80016f2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016f8:	78fa      	ldrb	r2, [r7, #3]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	b298      	uxth	r0, r3
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	1a9b      	subs	r3, r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	3328      	adds	r3, #40	@ 0x28
 800170c:	4602      	mov	r2, r0
 800170e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	b29b      	uxth	r3, r3
 8001718:	787c      	ldrb	r4, [r7, #1]
 800171a:	78ba      	ldrb	r2, [r7, #2]
 800171c:	78f9      	ldrb	r1, [r7, #3]
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4623      	mov	r3, r4
 800172e:	f004 fde5 	bl	80062fc <USB_HC_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}

08001748 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_HCD_HC_Halt+0x1e>
 8001762:	2302      	movs	r3, #2
 8001764:	e00f      	b.n	8001786 <HAL_HCD_HC_Halt+0x3e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f005 f977 	bl	8006a6a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	4608      	mov	r0, r1
 800179a:	4611      	mov	r1, r2
 800179c:	461a      	mov	r2, r3
 800179e:	4603      	mov	r3, r0
 80017a0:	70fb      	strb	r3, [r7, #3]
 80017a2:	460b      	mov	r3, r1
 80017a4:	70bb      	strb	r3, [r7, #2]
 80017a6:	4613      	mov	r3, r2
 80017a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	3317      	adds	r3, #23
 80017ba:	78ba      	ldrb	r2, [r7, #2]
 80017bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	3326      	adds	r3, #38	@ 0x26
 80017ce:	787a      	ldrb	r2, [r7, #1]
 80017d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017d2:	7c3b      	ldrb	r3, [r7, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d114      	bne.n	8001802 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	332a      	adds	r3, #42	@ 0x2a
 80017e8:	2203      	movs	r2, #3
 80017ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	3319      	adds	r3, #25
 80017fc:	7f3a      	ldrb	r2, [r7, #28]
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e009      	b.n	8001816 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	332a      	adds	r3, #42	@ 0x2a
 8001812:	2202      	movs	r2, #2
 8001814:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001816:	787b      	ldrb	r3, [r7, #1]
 8001818:	2b03      	cmp	r3, #3
 800181a:	f200 8102 	bhi.w	8001a22 <HAL_HCD_HC_SubmitRequest+0x292>
 800181e:	a201      	add	r2, pc, #4	@ (adr r2, 8001824 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	08001835 	.word	0x08001835
 8001828:	08001a0d 	.word	0x08001a0d
 800182c:	080018f9 	.word	0x080018f9
 8001830:	08001983 	.word	0x08001983
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001834:	7c3b      	ldrb	r3, [r7, #16]
 8001836:	2b01      	cmp	r3, #1
 8001838:	f040 80f5 	bne.w	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800183c:	78bb      	ldrb	r3, [r7, #2]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d12d      	bne.n	800189e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001842:	8b3b      	ldrh	r3, [r7, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d109      	bne.n	800185c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	333d      	adds	r3, #61	@ 0x3d
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	333d      	adds	r3, #61	@ 0x3d
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10a      	bne.n	8001888 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	332a      	adds	r3, #42	@ 0x2a
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001886:	e0ce      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	332a      	adds	r3, #42	@ 0x2a
 8001898:	2202      	movs	r2, #2
 800189a:	701a      	strb	r2, [r3, #0]
      break;
 800189c:	e0c3      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	331a      	adds	r3, #26
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	f040 80b8 	bne.w	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	333c      	adds	r3, #60	@ 0x3c
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	332a      	adds	r3, #42	@ 0x2a
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
      break;
 80018e0:	e0a1      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	332a      	adds	r3, #42	@ 0x2a
 80018f2:	2202      	movs	r2, #2
 80018f4:	701a      	strb	r2, [r3, #0]
      break;
 80018f6:	e096      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018f8:	78bb      	ldrb	r3, [r7, #2]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d120      	bne.n	8001940 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	333d      	adds	r3, #61	@ 0x3d
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	332a      	adds	r3, #42	@ 0x2a
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001928:	e07e      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	332a      	adds	r3, #42	@ 0x2a
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
      break;
 800193e:	e073      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	333c      	adds	r3, #60	@ 0x3c
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10a      	bne.n	800196c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	332a      	adds	r3, #42	@ 0x2a
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
      break;
 800196a:	e05d      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	332a      	adds	r3, #42	@ 0x2a
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
      break;
 8001980:	e052      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001982:	78bb      	ldrb	r3, [r7, #2]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d120      	bne.n	80019ca <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	333d      	adds	r3, #61	@ 0x3d
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10a      	bne.n	80019b4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	332a      	adds	r3, #42	@ 0x2a
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019b2:	e039      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	332a      	adds	r3, #42	@ 0x2a
 80019c4:	2202      	movs	r2, #2
 80019c6:	701a      	strb	r2, [r3, #0]
      break;
 80019c8:	e02e      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	1a9b      	subs	r3, r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	333c      	adds	r3, #60	@ 0x3c
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10a      	bne.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	332a      	adds	r3, #42	@ 0x2a
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
      break;
 80019f4:	e018      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	332a      	adds	r3, #42	@ 0x2a
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
      break;
 8001a0a:	e00d      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	332a      	adds	r3, #42	@ 0x2a
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
      break;
 8001a20:	e002      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a22:	bf00      	nop
 8001a24:	e000      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a26:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	332c      	adds	r3, #44	@ 0x2c
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	8b39      	ldrh	r1, [r7, #24]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4403      	add	r3, r0
 8001a4c:	3334      	adds	r3, #52	@ 0x34
 8001a4e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	334c      	adds	r3, #76	@ 0x4c
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	3338      	adds	r3, #56	@ 0x38
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	3315      	adds	r3, #21
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	334d      	adds	r3, #77	@ 0x4d
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	78fa      	ldrb	r2, [r7, #3]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	3310      	adds	r3, #16
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	1d19      	adds	r1, r3, #4
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	799b      	ldrb	r3, [r3, #6]
 8001aba:	461a      	mov	r2, r3
 8001abc:	f004 fd4a 	bl	8006554 <USB_HC_StartXfer>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop

08001acc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 fa3e 	bl	8005f64 <USB_GetMode>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	f040 80fb 	bne.w	8001ce6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f004 fa01 	bl	8005efc <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80f1 	beq.w	8001ce4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f004 f9f8 	bl	8005efc <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b16:	d104      	bne.n	8001b22 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 f9e8 	bl	8005efc <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b36:	d104      	bne.n	8001b42 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f004 f9d8 	bl	8005efc <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b56:	d104      	bne.n	8001b62 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 f9c8 	bl	8005efc <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d103      	bne.n	8001b7e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 f9ba 	bl	8005efc <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b92:	d120      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b9c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d113      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bae:	2110      	movs	r1, #16
 8001bb0:	6938      	ldr	r0, [r7, #16]
 8001bb2:	f004 f8ad 	bl	8005d10 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bb6:	6938      	ldr	r0, [r7, #16]
 8001bb8:	f004 f8dc 	bl	8005d74 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7a5b      	ldrb	r3, [r3, #9]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d105      	bne.n	8001bd0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f004 face 	bl	800616c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f007 fa95 	bl	8009100 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f004 f98e 	bl	8005efc <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001be6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bea:	d102      	bne.n	8001bf2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f001 fd4d 	bl	800368c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f004 f980 	bl	8005efc <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d106      	bne.n	8001c14 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f007 fa5e 	bl	80090c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2208      	movs	r2, #8
 8001c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 f96f 	bl	8005efc <USB_ReadInterrupts>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c28:	d139      	bne.n	8001c9e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f004 ff0a 	bl	8006a48 <USB_HC_ReadInterrupt>
 8001c34:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e025      	b.n	8001c88 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d018      	beq.n	8001c82 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c66:	d106      	bne.n	8001c76 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f905 	bl	8001e7e <HCD_HC_IN_IRQHandler>
 8001c74:	e005      	b.n	8001c82 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 ff67 	bl	8002b50 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	795b      	ldrb	r3, [r3, #5]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d3d3      	bcc.n	8001c3c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 f92a 	bl	8005efc <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d101      	bne.n	8001cb6 <HAL_HCD_IRQHandler+0x1ea>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_HCD_IRQHandler+0x1ec>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d014      	beq.n	8001ce6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0210 	bic.w	r2, r2, #16
 8001cca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f001 fbfe 	bl	80034ce <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699a      	ldr	r2, [r3, #24]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0210 	orr.w	r2, r2, #16
 8001ce0:	619a      	str	r2, [r3, #24]
 8001ce2:	e000      	b.n	8001ce6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001ce4:	bf00      	nop
    }
  }
}
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_HCD_Start+0x16>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e013      	b.n	8001d2a <HAL_HCD_Start+0x3e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2101      	movs	r1, #1
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 fa92 	bl	800623a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f003 ff8a 	bl	8005c34 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_HCD_Stop+0x16>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e00d      	b.n	8001d64 <HAL_HCD_Stop+0x32>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f004 ffe5 	bl	8006d24 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 fa34 	bl	80061e6 <USB_ResetPort>
 8001d7e:	4603      	mov	r3, r0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	334c      	adds	r3, #76	@ 0x4c
 8001da4:	781b      	ldrb	r3, [r3, #0]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	3338      	adds	r3, #56	@ 0x38
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f004 fa76 	bl	80062da <USB_GetCurrentFrame>
 8001dee:	4603      	mov	r3, r0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 fa51 	bl	80062ac <USB_GetHostSpeed>
 8001e0a:	4603      	mov	r3, r0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	331a      	adds	r3, #26
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	331b      	adds	r3, #27
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	3325      	adds	r3, #37	@ 0x25
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3324      	adds	r3, #36	@ 0x24
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 f840 	bl	8005f22 <USB_ReadChInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d11a      	bne.n	8001ee2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2304      	movs	r3, #4
 8001ebc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	334d      	adds	r3, #77	@ 0x4d
 8001ece:	2207      	movs	r2, #7
 8001ed0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 fdc5 	bl	8006a6a <USB_HC_Halt>
 8001ee0:	e09e      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f004 f819 	bl	8005f22 <USB_ReadChInterrupts>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001efa:	d11b      	bne.n	8001f34 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	334d      	adds	r3, #77	@ 0x4d
 8001f20:	2208      	movs	r2, #8
 8001f22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 fd9c 	bl	8006a6a <USB_HC_Halt>
 8001f32:	e075      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 fff0 	bl	8005f22 <USB_ReadChInterrupts>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d11a      	bne.n	8001f82 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	334d      	adds	r3, #77	@ 0x4d
 8001f6e:	2206      	movs	r2, #6
 8001f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f004 fd75 	bl	8006a6a <USB_HC_Halt>
 8001f80:	e04e      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 ffc9 	bl	8005f22 <USB_ReadChInterrupts>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f9a:	d11b      	bne.n	8001fd4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	334d      	adds	r3, #77	@ 0x4d
 8001fc0:	2209      	movs	r2, #9
 8001fc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f004 fd4c 	bl	8006a6a <USB_HC_Halt>
 8001fd2:	e025      	b.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 ffa0 	bl	8005f22 <USB_ReadChInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe8:	2b80      	cmp	r3, #128	@ 0x80
 8001fea:	d119      	bne.n	8002020 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ffe:	78fa      	ldrb	r2, [r7, #3]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	334d      	adds	r3, #77	@ 0x4d
 800200e:	2207      	movs	r2, #7
 8002010:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f004 fd25 	bl	8006a6a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f003 ff7a 	bl	8005f22 <USB_ReadChInterrupts>
 800202e:	4603      	mov	r3, r0
 8002030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002038:	d112      	bne.n	8002060 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	78fa      	ldrb	r2, [r7, #3]
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f004 fd11 	bl	8006a6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002054:	461a      	mov	r2, r3
 8002056:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800205a:	6093      	str	r3, [r2, #8]
 800205c:	f000 bd75 	b.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f003 ff5a 	bl	8005f22 <USB_ReadChInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	f040 8128 	bne.w	80022ca <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002086:	461a      	mov	r2, r3
 8002088:	2320      	movs	r3, #32
 800208a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	331b      	adds	r3, #27
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d119      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020a2:	78fa      	ldrb	r2, [r7, #3]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	331b      	adds	r3, #27
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	0151      	lsls	r1, r2, #5
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	440a      	add	r2, r1
 80020cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	799b      	ldrb	r3, [r3, #6]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d01b      	beq.n	8002116 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3330      	adds	r3, #48	@ 0x30
 80020ee:	6819      	ldr	r1, [r3, #0]
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	1ac9      	subs	r1, r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4403      	add	r3, r0
 8002112:	3338      	adds	r3, #56	@ 0x38
 8002114:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	334d      	adds	r3, #77	@ 0x4d
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3344      	adds	r3, #68	@ 0x44
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	2301      	movs	r3, #1
 800214e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3326      	adds	r3, #38	@ 0x26
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3326      	adds	r3, #38	@ 0x26
 8002176:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002178:	2b02      	cmp	r3, #2
 800217a:	d110      	bne.n	800219e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f004 fc70 	bl	8006a6a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002196:	461a      	mov	r2, r3
 8002198:	2310      	movs	r3, #16
 800219a:	6093      	str	r3, [r2, #8]
 800219c:	e03d      	b.n	800221a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	3326      	adds	r3, #38	@ 0x26
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d00a      	beq.n	80021ca <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3326      	adds	r3, #38	@ 0x26
 80021c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d127      	bne.n	800221a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	0151      	lsls	r1, r2, #5
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	440a      	add	r2, r1
 80021e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021e8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	334c      	adds	r3, #76	@ 0x4c
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	334c      	adds	r3, #76	@ 0x4c
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	4619      	mov	r1, r3
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f006 ff81 	bl	800911c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	799b      	ldrb	r3, [r3, #6]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d13b      	bne.n	800229a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	3338      	adds	r3, #56	@ 0x38
 8002232:	6819      	ldr	r1, [r3, #0]
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4403      	add	r3, r0
 8002242:	3328      	adds	r3, #40	@ 0x28
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	440b      	add	r3, r1
 8002248:	1e59      	subs	r1, r3, #1
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4403      	add	r3, r0
 8002258:	3328      	adds	r3, #40	@ 0x28
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8470 	beq.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	333c      	adds	r3, #60	@ 0x3c
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2d8      	uxtb	r0, r3
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	333c      	adds	r3, #60	@ 0x3c
 8002292:	4602      	mov	r2, r0
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	f000 bc58 	b.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	333c      	adds	r3, #60	@ 0x3c
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2d8      	uxtb	r0, r3
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	333c      	adds	r3, #60	@ 0x3c
 80022c2:	4602      	mov	r2, r0
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	f000 bc40 	b.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 fe25 	bl	8005f22 <USB_ReadChInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d131      	bne.n	8002346 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022ee:	461a      	mov	r2, r3
 80022f0:	2320      	movs	r3, #32
 80022f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	331a      	adds	r3, #26
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	f040 841f 	bne.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	331b      	adds	r3, #27
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	334d      	adds	r3, #77	@ 0x4d
 8002330:	2203      	movs	r2, #3
 8002332:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f004 fb94 	bl	8006a6a <USB_HC_Halt>
 8002342:	f000 bc02 	b.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f003 fde7 	bl	8005f22 <USB_ReadChInterrupts>
 8002354:	4603      	mov	r3, r0
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b02      	cmp	r3, #2
 800235c:	f040 8305 	bne.w	800296a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4413      	add	r3, r2
 8002368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800236c:	461a      	mov	r2, r3
 800236e:	2302      	movs	r3, #2
 8002370:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	334d      	adds	r3, #77	@ 0x4d
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d114      	bne.n	80023b2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	334d      	adds	r3, #77	@ 0x4d
 8002398:	2202      	movs	r2, #2
 800239a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	334c      	adds	r3, #76	@ 0x4c
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
 80023b0:	e2cc      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	334d      	adds	r3, #77	@ 0x4d
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b06      	cmp	r3, #6
 80023c6:	d114      	bne.n	80023f2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	334d      	adds	r3, #77	@ 0x4d
 80023d8:	2202      	movs	r2, #2
 80023da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	334c      	adds	r3, #76	@ 0x4c
 80023ec:	2205      	movs	r2, #5
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e2ac      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	334d      	adds	r3, #77	@ 0x4d
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b07      	cmp	r3, #7
 8002406:	d00b      	beq.n	8002420 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	334d      	adds	r3, #77	@ 0x4d
 8002418:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800241a:	2b09      	cmp	r3, #9
 800241c:	f040 80a6 	bne.w	800256c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	334d      	adds	r3, #77	@ 0x4d
 8002430:	2202      	movs	r2, #2
 8002432:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	3344      	adds	r3, #68	@ 0x44
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	1c59      	adds	r1, r3, #1
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4403      	add	r3, r0
 8002454:	3344      	adds	r3, #68	@ 0x44
 8002456:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3344      	adds	r3, #68	@ 0x44
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d943      	bls.n	80024f6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3344      	adds	r3, #68	@ 0x44
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	331a      	adds	r3, #26
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d123      	bne.n	80024e0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	331b      	adds	r3, #27
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	331c      	adds	r3, #28
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	0151      	lsls	r1, r2, #5
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	440a      	add	r2, r1
 80024d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024de:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	334c      	adds	r3, #76	@ 0x4c
 80024f0:	2204      	movs	r2, #4
 80024f2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024f4:	e229      	b.n	800294a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	334c      	adds	r3, #76	@ 0x4c
 8002506:	2202      	movs	r2, #2
 8002508:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3326      	adds	r3, #38	@ 0x26
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00b      	beq.n	8002538 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	3326      	adds	r3, #38	@ 0x26
 8002530:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002532:	2b02      	cmp	r3, #2
 8002534:	f040 8209 	bne.w	800294a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800254e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002556:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002564:	461a      	mov	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800256a:	e1ee      	b.n	800294a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	334d      	adds	r3, #77	@ 0x4d
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b05      	cmp	r3, #5
 8002580:	f040 80c8 	bne.w	8002714 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	334d      	adds	r3, #77	@ 0x4d
 8002594:	2202      	movs	r2, #2
 8002596:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	331b      	adds	r3, #27
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	f040 81ce 	bne.w	800294c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3326      	adds	r3, #38	@ 0x26
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d16b      	bne.n	800269e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80025c6:	78fa      	ldrb	r2, [r7, #3]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3348      	adds	r3, #72	@ 0x48
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	1c59      	adds	r1, r3, #1
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4403      	add	r3, r0
 80025e6:	3348      	adds	r3, #72	@ 0x48
 80025e8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	3348      	adds	r3, #72	@ 0x48
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d943      	bls.n	8002688 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3348      	adds	r3, #72	@ 0x48
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	331b      	adds	r3, #27
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3344      	adds	r3, #68	@ 0x44
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d809      	bhi.n	8002652 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	331c      	adds	r3, #28
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	0151      	lsls	r1, r2, #5
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	440a      	add	r2, r1
 8002668:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800266c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002670:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002672:	78fa      	ldrb	r2, [r7, #3]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	334c      	adds	r3, #76	@ 0x4c
 8002682:	2204      	movs	r2, #4
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e014      	b.n	80026b2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	334c      	adds	r3, #76	@ 0x4c
 8002698:	2202      	movs	r2, #2
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e009      	b.n	80026b2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	334c      	adds	r3, #76	@ 0x4c
 80026ae:	2202      	movs	r2, #2
 80026b0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3326      	adds	r3, #38	@ 0x26
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3326      	adds	r3, #38	@ 0x26
 80026d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026da:	2b02      	cmp	r3, #2
 80026dc:	f040 8136 	bne.w	800294c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e11b      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334d      	adds	r3, #77	@ 0x4d
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b03      	cmp	r3, #3
 8002728:	f040 8081 	bne.w	800282e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	334d      	adds	r3, #77	@ 0x4d
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	331b      	adds	r3, #27
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	f040 80fa 	bne.w	800294c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	334c      	adds	r3, #76	@ 0x4c
 8002768:	2202      	movs	r2, #2
 800276a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	0151      	lsls	r1, r2, #5
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	440a      	add	r2, r1
 8002782:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	0151      	lsls	r1, r2, #5
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	440a      	add	r2, r1
 80027a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027aa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	0151      	lsls	r1, r2, #5
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	440a      	add	r2, r1
 80027c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027c6:	f023 0320 	bic.w	r3, r3, #32
 80027ca:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3326      	adds	r3, #38	@ 0x26
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	3326      	adds	r3, #38	@ 0x26
 80027f2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	f040 80a9 	bne.w	800294c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002810:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002818:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	e08e      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	334d      	adds	r3, #77	@ 0x4d
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d143      	bne.n	80028cc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	334d      	adds	r3, #77	@ 0x4d
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	334c      	adds	r3, #76	@ 0x4c
 8002868:	2202      	movs	r2, #2
 800286a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	3326      	adds	r3, #38	@ 0x26
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	3326      	adds	r3, #38	@ 0x26
 8002892:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002894:	2b02      	cmp	r3, #2
 8002896:	d159      	bne.n	800294c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028ae:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028b6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c4:	461a      	mov	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e03f      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	334d      	adds	r3, #77	@ 0x4d
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d126      	bne.n	8002930 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	334d      	adds	r3, #77	@ 0x4d
 80028f2:	2202      	movs	r2, #2
 80028f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3344      	adds	r3, #68	@ 0x44
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	1c59      	adds	r1, r3, #1
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4403      	add	r3, r0
 8002916:	3344      	adds	r3, #68	@ 0x44
 8002918:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	334c      	adds	r3, #76	@ 0x4c
 800292a:	2204      	movs	r2, #4
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e00d      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	334d      	adds	r3, #77	@ 0x4d
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b02      	cmp	r3, #2
 8002944:	f000 8100 	beq.w	8002b48 <HCD_HC_IN_IRQHandler+0xcca>
 8002948:	e000      	b.n	800294c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800294a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	334c      	adds	r3, #76	@ 0x4c
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f006 fbda 	bl	800911c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002968:	e0ef      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f003 fad5 	bl	8005f22 <USB_ReadChInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297e:	2b40      	cmp	r3, #64	@ 0x40
 8002980:	d12f      	bne.n	80029e2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800298e:	461a      	mov	r2, r3
 8002990:	2340      	movs	r3, #64	@ 0x40
 8002992:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	334d      	adds	r3, #77	@ 0x4d
 80029a4:	2205      	movs	r2, #5
 80029a6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	331a      	adds	r3, #26
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3344      	adds	r3, #68	@ 0x44
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 f845 	bl	8006a6a <USB_HC_Halt>
 80029e0:	e0b3      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 fa99 	bl	8005f22 <USB_ReadChInterrupts>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	f040 80a7 	bne.w	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3326      	adds	r3, #38	@ 0x26
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d11b      	bne.n	8002a4a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3344      	adds	r3, #68	@ 0x44
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	334d      	adds	r3, #77	@ 0x4d
 8002a36:	2204      	movs	r2, #4
 8002a38:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 f811 	bl	8006a6a <USB_HC_Halt>
 8002a48:	e03f      	b.n	8002aca <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	3326      	adds	r3, #38	@ 0x26
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3326      	adds	r3, #38	@ 0x26
 8002a70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d129      	bne.n	8002aca <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	3344      	adds	r3, #68	@ 0x44
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	799b      	ldrb	r3, [r3, #6]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	331b      	adds	r3, #27
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d110      	bne.n	8002aca <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	334d      	adds	r3, #77	@ 0x4d
 8002ab8:	2204      	movs	r2, #4
 8002aba:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 ffd0 	bl	8006a6a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	331b      	adds	r3, #27
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d129      	bne.n	8002b34 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	331b      	adds	r3, #27
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	0151      	lsls	r1, r2, #5
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	440a      	add	r2, r1
 8002b0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b12:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	0151      	lsls	r1, r2, #5
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	440a      	add	r2, r1
 8002b2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b2e:	f043 0320 	orr.w	r3, r3, #32
 8002b32:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	2310      	movs	r3, #16
 8002b44:	6093      	str	r3, [r2, #8]
 8002b46:	e000      	b.n	8002b4a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b48:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 f9d7 	bl	8005f22 <USB_ReadChInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d11b      	bne.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	334d      	adds	r3, #77	@ 0x4d
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 ff5c 	bl	8006a6a <USB_HC_Halt>
 8002bb2:	f000 bc89 	b.w	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 f9af 	bl	8005f22 <USB_ReadChInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	f040 8082 	bne.w	8002cd4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2320      	movs	r3, #32
 8002be0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	3319      	adds	r3, #25
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d124      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	3319      	adds	r3, #25
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334c      	adds	r3, #76	@ 0x4c
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334d      	adds	r3, #77	@ 0x4d
 8002c30:	2203      	movs	r2, #3
 8002c32:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 ff14 	bl	8006a6a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	331a      	adds	r3, #26
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	f040 8437 	bne.w	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	331b      	adds	r3, #27
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f040 842b 	bne.w	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3326      	adds	r3, #38	@ 0x26
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d009      	beq.n	8002c9c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	331b      	adds	r3, #27
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	334d      	adds	r3, #77	@ 0x4d
 8002cac:	2203      	movs	r2, #3
 8002cae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fed6 	bl	8006a6a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	3344      	adds	r3, #68	@ 0x44
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	e3f9      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 f920 	bl	8005f22 <USB_ReadChInterrupts>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cec:	d111      	bne.n	8002d12 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d00:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 fead 	bl	8006a6a <USB_HC_Halt>
 8002d10:	e3da      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f003 f901 	bl	8005f22 <USB_ReadChInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d168      	bne.n	8002dfc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3344      	adds	r3, #68	@ 0x44
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f003 f8eb 	bl	8005f22 <USB_ReadChInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d52:	2b40      	cmp	r3, #64	@ 0x40
 8002d54:	d112      	bne.n	8002d7c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	3319      	adds	r3, #25
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d76:	461a      	mov	r2, r3
 8002d78:	2340      	movs	r3, #64	@ 0x40
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	331b      	adds	r3, #27
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d019      	beq.n	8002dc6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	331b      	adds	r3, #27
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	0151      	lsls	r1, r2, #5
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	440a      	add	r2, r1
 8002dbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	334d      	adds	r3, #77	@ 0x4d
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 fe38 	bl	8006a6a <USB_HC_Halt>
 8002dfa:	e365      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 f88c 	bl	8005f22 <USB_ReadChInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e10:	2b40      	cmp	r3, #64	@ 0x40
 8002e12:	d139      	bne.n	8002e88 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	334d      	adds	r3, #77	@ 0x4d
 8002e24:	2205      	movs	r2, #5
 8002e26:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	331a      	adds	r3, #26
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3319      	adds	r3, #25
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	3344      	adds	r3, #68	@ 0x44
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f003 fdfb 	bl	8006a6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e80:	461a      	mov	r2, r3
 8002e82:	2340      	movs	r3, #64	@ 0x40
 8002e84:	6093      	str	r3, [r2, #8]
 8002e86:	e31f      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 f846 	bl	8005f22 <USB_ReadChInterrupts>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d11a      	bne.n	8002ed6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eac:	461a      	mov	r2, r3
 8002eae:	2308      	movs	r3, #8
 8002eb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	334d      	adds	r3, #77	@ 0x4d
 8002ec2:	2206      	movs	r2, #6
 8002ec4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 fdcb 	bl	8006a6a <USB_HC_Halt>
 8002ed4:	e2f8      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 f81f 	bl	8005f22 <USB_ReadChInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b10      	cmp	r3, #16
 8002eec:	d144      	bne.n	8002f78 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3344      	adds	r3, #68	@ 0x44
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	334d      	adds	r3, #77	@ 0x4d
 8002f12:	2204      	movs	r2, #4
 8002f14:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	3319      	adds	r3, #25
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d114      	bne.n	8002f56 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3318      	adds	r3, #24
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	3319      	adds	r3, #25
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f003 fd83 	bl	8006a6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	2310      	movs	r3, #16
 8002f74:	6093      	str	r3, [r2, #8]
 8002f76:	e2a7      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f002 ffce 	bl	8005f22 <USB_ReadChInterrupts>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8c:	2b80      	cmp	r3, #128	@ 0x80
 8002f8e:	f040 8083 	bne.w	8003098 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	799b      	ldrb	r3, [r3, #6]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d111      	bne.n	8002fbe <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	334d      	adds	r3, #77	@ 0x4d
 8002faa:	2207      	movs	r2, #7
 8002fac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 fd57 	bl	8006a6a <USB_HC_Halt>
 8002fbc:	e062      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3344      	adds	r3, #68	@ 0x44
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	1c59      	adds	r1, r3, #1
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4403      	add	r3, r0
 8002fde:	3344      	adds	r3, #68	@ 0x44
 8002fe0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	3344      	adds	r3, #68	@ 0x44
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d922      	bls.n	800303e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	3344      	adds	r3, #68	@ 0x44
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	334c      	adds	r3, #76	@ 0x4c
 800301c:	2204      	movs	r2, #4
 800301e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	334c      	adds	r3, #76	@ 0x4c
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	4619      	mov	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f006 f870 	bl	800911c <HAL_HCD_HC_NotifyURBChange_Callback>
 800303c:	e022      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	334c      	adds	r3, #76	@ 0x4c
 800304e:	2202      	movs	r2, #2
 8003050:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003068:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003070:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003090:	461a      	mov	r2, r3
 8003092:	2380      	movs	r3, #128	@ 0x80
 8003094:	6093      	str	r3, [r2, #8]
 8003096:	e217      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f002 ff3e 	bl	8005f22 <USB_ReadChInterrupts>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b0:	d11b      	bne.n	80030ea <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	334d      	adds	r3, #77	@ 0x4d
 80030c2:	2209      	movs	r2, #9
 80030c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 fccb 	bl	8006a6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e0:	461a      	mov	r2, r3
 80030e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030e6:	6093      	str	r3, [r2, #8]
 80030e8:	e1ee      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f002 ff15 	bl	8005f22 <USB_ReadChInterrupts>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	f040 81df 	bne.w	80034c2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003110:	461a      	mov	r2, r3
 8003112:	2302      	movs	r3, #2
 8003114:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	334d      	adds	r3, #77	@ 0x4d
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	f040 8093 	bne.w	8003254 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	334d      	adds	r3, #77	@ 0x4d
 800313e:	2202      	movs	r2, #2
 8003140:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	334c      	adds	r3, #76	@ 0x4c
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	3326      	adds	r3, #38	@ 0x26
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d00b      	beq.n	8003184 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	3326      	adds	r3, #38	@ 0x26
 800317c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800317e:	2b03      	cmp	r3, #3
 8003180:	f040 8190 	bne.w	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	799b      	ldrb	r3, [r3, #6]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d115      	bne.n	80031b8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	333d      	adds	r3, #61	@ 0x3d
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	f083 0301 	eor.w	r3, r3, #1
 80031a4:	b2d8      	uxtb	r0, r3
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	333d      	adds	r3, #61	@ 0x3d
 80031b4:	4602      	mov	r2, r0
 80031b6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	799b      	ldrb	r3, [r3, #6]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	f040 8171 	bne.w	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3334      	adds	r3, #52	@ 0x34
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8165 	beq.w	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	3334      	adds	r3, #52	@ 0x34
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4403      	add	r3, r0
 80031fa:	3328      	adds	r3, #40	@ 0x28
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	440b      	add	r3, r1
 8003200:	1e59      	subs	r1, r3, #1
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4403      	add	r3, r0
 8003210:	3328      	adds	r3, #40	@ 0x28
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	fbb1 f3f3 	udiv	r3, r1, r3
 8003218:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 813f 	beq.w	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	333d      	adds	r3, #61	@ 0x3d
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	f083 0301 	eor.w	r3, r3, #1
 800323e:	b2d8      	uxtb	r0, r3
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	333d      	adds	r3, #61	@ 0x3d
 800324e:	4602      	mov	r2, r0
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e127      	b.n	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	334d      	adds	r3, #77	@ 0x4d
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d120      	bne.n	80032ac <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	334d      	adds	r3, #77	@ 0x4d
 800327a:	2202      	movs	r2, #2
 800327c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	331b      	adds	r3, #27
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	f040 8107 	bne.w	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	334c      	adds	r3, #76	@ 0x4c
 80032a6:	2202      	movs	r2, #2
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e0fb      	b.n	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	334d      	adds	r3, #77	@ 0x4d
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d13a      	bne.n	8003338 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	334d      	adds	r3, #77	@ 0x4d
 80032d2:	2202      	movs	r2, #2
 80032d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334c      	adds	r3, #76	@ 0x4c
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	331b      	adds	r3, #27
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	f040 80d1 	bne.w	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	331b      	adds	r3, #27
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4413      	add	r3, r2
 800331e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	0151      	lsls	r1, r2, #5
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	440a      	add	r2, r1
 800332c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003334:	6053      	str	r3, [r2, #4]
 8003336:	e0b5      	b.n	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	334d      	adds	r3, #77	@ 0x4d
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b05      	cmp	r3, #5
 800334c:	d114      	bne.n	8003378 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334d      	adds	r3, #77	@ 0x4d
 800335e:	2202      	movs	r2, #2
 8003360:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	334c      	adds	r3, #76	@ 0x4c
 8003372:	2202      	movs	r2, #2
 8003374:	701a      	strb	r2, [r3, #0]
 8003376:	e095      	b.n	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	334d      	adds	r3, #77	@ 0x4d
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b06      	cmp	r3, #6
 800338c:	d114      	bne.n	80033b8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	334d      	adds	r3, #77	@ 0x4d
 800339e:	2202      	movs	r2, #2
 80033a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	334c      	adds	r3, #76	@ 0x4c
 80033b2:	2205      	movs	r2, #5
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e075      	b.n	80034a4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	334d      	adds	r3, #77	@ 0x4d
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b07      	cmp	r3, #7
 80033cc:	d00a      	beq.n	80033e4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	334d      	adds	r3, #77	@ 0x4d
 80033de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033e0:	2b09      	cmp	r3, #9
 80033e2:	d170      	bne.n	80034c6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	334d      	adds	r3, #77	@ 0x4d
 80033f4:	2202      	movs	r2, #2
 80033f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	3344      	adds	r3, #68	@ 0x44
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	1c59      	adds	r1, r3, #1
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4403      	add	r3, r0
 8003418:	3344      	adds	r3, #68	@ 0x44
 800341a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	3344      	adds	r3, #68	@ 0x44
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d914      	bls.n	800345c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	3344      	adds	r3, #68	@ 0x44
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	334c      	adds	r3, #76	@ 0x4c
 8003456:	2204      	movs	r2, #4
 8003458:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800345a:	e022      	b.n	80034a2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	334c      	adds	r3, #76	@ 0x4c
 800346c:	2202      	movs	r2, #2
 800346e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003486:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800348e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349c:	461a      	mov	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034a2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	334c      	adds	r3, #76	@ 0x4c
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	4619      	mov	r1, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f005 fe2e 	bl	800911c <HAL_HCD_HC_NotifyURBChange_Callback>
 80034c0:	e002      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80034c6:	bf00      	nop
  }
}
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b08a      	sub	sp, #40	@ 0x28
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034de:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	0c5b      	lsrs	r3, r3, #17
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003502:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d004      	beq.n	8003514 <HCD_RXQLVL_IRQHandler+0x46>
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b05      	cmp	r3, #5
 800350e:	f000 80b6 	beq.w	800367e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003512:	e0b7      	b.n	8003684 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80b3 	beq.w	8003682 <HCD_RXQLVL_IRQHandler+0x1b4>
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	332c      	adds	r3, #44	@ 0x2c
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80a7 	beq.w	8003682 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	3338      	adds	r3, #56	@ 0x38
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	18d1      	adds	r1, r2, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4403      	add	r3, r0
 8003558:	3334      	adds	r3, #52	@ 0x34
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4299      	cmp	r1, r3
 800355e:	f200 8083 	bhi.w	8003668 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	332c      	adds	r3, #44	@ 0x2c
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	b292      	uxth	r2, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f002 fc65 	bl	8005e4c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	332c      	adds	r3, #44	@ 0x2c
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	18d1      	adds	r1, r2, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4403      	add	r3, r0
 80035a6:	332c      	adds	r3, #44	@ 0x2c
 80035a8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	3338      	adds	r3, #56	@ 0x38
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	18d1      	adds	r1, r2, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4403      	add	r3, r0
 80035ce:	3338      	adds	r3, #56	@ 0x38
 80035d0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	0cdb      	lsrs	r3, r3, #19
 80035e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035e6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3328      	adds	r3, #40	@ 0x28
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4293      	cmp	r3, r2
 8003600:	d13f      	bne.n	8003682 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d03c      	beq.n	8003682 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	4413      	add	r3, r2
 8003610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800361e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003626:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003634:	461a      	mov	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	333c      	adds	r3, #60	@ 0x3c
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	f083 0301 	eor.w	r3, r3, #1
 8003650:	b2d8      	uxtb	r0, r3
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	333c      	adds	r3, #60	@ 0x3c
 8003662:	4602      	mov	r2, r0
 8003664:	701a      	strb	r2, [r3, #0]
      break;
 8003666:	e00c      	b.n	8003682 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	334c      	adds	r3, #76	@ 0x4c
 8003678:	2204      	movs	r2, #4
 800367a:	701a      	strb	r2, [r3, #0]
      break;
 800367c:	e001      	b.n	8003682 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003682:	bf00      	nop
  }
}
 8003684:	bf00      	nop
 8003686:	3728      	adds	r7, #40	@ 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80036b8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d10b      	bne.n	80036dc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f005 fd08 	bl	80090e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f043 0302 	orr.w	r3, r3, #2
 80036da:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d132      	bne.n	800374c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f043 0308 	orr.w	r3, r3, #8
 80036ec:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d126      	bne.n	8003746 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7a5b      	ldrb	r3, [r3, #9]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d113      	bne.n	8003728 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003706:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800370a:	d106      	bne.n	800371a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2102      	movs	r1, #2
 8003712:	4618      	mov	r0, r3
 8003714:	f002 fd2a 	bl	800616c <USB_InitFSLSPClkSel>
 8003718:	e011      	b.n	800373e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2101      	movs	r1, #1
 8003720:	4618      	mov	r0, r3
 8003722:	f002 fd23 	bl	800616c <USB_InitFSLSPClkSel>
 8003726:	e00a      	b.n	800373e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	79db      	ldrb	r3, [r3, #7]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d106      	bne.n	800373e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003736:	461a      	mov	r2, r3
 8003738:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800373c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f005 fcfa 	bl	8009138 <HAL_HCD_PortEnabled_Callback>
 8003744:	e002      	b.n	800374c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f005 fd04 	bl	8009154 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b20      	cmp	r3, #32
 8003754:	d103      	bne.n	800375e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f043 0320 	orr.w	r3, r3, #32
 800375c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003764:	461a      	mov	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6013      	str	r3, [r2, #0]
}
 800376a:	bf00      	nop
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e12b      	b.n	80039de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd f962 	bl	8000a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	@ 0x24
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037d8:	f001 fa20 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 80037dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4a81      	ldr	r2, [pc, #516]	@ (80039e8 <HAL_I2C_Init+0x274>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d807      	bhi.n	80037f8 <HAL_I2C_Init+0x84>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a80      	ldr	r2, [pc, #512]	@ (80039ec <HAL_I2C_Init+0x278>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	bf94      	ite	ls
 80037f0:	2301      	movls	r3, #1
 80037f2:	2300      	movhi	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e006      	b.n	8003806 <HAL_I2C_Init+0x92>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a7d      	ldr	r2, [pc, #500]	@ (80039f0 <HAL_I2C_Init+0x27c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	bf94      	ite	ls
 8003800:	2301      	movls	r3, #1
 8003802:	2300      	movhi	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0e7      	b.n	80039de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a78      	ldr	r2, [pc, #480]	@ (80039f4 <HAL_I2C_Init+0x280>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	0c9b      	lsrs	r3, r3, #18
 8003818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a6a      	ldr	r2, [pc, #424]	@ (80039e8 <HAL_I2C_Init+0x274>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d802      	bhi.n	8003848 <HAL_I2C_Init+0xd4>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3301      	adds	r3, #1
 8003846:	e009      	b.n	800385c <HAL_I2C_Init+0xe8>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	4a69      	ldr	r2, [pc, #420]	@ (80039f8 <HAL_I2C_Init+0x284>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	3301      	adds	r3, #1
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	430b      	orrs	r3, r1
 8003862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800386e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	495c      	ldr	r1, [pc, #368]	@ (80039e8 <HAL_I2C_Init+0x274>)
 8003878:	428b      	cmp	r3, r1
 800387a:	d819      	bhi.n	80038b0 <HAL_I2C_Init+0x13c>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e59      	subs	r1, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fbb1 f3f3 	udiv	r3, r1, r3
 800388a:	1c59      	adds	r1, r3, #1
 800388c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003890:	400b      	ands	r3, r1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_I2C_Init+0x138>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1e59      	subs	r1, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038aa:	e051      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 80038ac:	2304      	movs	r3, #4
 80038ae:	e04f      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d111      	bne.n	80038dc <HAL_I2C_Init+0x168>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	e012      	b.n	8003902 <HAL_I2C_Init+0x18e>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	0099      	lsls	r1, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_Init+0x196>
 8003906:	2301      	movs	r3, #1
 8003908:	e022      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10e      	bne.n	8003930 <HAL_I2C_Init+0x1bc>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1e58      	subs	r0, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	440b      	add	r3, r1
 8003920:	fbb0 f3f3 	udiv	r3, r0, r3
 8003924:	3301      	adds	r3, #1
 8003926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800392e:	e00f      	b.n	8003950 <HAL_I2C_Init+0x1dc>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1e58      	subs	r0, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	0099      	lsls	r1, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	fbb0 f3f3 	udiv	r3, r0, r3
 8003946:	3301      	adds	r3, #1
 8003948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	6809      	ldr	r1, [r1, #0]
 8003954:	4313      	orrs	r3, r2
 8003956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800397e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6911      	ldr	r1, [r2, #16]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	4311      	orrs	r1, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	000186a0 	.word	0x000186a0
 80039ec:	001e847f 	.word	0x001e847f
 80039f0:	003d08ff 	.word	0x003d08ff
 80039f4:	431bde83 	.word	0x431bde83
 80039f8:	10624dd3 	.word	0x10624dd3

080039fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e128      	b.n	8003c60 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a90      	ldr	r2, [pc, #576]	@ (8003c68 <HAL_I2S_Init+0x26c>)
 8003a26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7fd f863 	bl	8000af4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2202      	movs	r2, #2
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a44:	f023 030f 	bic.w	r3, r3, #15
 8003a48:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d060      	beq.n	8003b1c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a62:	2310      	movs	r3, #16
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e001      	b.n	8003a6c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a68:	2320      	movs	r3, #32
 8003a6a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d802      	bhi.n	8003a7a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f001 f9c4 	bl	8004e08 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a80:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a8a:	d125      	bne.n	8003ad8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	3305      	adds	r3, #5
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	e01f      	b.n	8003af6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	461a      	mov	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	3305      	adds	r3, #5
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	e00e      	b.n	8003af6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	3305      	adds	r3, #5
 8003af4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4a5c      	ldr	r2, [pc, #368]	@ (8003c6c <HAL_I2S_Init+0x270>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	08db      	lsrs	r3, r3, #3
 8003b00:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	085b      	lsrs	r3, r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	e003      	b.n	8003b24 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d902      	bls.n	8003b30 <HAL_I2S_Init+0x134>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	2bff      	cmp	r3, #255	@ 0xff
 8003b2e:	d907      	bls.n	8003b40 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b34:	f043 0210 	orr.w	r2, r3, #16
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e08f      	b.n	8003c60 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	ea42 0103 	orr.w	r1, r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b5e:	f023 030f 	bic.w	r3, r3, #15
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6851      	ldr	r1, [r2, #4]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6892      	ldr	r2, [r2, #8]
 8003b6a:	4311      	orrs	r1, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68d2      	ldr	r2, [r2, #12]
 8003b70:	4311      	orrs	r1, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6992      	ldr	r2, [r2, #24]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b82:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d161      	bne.n	8003c50 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a38      	ldr	r2, [pc, #224]	@ (8003c70 <HAL_I2S_Init+0x274>)
 8003b90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a37      	ldr	r2, [pc, #220]	@ (8003c74 <HAL_I2S_Init+0x278>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2S_Init+0x1a4>
 8003b9c:	4b36      	ldr	r3, [pc, #216]	@ (8003c78 <HAL_I2S_Init+0x27c>)
 8003b9e:	e001      	b.n	8003ba4 <HAL_I2S_Init+0x1a8>
 8003ba0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	4932      	ldr	r1, [pc, #200]	@ (8003c74 <HAL_I2S_Init+0x278>)
 8003bac:	428a      	cmp	r2, r1
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2S_Init+0x1b8>
 8003bb0:	4a31      	ldr	r2, [pc, #196]	@ (8003c78 <HAL_I2S_Init+0x27c>)
 8003bb2:	e001      	b.n	8003bb8 <HAL_I2S_Init+0x1bc>
 8003bb4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003bb8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bbc:	f023 030f 	bic.w	r3, r3, #15
 8003bc0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8003c74 <HAL_I2S_Init+0x278>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2S_Init+0x1d4>
 8003bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8003c78 <HAL_I2S_Init+0x27c>)
 8003bce:	e001      	b.n	8003bd4 <HAL_I2S_Init+0x1d8>
 8003bd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a25      	ldr	r2, [pc, #148]	@ (8003c74 <HAL_I2S_Init+0x278>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_I2S_Init+0x1ea>
 8003be2:	4b25      	ldr	r3, [pc, #148]	@ (8003c78 <HAL_I2S_Init+0x27c>)
 8003be4:	e001      	b.n	8003bea <HAL_I2S_Init+0x1ee>
 8003be6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf6:	d003      	beq.n	8003c00 <HAL_I2S_Init+0x204>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	e001      	b.n	8003c0c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c20:	4313      	orrs	r3, r2
 8003c22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	897b      	ldrh	r3, [r7, #10]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c38:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a0d      	ldr	r2, [pc, #52]	@ (8003c74 <HAL_I2S_Init+0x278>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <HAL_I2S_Init+0x24c>
 8003c44:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <HAL_I2S_Init+0x27c>)
 8003c46:	e001      	b.n	8003c4c <HAL_I2S_Init+0x250>
 8003c48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c4c:	897a      	ldrh	r2, [r7, #10]
 8003c4e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	08003d73 	.word	0x08003d73
 8003c6c:	cccccccd 	.word	0xcccccccd
 8003c70:	08003e89 	.word	0x08003e89
 8003c74:	40003800 	.word	0x40003800
 8003c78:	40003400 	.word	0x40003400

08003c7c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	881a      	ldrh	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	1c9a      	adds	r2, r3, #2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10e      	bne.n	8003d0c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cfc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff ffb8 	bl	8003c7c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d26:	b292      	uxth	r2, r2
 8003d28:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	1c9a      	adds	r2, r3, #2
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10e      	bne.n	8003d6a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d5a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff93 	bl	8003c90 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d13a      	bne.n	8003e04 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d109      	bne.n	8003dac <I2S_IRQHandler+0x3a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da2:	2b40      	cmp	r3, #64	@ 0x40
 8003da4:	d102      	bne.n	8003dac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff ffb4 	bl	8003d14 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db2:	2b40      	cmp	r3, #64	@ 0x40
 8003db4:	d126      	bne.n	8003e04 <I2S_IRQHandler+0x92>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d11f      	bne.n	8003e04 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df6:	f043 0202 	orr.w	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff ff50 	bl	8003ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d136      	bne.n	8003e7e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d109      	bne.n	8003e2e <I2S_IRQHandler+0xbc>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e24:	2b80      	cmp	r3, #128	@ 0x80
 8003e26:	d102      	bne.n	8003e2e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ff45 	bl	8003cb8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d122      	bne.n	8003e7e <I2S_IRQHandler+0x10c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d11b      	bne.n	8003e7e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e54:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e70:	f043 0204 	orr.w	r2, r3, #4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ff13 	bl	8003ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e7e:	bf00      	nop
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a92      	ldr	r2, [pc, #584]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ea2:	4b92      	ldr	r3, [pc, #584]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea4:	e001      	b.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ea6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a8b      	ldr	r2, [pc, #556]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ec0:	4b8a      	ldr	r3, [pc, #552]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ec2:	e001      	b.n	8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ec4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ed4:	d004      	beq.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f040 8099 	bne.w	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d107      	bne.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f925 	bl	8004144 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f9c8 	bl	80042a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1a:	2b40      	cmp	r3, #64	@ 0x40
 8003f1c:	d13a      	bne.n	8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d035      	beq.n	8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a6e      	ldr	r2, [pc, #440]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f32:	4b6e      	ldr	r3, [pc, #440]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f34:	e001      	b.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4969      	ldr	r1, [pc, #420]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f42:	428b      	cmp	r3, r1
 8003f44:	d101      	bne.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f46:	4b69      	ldr	r3, [pc, #420]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f48:	e001      	b.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f4e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f52:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f043 0202 	orr.w	r2, r3, #2
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fe88 	bl	8003ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	f040 80c3 	bne.w	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80bd 	beq.w	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a49      	ldr	r2, [pc, #292]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d101      	bne.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fc6:	4b49      	ldr	r3, [pc, #292]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fc8:	e001      	b.n	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4944      	ldr	r1, [pc, #272]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fd6:	428b      	cmp	r3, r1
 8003fd8:	d101      	bne.n	8003fde <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fda:	4b44      	ldr	r3, [pc, #272]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fdc:	e001      	b.n	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003fde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fe6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	f043 0204 	orr.w	r2, r3, #4
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fe4a 	bl	8003ca4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004010:	e089      	b.n	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b02      	cmp	r3, #2
 800401a:	d107      	bne.n	800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f8be 	bl	80041a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d107      	bne.n	8004046 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f8fd 	bl	8004240 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404c:	2b40      	cmp	r3, #64	@ 0x40
 800404e:	d12f      	bne.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d02a      	beq.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004068:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1e      	ldr	r2, [pc, #120]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004074:	4b1d      	ldr	r3, [pc, #116]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004076:	e001      	b.n	800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004078:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4919      	ldr	r1, [pc, #100]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004084:	428b      	cmp	r3, r1
 8004086:	d101      	bne.n	800408c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004088:	4b18      	ldr	r3, [pc, #96]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800408a:	e001      	b.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800408c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004090:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004094:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	f043 0202 	orr.w	r2, r3, #2
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fdfa 	bl	8003ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d136      	bne.n	8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d031      	beq.n	8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a07      	ldr	r2, [pc, #28]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d101      	bne.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040ce:	4b07      	ldr	r3, [pc, #28]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040d0:	e001      	b.n	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4902      	ldr	r1, [pc, #8]	@ (80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040de:	428b      	cmp	r3, r1
 80040e0:	d106      	bne.n	80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040e2:	4b02      	ldr	r3, [pc, #8]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040e4:	e006      	b.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040e6:	bf00      	nop
 80040e8:	40003800 	.word	0x40003800
 80040ec:	40003400 	.word	0x40003400
 80040f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040f8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004108:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004116:	f043 0204 	orr.w	r2, r3, #4
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff fdc0 	bl	8003ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004124:	e000      	b.n	8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004126:	bf00      	nop
}
 8004128:	bf00      	nop
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	1c99      	adds	r1, r3, #2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6251      	str	r1, [r2, #36]	@ 0x24
 8004156:	881a      	ldrh	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d113      	bne.n	800419e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004184:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff ffc9 	bl	8004130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	1c99      	adds	r1, r3, #2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6251      	str	r1, [r2, #36]	@ 0x24
 80041ba:	8819      	ldrh	r1, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004238 <I2SEx_TxISR_I2SExt+0x90>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d101      	bne.n	80041ca <I2SEx_TxISR_I2SExt+0x22>
 80041c6:	4b1d      	ldr	r3, [pc, #116]	@ (800423c <I2SEx_TxISR_I2SExt+0x94>)
 80041c8:	e001      	b.n	80041ce <I2SEx_TxISR_I2SExt+0x26>
 80041ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041ce:	460a      	mov	r2, r1
 80041d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d121      	bne.n	800422e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a12      	ldr	r2, [pc, #72]	@ (8004238 <I2SEx_TxISR_I2SExt+0x90>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d101      	bne.n	80041f8 <I2SEx_TxISR_I2SExt+0x50>
 80041f4:	4b11      	ldr	r3, [pc, #68]	@ (800423c <I2SEx_TxISR_I2SExt+0x94>)
 80041f6:	e001      	b.n	80041fc <I2SEx_TxISR_I2SExt+0x54>
 80041f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	490d      	ldr	r1, [pc, #52]	@ (8004238 <I2SEx_TxISR_I2SExt+0x90>)
 8004204:	428b      	cmp	r3, r1
 8004206:	d101      	bne.n	800420c <I2SEx_TxISR_I2SExt+0x64>
 8004208:	4b0c      	ldr	r3, [pc, #48]	@ (800423c <I2SEx_TxISR_I2SExt+0x94>)
 800420a:	e001      	b.n	8004210 <I2SEx_TxISR_I2SExt+0x68>
 800420c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004210:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004214:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d106      	bne.n	800422e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ff81 	bl	8004130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40003800 	.word	0x40003800
 800423c:	40003400 	.word	0x40003400

08004240 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68d8      	ldr	r0, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004252:	1c99      	adds	r1, r3, #2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004258:	b282      	uxth	r2, r0
 800425a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d113      	bne.n	800429c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004282:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ff4a 	bl	8004130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a20      	ldr	r2, [pc, #128]	@ (8004334 <I2SEx_RxISR_I2SExt+0x90>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <I2SEx_RxISR_I2SExt+0x16>
 80042b6:	4b20      	ldr	r3, [pc, #128]	@ (8004338 <I2SEx_RxISR_I2SExt+0x94>)
 80042b8:	e001      	b.n	80042be <I2SEx_RxISR_I2SExt+0x1a>
 80042ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042be:	68d8      	ldr	r0, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	1c99      	adds	r1, r3, #2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042ca:	b282      	uxth	r2, r0
 80042cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d121      	bne.n	800432a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a12      	ldr	r2, [pc, #72]	@ (8004334 <I2SEx_RxISR_I2SExt+0x90>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d101      	bne.n	80042f4 <I2SEx_RxISR_I2SExt+0x50>
 80042f0:	4b11      	ldr	r3, [pc, #68]	@ (8004338 <I2SEx_RxISR_I2SExt+0x94>)
 80042f2:	e001      	b.n	80042f8 <I2SEx_RxISR_I2SExt+0x54>
 80042f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	490d      	ldr	r1, [pc, #52]	@ (8004334 <I2SEx_RxISR_I2SExt+0x90>)
 8004300:	428b      	cmp	r3, r1
 8004302:	d101      	bne.n	8004308 <I2SEx_RxISR_I2SExt+0x64>
 8004304:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <I2SEx_RxISR_I2SExt+0x94>)
 8004306:	e001      	b.n	800430c <I2SEx_RxISR_I2SExt+0x68>
 8004308:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800430c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004310:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d106      	bne.n	800432a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff03 	bl	8004130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40003800 	.word	0x40003800
 8004338:	40003400 	.word	0x40003400

0800433c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e267      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d075      	beq.n	8004446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800435a:	4b88      	ldr	r3, [pc, #544]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b04      	cmp	r3, #4
 8004364:	d00c      	beq.n	8004380 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004366:	4b85      	ldr	r3, [pc, #532]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800436e:	2b08      	cmp	r3, #8
 8004370:	d112      	bne.n	8004398 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004372:	4b82      	ldr	r3, [pc, #520]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800437e:	d10b      	bne.n	8004398 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004380:	4b7e      	ldr	r3, [pc, #504]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d05b      	beq.n	8004444 <HAL_RCC_OscConfig+0x108>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d157      	bne.n	8004444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e242      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a0:	d106      	bne.n	80043b0 <HAL_RCC_OscConfig+0x74>
 80043a2:	4b76      	ldr	r3, [pc, #472]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a75      	ldr	r2, [pc, #468]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e01d      	b.n	80043ec <HAL_RCC_OscConfig+0xb0>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x98>
 80043ba:	4b70      	ldr	r3, [pc, #448]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6f      	ldr	r2, [pc, #444]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	4b6d      	ldr	r3, [pc, #436]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6c      	ldr	r2, [pc, #432]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e00b      	b.n	80043ec <HAL_RCC_OscConfig+0xb0>
 80043d4:	4b69      	ldr	r3, [pc, #420]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a68      	ldr	r2, [pc, #416]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	4b66      	ldr	r3, [pc, #408]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a65      	ldr	r2, [pc, #404]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80043e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d013      	beq.n	800441c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fc fd78 	bl	8000ee8 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fc fd74 	bl	8000ee8 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	@ 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e207      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	4b5b      	ldr	r3, [pc, #364]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0xc0>
 800441a:	e014      	b.n	8004446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fc fd64 	bl	8000ee8 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004424:	f7fc fd60 	bl	8000ee8 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	@ 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e1f3      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004436:	4b51      	ldr	r3, [pc, #324]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0xe8>
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d063      	beq.n	800451a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004452:	4b4a      	ldr	r3, [pc, #296]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445e:	4b47      	ldr	r3, [pc, #284]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004466:	2b08      	cmp	r3, #8
 8004468:	d11c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446a:	4b44      	ldr	r3, [pc, #272]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d116      	bne.n	80044a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004476:	4b41      	ldr	r3, [pc, #260]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_RCC_OscConfig+0x152>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e1c7      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448e:	4b3b      	ldr	r3, [pc, #236]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4937      	ldr	r1, [pc, #220]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a2:	e03a      	b.n	800451a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d020      	beq.n	80044ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ac:	4b34      	ldr	r3, [pc, #208]	@ (8004580 <HAL_RCC_OscConfig+0x244>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b2:	f7fc fd19 	bl	8000ee8 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ba:	f7fc fd15 	bl	8000ee8 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e1a8      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044cc:	4b2b      	ldr	r3, [pc, #172]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d8:	4b28      	ldr	r3, [pc, #160]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4925      	ldr	r1, [pc, #148]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]
 80044ec:	e015      	b.n	800451a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ee:	4b24      	ldr	r3, [pc, #144]	@ (8004580 <HAL_RCC_OscConfig+0x244>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fc fcf8 	bl	8000ee8 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044fc:	f7fc fcf4 	bl	8000ee8 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e187      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450e:	4b1b      	ldr	r3, [pc, #108]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d036      	beq.n	8004594 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d016      	beq.n	800455c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800452e:	4b15      	ldr	r3, [pc, #84]	@ (8004584 <HAL_RCC_OscConfig+0x248>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fc fcd8 	bl	8000ee8 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800453c:	f7fc fcd4 	bl	8000ee8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e167      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454e:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <HAL_RCC_OscConfig+0x240>)
 8004550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x200>
 800455a:	e01b      	b.n	8004594 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800455c:	4b09      	ldr	r3, [pc, #36]	@ (8004584 <HAL_RCC_OscConfig+0x248>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004562:	f7fc fcc1 	bl	8000ee8 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004568:	e00e      	b.n	8004588 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800456a:	f7fc fcbd 	bl	8000ee8 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d907      	bls.n	8004588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e150      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
 800457c:	40023800 	.word	0x40023800
 8004580:	42470000 	.word	0x42470000
 8004584:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004588:	4b88      	ldr	r3, [pc, #544]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800458a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1ea      	bne.n	800456a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8097 	beq.w	80046d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a6:	4b81      	ldr	r3, [pc, #516]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10f      	bne.n	80045d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	4b7d      	ldr	r3, [pc, #500]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	4a7c      	ldr	r2, [pc, #496]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045c2:	4b7a      	ldr	r3, [pc, #488]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d2:	4b77      	ldr	r3, [pc, #476]	@ (80047b0 <HAL_RCC_OscConfig+0x474>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d118      	bne.n	8004610 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045de:	4b74      	ldr	r3, [pc, #464]	@ (80047b0 <HAL_RCC_OscConfig+0x474>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a73      	ldr	r2, [pc, #460]	@ (80047b0 <HAL_RCC_OscConfig+0x474>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ea:	f7fc fc7d 	bl	8000ee8 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f2:	f7fc fc79 	bl	8000ee8 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e10c      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004604:	4b6a      	ldr	r3, [pc, #424]	@ (80047b0 <HAL_RCC_OscConfig+0x474>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d106      	bne.n	8004626 <HAL_RCC_OscConfig+0x2ea>
 8004618:	4b64      	ldr	r3, [pc, #400]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461c:	4a63      	ldr	r2, [pc, #396]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	6713      	str	r3, [r2, #112]	@ 0x70
 8004624:	e01c      	b.n	8004660 <HAL_RCC_OscConfig+0x324>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b05      	cmp	r3, #5
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0x30c>
 800462e:	4b5f      	ldr	r3, [pc, #380]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004632:	4a5e      	ldr	r2, [pc, #376]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004634:	f043 0304 	orr.w	r3, r3, #4
 8004638:	6713      	str	r3, [r2, #112]	@ 0x70
 800463a:	4b5c      	ldr	r3, [pc, #368]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463e:	4a5b      	ldr	r2, [pc, #364]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6713      	str	r3, [r2, #112]	@ 0x70
 8004646:	e00b      	b.n	8004660 <HAL_RCC_OscConfig+0x324>
 8004648:	4b58      	ldr	r3, [pc, #352]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464c:	4a57      	ldr	r2, [pc, #348]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	6713      	str	r3, [r2, #112]	@ 0x70
 8004654:	4b55      	ldr	r3, [pc, #340]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004658:	4a54      	ldr	r2, [pc, #336]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 800465a:	f023 0304 	bic.w	r3, r3, #4
 800465e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d015      	beq.n	8004694 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7fc fc3e 	bl	8000ee8 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466e:	e00a      	b.n	8004686 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fc fc3a 	bl	8000ee8 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e0cb      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004686:	4b49      	ldr	r3, [pc, #292]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0ee      	beq.n	8004670 <HAL_RCC_OscConfig+0x334>
 8004692:	e014      	b.n	80046be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004694:	f7fc fc28 	bl	8000ee8 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469c:	f7fc fc24 	bl	8000ee8 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e0b5      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b2:	4b3e      	ldr	r3, [pc, #248]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ee      	bne.n	800469c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046be:	7dfb      	ldrb	r3, [r7, #23]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d105      	bne.n	80046d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c4:	4b39      	ldr	r3, [pc, #228]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80046c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c8:	4a38      	ldr	r2, [pc, #224]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80046ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80a1 	beq.w	800481c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046da:	4b34      	ldr	r3, [pc, #208]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d05c      	beq.n	80047a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d141      	bne.n	8004772 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ee:	4b31      	ldr	r3, [pc, #196]	@ (80047b4 <HAL_RCC_OscConfig+0x478>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fc fbf8 	bl	8000ee8 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fc fbf4 	bl	8000ee8 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e087      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	4b27      	ldr	r3, [pc, #156]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69da      	ldr	r2, [r3, #28]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	019b      	lsls	r3, r3, #6
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	3b01      	subs	r3, #1
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473c:	061b      	lsls	r3, r3, #24
 800473e:	491b      	ldr	r1, [pc, #108]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004744:	4b1b      	ldr	r3, [pc, #108]	@ (80047b4 <HAL_RCC_OscConfig+0x478>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474a:	f7fc fbcd 	bl	8000ee8 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004752:	f7fc fbc9 	bl	8000ee8 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e05c      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004764:	4b11      	ldr	r3, [pc, #68]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x416>
 8004770:	e054      	b.n	800481c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <HAL_RCC_OscConfig+0x478>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fc fbb6 	bl	8000ee8 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004780:	f7fc fbb2 	bl	8000ee8 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e045      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004792:	4b06      	ldr	r3, [pc, #24]	@ (80047ac <HAL_RCC_OscConfig+0x470>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x444>
 800479e:	e03d      	b.n	800481c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e038      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40007000 	.word	0x40007000
 80047b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004828 <HAL_RCC_OscConfig+0x4ec>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d028      	beq.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d121      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d11a      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047e8:	4013      	ands	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d111      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	3b01      	subs	r3, #1
 8004802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d107      	bne.n	8004818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800

0800482c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0cc      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004840:	4b68      	ldr	r3, [pc, #416]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d90c      	bls.n	8004868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b65      	ldr	r3, [pc, #404]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b63      	ldr	r3, [pc, #396]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0b8      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d020      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004880:	4b59      	ldr	r3, [pc, #356]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a58      	ldr	r2, [pc, #352]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800488a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004898:	4b53      	ldr	r3, [pc, #332]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a52      	ldr	r2, [pc, #328]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a4:	4b50      	ldr	r3, [pc, #320]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	494d      	ldr	r1, [pc, #308]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d044      	beq.n	800494c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	4b47      	ldr	r3, [pc, #284]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d119      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d003      	beq.n	80048ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	4b3f      	ldr	r3, [pc, #252]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e06f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fa:	4b3b      	ldr	r3, [pc, #236]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e067      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800490a:	4b37      	ldr	r3, [pc, #220]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f023 0203 	bic.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4934      	ldr	r1, [pc, #208]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800491c:	f7fc fae4 	bl	8000ee8 <HAL_GetTick>
 8004920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	e00a      	b.n	800493a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004924:	f7fc fae0 	bl	8000ee8 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e04f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	4b2b      	ldr	r3, [pc, #172]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 020c 	and.w	r2, r3, #12
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	429a      	cmp	r2, r3
 800494a:	d1eb      	bne.n	8004924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800494c:	4b25      	ldr	r3, [pc, #148]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d20c      	bcs.n	8004974 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b22      	ldr	r3, [pc, #136]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b20      	ldr	r3, [pc, #128]	@ (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e032      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004980:	4b19      	ldr	r3, [pc, #100]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4916      	ldr	r1, [pc, #88]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499e:	4b12      	ldr	r3, [pc, #72]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	490e      	ldr	r1, [pc, #56]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049b2:	f000 f821 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 80049b6:	4602      	mov	r2, r0
 80049b8:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	490a      	ldr	r1, [pc, #40]	@ (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 80049c4:	5ccb      	ldrb	r3, [r1, r3]
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	4a09      	ldr	r2, [pc, #36]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049ce:	4b09      	ldr	r3, [pc, #36]	@ (80049f4 <HAL_RCC_ClockConfig+0x1c8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fc fa44 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40023c00 	.word	0x40023c00
 80049e8:	40023800 	.word	0x40023800
 80049ec:	08009810 	.word	0x08009810
 80049f0:	20000000 	.word	0x20000000
 80049f4:	20000004 	.word	0x20000004

080049f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049fc:	b094      	sub	sp, #80	@ 0x50
 80049fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a10:	4b79      	ldr	r3, [pc, #484]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 030c 	and.w	r3, r3, #12
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d00d      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0x40>
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	f200 80e1 	bhi.w	8004be4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0x34>
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d003      	beq.n	8004a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a2a:	e0db      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a2c:	4b73      	ldr	r3, [pc, #460]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8004a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a30:	e0db      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a32:	4b73      	ldr	r3, [pc, #460]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a36:	e0d8      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a38:	4b6f      	ldr	r3, [pc, #444]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a42:	4b6d      	ldr	r3, [pc, #436]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d063      	beq.n	8004b16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	2200      	movs	r2, #0
 8004a56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a62:	2300      	movs	r3, #0
 8004a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	f04f 0000 	mov.w	r0, #0
 8004a72:	f04f 0100 	mov.w	r1, #0
 8004a76:	0159      	lsls	r1, r3, #5
 8004a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a7c:	0150      	lsls	r0, r2, #5
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4621      	mov	r1, r4
 8004a84:	1a51      	subs	r1, r2, r1
 8004a86:	6139      	str	r1, [r7, #16]
 8004a88:	4629      	mov	r1, r5
 8004a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	018b      	lsls	r3, r1, #6
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	018a      	lsls	r2, r1, #6
 8004aaa:	4651      	mov	r1, sl
 8004aac:	ebb2 0801 	subs.w	r8, r2, r1
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aca:	4690      	mov	r8, r2
 8004acc:	4699      	mov	r9, r3
 8004ace:	4623      	mov	r3, r4
 8004ad0:	eb18 0303 	adds.w	r3, r8, r3
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	462b      	mov	r3, r5
 8004ad8:	eb49 0303 	adc.w	r3, r9, r3
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004aea:	4629      	mov	r1, r5
 8004aec:	024b      	lsls	r3, r1, #9
 8004aee:	4621      	mov	r1, r4
 8004af0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004af4:	4621      	mov	r1, r4
 8004af6:	024a      	lsls	r2, r1, #9
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004afe:	2200      	movs	r2, #0
 8004b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b08:	f7fb fb5e 	bl	80001c8 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4613      	mov	r3, r2
 8004b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b14:	e058      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b16:	4b38      	ldr	r3, [pc, #224]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	099b      	lsrs	r3, r3, #6
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	4611      	mov	r1, r2
 8004b22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b26:	623b      	str	r3, [r7, #32]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b30:	4642      	mov	r2, r8
 8004b32:	464b      	mov	r3, r9
 8004b34:	f04f 0000 	mov.w	r0, #0
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	0159      	lsls	r1, r3, #5
 8004b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b42:	0150      	lsls	r0, r2, #5
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4641      	mov	r1, r8
 8004b4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b4e:	4649      	mov	r1, r9
 8004b50:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b68:	ebb2 040a 	subs.w	r4, r2, sl
 8004b6c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	00eb      	lsls	r3, r5, #3
 8004b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b7e:	00e2      	lsls	r2, r4, #3
 8004b80:	4614      	mov	r4, r2
 8004b82:	461d      	mov	r5, r3
 8004b84:	4643      	mov	r3, r8
 8004b86:	18e3      	adds	r3, r4, r3
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	eb45 0303 	adc.w	r3, r5, r3
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	028b      	lsls	r3, r1, #10
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ba8:	4621      	mov	r1, r4
 8004baa:	028a      	lsls	r2, r1, #10
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	61fa      	str	r2, [r7, #28]
 8004bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bbc:	f7fb fb04 	bl	80001c8 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004be2:	e002      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004be4:	4b05      	ldr	r3, [pc, #20]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8004be6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3750      	adds	r7, #80	@ 0x50
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	007a1200 	.word	0x007a1200

08004c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c08:	4b03      	ldr	r3, [pc, #12]	@ (8004c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000000 	.word	0x20000000

08004c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c20:	f7ff fff0 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0a9b      	lsrs	r3, r3, #10
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4903      	ldr	r1, [pc, #12]	@ (8004c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	08009820 	.word	0x08009820

08004c44 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d035      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c6c:	4b62      	ldr	r3, [pc, #392]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c72:	f7fc f939 	bl	8000ee8 <HAL_GetTick>
 8004c76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c7a:	f7fc f935 	bl	8000ee8 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e0b0      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f0      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	019a      	lsls	r2, r3, #6
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	071b      	lsls	r3, r3, #28
 8004ca4:	4955      	ldr	r1, [pc, #340]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cac:	4b52      	ldr	r3, [pc, #328]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cb2:	f7fc f919 	bl	8000ee8 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cba:	f7fc f915 	bl	8000ee8 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e090      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ccc:	4b4b      	ldr	r3, [pc, #300]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 8083 	beq.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	4b44      	ldr	r3, [pc, #272]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	4a43      	ldr	r2, [pc, #268]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cf6:	4b41      	ldr	r3, [pc, #260]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d02:	4b3f      	ldr	r3, [pc, #252]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a3e      	ldr	r2, [pc, #248]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d0e:	f7fc f8eb 	bl	8000ee8 <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d16:	f7fc f8e7 	bl	8000ee8 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e062      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d28:	4b35      	ldr	r3, [pc, #212]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d34:	4b31      	ldr	r3, [pc, #196]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d02f      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d028      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d52:	4b2a      	ldr	r3, [pc, #168]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d5c:	4b29      	ldr	r3, [pc, #164]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d62:	4b28      	ldr	r3, [pc, #160]	@ (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d68:	4a24      	ldr	r2, [pc, #144]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d6e:	4b23      	ldr	r3, [pc, #140]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d114      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d7a:	f7fc f8b5 	bl	8000ee8 <HAL_GetTick>
 8004d7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d80:	e00a      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d82:	f7fc f8b1 	bl	8000ee8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e02a      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d98:	4b18      	ldr	r3, [pc, #96]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0ee      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004db0:	d10d      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004db2:	4b12      	ldr	r3, [pc, #72]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc6:	490d      	ldr	r1, [pc, #52]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	608b      	str	r3, [r1, #8]
 8004dcc:	e005      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004dce:	4b0b      	ldr	r3, [pc, #44]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004dd8:	6093      	str	r3, [r2, #8]
 8004dda:	4b08      	ldr	r3, [pc, #32]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ddc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de6:	4905      	ldr	r1, [pc, #20]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	42470068 	.word	0x42470068
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40007000 	.word	0x40007000
 8004e04:	42470e40 	.word	0x42470e40

08004e08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d13f      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e26:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e2e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d006      	beq.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e3c:	d12f      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e40:	617b      	str	r3, [r7, #20]
          break;
 8004e42:	e02f      	b.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e44:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e50:	d108      	bne.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e52:	4b19      	ldr	r3, [pc, #100]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e5a:	4a19      	ldr	r2, [pc, #100]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	e007      	b.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e64:	4b14      	ldr	r3, [pc, #80]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e6c:	4a15      	ldr	r2, [pc, #84]	@ (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e74:	4b10      	ldr	r3, [pc, #64]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e7a:	099b      	lsrs	r3, r3, #6
 8004e7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e88:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e8e:	0f1b      	lsrs	r3, r3, #28
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9a:	617b      	str	r3, [r7, #20]
          break;
 8004e9c:	e002      	b.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
          break;
 8004ea2:	bf00      	nop
        }
      }
      break;
 8004ea4:	e000      	b.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004ea6:	bf00      	nop
    }
  }
  return frequency;
 8004ea8:	697b      	ldr	r3, [r7, #20]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	00bb8000 	.word	0x00bb8000
 8004ec0:	007a1200 	.word	0x007a1200
 8004ec4:	00f42400 	.word	0x00f42400

08004ec8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e041      	b.n	8004f5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fb fe80 	bl	8000bf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f000 fb1e 	bl	8005548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d109      	bne.n	8004f90 <HAL_TIM_PWM_Start_IT+0x28>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	bf14      	ite	ne
 8004f88:	2301      	movne	r3, #1
 8004f8a:	2300      	moveq	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	e022      	b.n	8004fd6 <HAL_TIM_PWM_Start_IT+0x6e>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d109      	bne.n	8004faa <HAL_TIM_PWM_Start_IT+0x42>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	bf14      	ite	ne
 8004fa2:	2301      	movne	r3, #1
 8004fa4:	2300      	moveq	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	e015      	b.n	8004fd6 <HAL_TIM_PWM_Start_IT+0x6e>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d109      	bne.n	8004fc4 <HAL_TIM_PWM_Start_IT+0x5c>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	bf14      	ite	ne
 8004fbc:	2301      	movne	r3, #1
 8004fbe:	2300      	moveq	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	e008      	b.n	8004fd6 <HAL_TIM_PWM_Start_IT+0x6e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	bf14      	ite	ne
 8004fd0:	2301      	movne	r3, #1
 8004fd2:	2300      	moveq	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e0c7      	b.n	800516e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d104      	bne.n	8004fee <HAL_TIM_PWM_Start_IT+0x86>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fec:	e013      	b.n	8005016 <HAL_TIM_PWM_Start_IT+0xae>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d104      	bne.n	8004ffe <HAL_TIM_PWM_Start_IT+0x96>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ffc:	e00b      	b.n	8005016 <HAL_TIM_PWM_Start_IT+0xae>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d104      	bne.n	800500e <HAL_TIM_PWM_Start_IT+0xa6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800500c:	e003      	b.n	8005016 <HAL_TIM_PWM_Start_IT+0xae>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2202      	movs	r2, #2
 8005012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b0c      	cmp	r3, #12
 800501a:	d841      	bhi.n	80050a0 <HAL_TIM_PWM_Start_IT+0x138>
 800501c:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <HAL_TIM_PWM_Start_IT+0xbc>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005059 	.word	0x08005059
 8005028:	080050a1 	.word	0x080050a1
 800502c:	080050a1 	.word	0x080050a1
 8005030:	080050a1 	.word	0x080050a1
 8005034:	0800506b 	.word	0x0800506b
 8005038:	080050a1 	.word	0x080050a1
 800503c:	080050a1 	.word	0x080050a1
 8005040:	080050a1 	.word	0x080050a1
 8005044:	0800507d 	.word	0x0800507d
 8005048:	080050a1 	.word	0x080050a1
 800504c:	080050a1 	.word	0x080050a1
 8005050:	080050a1 	.word	0x080050a1
 8005054:	0800508f 	.word	0x0800508f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0202 	orr.w	r2, r2, #2
 8005066:	60da      	str	r2, [r3, #12]
      break;
 8005068:	e01d      	b.n	80050a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0204 	orr.w	r2, r2, #4
 8005078:	60da      	str	r2, [r3, #12]
      break;
 800507a:	e014      	b.n	80050a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0208 	orr.w	r2, r2, #8
 800508a:	60da      	str	r2, [r3, #12]
      break;
 800508c:	e00b      	b.n	80050a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0210 	orr.w	r2, r2, #16
 800509c:	60da      	str	r2, [r3, #12]
      break;
 800509e:	e002      	b.n	80050a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
      break;
 80050a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d15f      	bne.n	800516c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2201      	movs	r2, #1
 80050b2:	6839      	ldr	r1, [r7, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fca3 	bl	8005a00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a2e      	ldr	r2, [pc, #184]	@ (8005178 <HAL_TIM_PWM_Start_IT+0x210>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_TIM_PWM_Start_IT+0x166>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a2c      	ldr	r2, [pc, #176]	@ (800517c <HAL_TIM_PWM_Start_IT+0x214>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d101      	bne.n	80050d2 <HAL_TIM_PWM_Start_IT+0x16a>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <HAL_TIM_PWM_Start_IT+0x16c>
 80050d2:	2300      	movs	r3, #0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d007      	beq.n	80050e8 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a22      	ldr	r2, [pc, #136]	@ (8005178 <HAL_TIM_PWM_Start_IT+0x210>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d022      	beq.n	8005138 <HAL_TIM_PWM_Start_IT+0x1d0>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fa:	d01d      	beq.n	8005138 <HAL_TIM_PWM_Start_IT+0x1d0>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1f      	ldr	r2, [pc, #124]	@ (8005180 <HAL_TIM_PWM_Start_IT+0x218>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d018      	beq.n	8005138 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1e      	ldr	r2, [pc, #120]	@ (8005184 <HAL_TIM_PWM_Start_IT+0x21c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1c      	ldr	r2, [pc, #112]	@ (8005188 <HAL_TIM_PWM_Start_IT+0x220>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00e      	beq.n	8005138 <HAL_TIM_PWM_Start_IT+0x1d0>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a17      	ldr	r2, [pc, #92]	@ (800517c <HAL_TIM_PWM_Start_IT+0x214>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d009      	beq.n	8005138 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a18      	ldr	r2, [pc, #96]	@ (800518c <HAL_TIM_PWM_Start_IT+0x224>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_TIM_PWM_Start_IT+0x1d0>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a17      	ldr	r2, [pc, #92]	@ (8005190 <HAL_TIM_PWM_Start_IT+0x228>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d111      	bne.n	800515c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b06      	cmp	r3, #6
 8005148:	d010      	beq.n	800516c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515a:	e007      	b.n	800516c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40010000 	.word	0x40010000
 800517c:	40010400 	.word	0x40010400
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800
 8005188:	40000c00 	.word	0x40000c00
 800518c:	40014000 	.word	0x40014000
 8005190:	40001800 	.word	0x40001800

08005194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d020      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01b      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0202 	mvn.w	r2, #2
 80051c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f99e 	bl	8005520 <HAL_TIM_IC_CaptureCallback>
 80051e4:	e005      	b.n	80051f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f990 	bl	800550c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fb fbf3 	bl	80009d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d020      	beq.n	8005244 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01b      	beq.n	8005244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0204 	mvn.w	r2, #4
 8005214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2202      	movs	r2, #2
 800521a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f978 	bl	8005520 <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f96a 	bl	800550c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7fb fbcd 	bl	80009d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d020      	beq.n	8005290 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01b      	beq.n	8005290 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0208 	mvn.w	r2, #8
 8005260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2204      	movs	r2, #4
 8005266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f952 	bl	8005520 <HAL_TIM_IC_CaptureCallback>
 800527c:	e005      	b.n	800528a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f944 	bl	800550c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7fb fba7 	bl	80009d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b00      	cmp	r3, #0
 8005298:	d020      	beq.n	80052dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01b      	beq.n	80052dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0210 	mvn.w	r2, #16
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2208      	movs	r2, #8
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f92c 	bl	8005520 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f91e 	bl	800550c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7fb fb81 	bl	80009d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00c      	beq.n	8005300 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0201 	mvn.w	r2, #1
 80052f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f8fc 	bl	80054f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00c      	beq.n	8005324 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800531c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fc1a 	bl	8005b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f8f6 	bl	8005534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0220 	mvn.w	r2, #32
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fbec 	bl	8005b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800538e:	2302      	movs	r3, #2
 8005390:	e0ae      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b0c      	cmp	r3, #12
 800539e:	f200 809f 	bhi.w	80054e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053a2:	a201      	add	r2, pc, #4	@ (adr r2, 80053a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053dd 	.word	0x080053dd
 80053ac:	080054e1 	.word	0x080054e1
 80053b0:	080054e1 	.word	0x080054e1
 80053b4:	080054e1 	.word	0x080054e1
 80053b8:	0800541d 	.word	0x0800541d
 80053bc:	080054e1 	.word	0x080054e1
 80053c0:	080054e1 	.word	0x080054e1
 80053c4:	080054e1 	.word	0x080054e1
 80053c8:	0800545f 	.word	0x0800545f
 80053cc:	080054e1 	.word	0x080054e1
 80053d0:	080054e1 	.word	0x080054e1
 80053d4:	080054e1 	.word	0x080054e1
 80053d8:	0800549f 	.word	0x0800549f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 f95c 	bl	80056a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0208 	orr.w	r2, r2, #8
 80053f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0204 	bic.w	r2, r2, #4
 8005406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6999      	ldr	r1, [r3, #24]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	619a      	str	r2, [r3, #24]
      break;
 800541a:	e064      	b.n	80054e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f9ac 	bl	8005780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6999      	ldr	r1, [r3, #24]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	021a      	lsls	r2, r3, #8
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	619a      	str	r2, [r3, #24]
      break;
 800545c:	e043      	b.n	80054e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fa01 	bl	800586c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0208 	orr.w	r2, r2, #8
 8005478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0204 	bic.w	r2, r2, #4
 8005488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69d9      	ldr	r1, [r3, #28]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	61da      	str	r2, [r3, #28]
      break;
 800549c:	e023      	b.n	80054e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fa55 	bl	8005954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69da      	ldr	r2, [r3, #28]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69d9      	ldr	r1, [r3, #28]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	021a      	lsls	r2, r3, #8
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	61da      	str	r2, [r3, #28]
      break;
 80054de:	e002      	b.n	80054e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	75fb      	strb	r3, [r7, #23]
      break;
 80054e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a46      	ldr	r2, [pc, #280]	@ (8005674 <TIM_Base_SetConfig+0x12c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d013      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005566:	d00f      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a43      	ldr	r2, [pc, #268]	@ (8005678 <TIM_Base_SetConfig+0x130>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00b      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a42      	ldr	r2, [pc, #264]	@ (800567c <TIM_Base_SetConfig+0x134>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a41      	ldr	r2, [pc, #260]	@ (8005680 <TIM_Base_SetConfig+0x138>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_Base_SetConfig+0x40>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a40      	ldr	r2, [pc, #256]	@ (8005684 <TIM_Base_SetConfig+0x13c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d108      	bne.n	800559a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800558e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a35      	ldr	r2, [pc, #212]	@ (8005674 <TIM_Base_SetConfig+0x12c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d02b      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a8:	d027      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a32      	ldr	r2, [pc, #200]	@ (8005678 <TIM_Base_SetConfig+0x130>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d023      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a31      	ldr	r2, [pc, #196]	@ (800567c <TIM_Base_SetConfig+0x134>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01f      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a30      	ldr	r2, [pc, #192]	@ (8005680 <TIM_Base_SetConfig+0x138>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d01b      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005684 <TIM_Base_SetConfig+0x13c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d017      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005688 <TIM_Base_SetConfig+0x140>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a2d      	ldr	r2, [pc, #180]	@ (800568c <TIM_Base_SetConfig+0x144>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00f      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005690 <TIM_Base_SetConfig+0x148>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00b      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005694 <TIM_Base_SetConfig+0x14c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d007      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005698 <TIM_Base_SetConfig+0x150>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d003      	beq.n	80055fa <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a29      	ldr	r2, [pc, #164]	@ (800569c <TIM_Base_SetConfig+0x154>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d108      	bne.n	800560c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a10      	ldr	r2, [pc, #64]	@ (8005674 <TIM_Base_SetConfig+0x12c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d003      	beq.n	8005640 <TIM_Base_SetConfig+0xf8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a12      	ldr	r2, [pc, #72]	@ (8005684 <TIM_Base_SetConfig+0x13c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d103      	bne.n	8005648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b01      	cmp	r3, #1
 8005658:	d105      	bne.n	8005666 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f023 0201 	bic.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	611a      	str	r2, [r3, #16]
  }
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40010000 	.word	0x40010000
 8005678:	40000400 	.word	0x40000400
 800567c:	40000800 	.word	0x40000800
 8005680:	40000c00 	.word	0x40000c00
 8005684:	40010400 	.word	0x40010400
 8005688:	40014000 	.word	0x40014000
 800568c:	40014400 	.word	0x40014400
 8005690:	40014800 	.word	0x40014800
 8005694:	40001800 	.word	0x40001800
 8005698:	40001c00 	.word	0x40001c00
 800569c:	40002000 	.word	0x40002000

080056a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	f023 0201 	bic.w	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f023 0302 	bic.w	r3, r3, #2
 80056e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a20      	ldr	r2, [pc, #128]	@ (8005778 <TIM_OC1_SetConfig+0xd8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_OC1_SetConfig+0x64>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a1f      	ldr	r2, [pc, #124]	@ (800577c <TIM_OC1_SetConfig+0xdc>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d10c      	bne.n	800571e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f023 0308 	bic.w	r3, r3, #8
 800570a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 0304 	bic.w	r3, r3, #4
 800571c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a15      	ldr	r2, [pc, #84]	@ (8005778 <TIM_OC1_SetConfig+0xd8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_OC1_SetConfig+0x8e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a14      	ldr	r2, [pc, #80]	@ (800577c <TIM_OC1_SetConfig+0xdc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d111      	bne.n	8005752 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800573c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	40010000 	.word	0x40010000
 800577c:	40010400 	.word	0x40010400

08005780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f023 0210 	bic.w	r2, r3, #16
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f023 0320 	bic.w	r3, r3, #32
 80057ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a22      	ldr	r2, [pc, #136]	@ (8005864 <TIM_OC2_SetConfig+0xe4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_OC2_SetConfig+0x68>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a21      	ldr	r2, [pc, #132]	@ (8005868 <TIM_OC2_SetConfig+0xe8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d10d      	bne.n	8005804 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005802:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a17      	ldr	r2, [pc, #92]	@ (8005864 <TIM_OC2_SetConfig+0xe4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_OC2_SetConfig+0x94>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a16      	ldr	r2, [pc, #88]	@ (8005868 <TIM_OC2_SetConfig+0xe8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d113      	bne.n	800583c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800581a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	621a      	str	r2, [r3, #32]
}
 8005856:	bf00      	nop
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40010000 	.word	0x40010000
 8005868:	40010400 	.word	0x40010400

0800586c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0303 	bic.w	r3, r3, #3
 80058a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a21      	ldr	r2, [pc, #132]	@ (800594c <TIM_OC3_SetConfig+0xe0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_OC3_SetConfig+0x66>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a20      	ldr	r2, [pc, #128]	@ (8005950 <TIM_OC3_SetConfig+0xe4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d10d      	bne.n	80058ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a16      	ldr	r2, [pc, #88]	@ (800594c <TIM_OC3_SetConfig+0xe0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d003      	beq.n	80058fe <TIM_OC3_SetConfig+0x92>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a15      	ldr	r2, [pc, #84]	@ (8005950 <TIM_OC3_SetConfig+0xe4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d113      	bne.n	8005926 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800590c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	621a      	str	r2, [r3, #32]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40010000 	.word	0x40010000
 8005950:	40010400 	.word	0x40010400

08005954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800598a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800599e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	031b      	lsls	r3, r3, #12
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a12      	ldr	r2, [pc, #72]	@ (80059f8 <TIM_OC4_SetConfig+0xa4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC4_SetConfig+0x68>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a11      	ldr	r2, [pc, #68]	@ (80059fc <TIM_OC4_SetConfig+0xa8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d109      	bne.n	80059d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	019b      	lsls	r3, r3, #6
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40010400 	.word	0x40010400

08005a00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f003 031f 	and.w	r3, r3, #31
 8005a12:	2201      	movs	r2, #1
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a1a      	ldr	r2, [r3, #32]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	43db      	mvns	r3, r3
 8005a22:	401a      	ands	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a1a      	ldr	r2, [r3, #32]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	fa01 f303 	lsl.w	r3, r1, r3
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	621a      	str	r2, [r3, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
	...

08005a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e05a      	b.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a21      	ldr	r2, [pc, #132]	@ (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d022      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab0:	d01d      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d018      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d013      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1a      	ldr	r2, [pc, #104]	@ (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00e      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a18      	ldr	r2, [pc, #96]	@ (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d009      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a17      	ldr	r2, [pc, #92]	@ (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d004      	beq.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a15      	ldr	r2, [pc, #84]	@ (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d10c      	bne.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40010400 	.word	0x40010400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	40001800 	.word	0x40001800

08005b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	f107 001c 	add.w	r0, r7, #28
 8005b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b7e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d123      	bne.n	8005bce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005b9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d105      	bne.n	8005bc2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f9dc 	bl	8005f80 <USB_CoreReset>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	73fb      	strb	r3, [r7, #15]
 8005bcc:	e01b      	b.n	8005c06 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f9d0 	bl	8005f80 <USB_CoreReset>
 8005be0:	4603      	mov	r3, r0
 8005be2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005be4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	639a      	str	r2, [r3, #56]	@ 0x38
 8005bf8:	e005      	b.n	8005c06 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c06:	7fbb      	ldrb	r3, [r7, #30]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d10b      	bne.n	8005c24 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f043 0206 	orr.w	r2, r3, #6
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f043 0220 	orr.w	r2, r3, #32
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c30:	b004      	add	sp, #16
 8005c32:	4770      	bx	lr

08005c34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f043 0201 	orr.w	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f023 0201 	bic.w	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d115      	bne.n	8005cc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ca6:	200a      	movs	r0, #10
 8005ca8:	f7fb f92a 	bl	8000f00 <HAL_Delay>
      ms += 10U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	330a      	adds	r3, #10
 8005cb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f956 	bl	8005f64 <USB_GetMode>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d01e      	beq.n	8005cfc <USB_SetCurrentMode+0x84>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2bc7      	cmp	r3, #199	@ 0xc7
 8005cc2:	d9f0      	bls.n	8005ca6 <USB_SetCurrentMode+0x2e>
 8005cc4:	e01a      	b.n	8005cfc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d115      	bne.n	8005cf8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005cd8:	200a      	movs	r0, #10
 8005cda:	f7fb f911 	bl	8000f00 <HAL_Delay>
      ms += 10U;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	330a      	adds	r3, #10
 8005ce2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f93d 	bl	8005f64 <USB_GetMode>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d005      	beq.n	8005cfc <USB_SetCurrentMode+0x84>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2bc7      	cmp	r3, #199	@ 0xc7
 8005cf4:	d9f0      	bls.n	8005cd8 <USB_SetCurrentMode+0x60>
 8005cf6:	e001      	b.n	8005cfc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e005      	b.n	8005d08 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d00:	d101      	bne.n	8005d06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d2a:	d901      	bls.n	8005d30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e01b      	b.n	8005d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	daf2      	bge.n	8005d1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	019b      	lsls	r3, r3, #6
 8005d40:	f043 0220 	orr.w	r2, r3, #32
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d54:	d901      	bls.n	8005d5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e006      	b.n	8005d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d0f0      	beq.n	8005d48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3301      	adds	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d8c:	d901      	bls.n	8005d92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e018      	b.n	8005dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	daf2      	bge.n	8005d80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2210      	movs	r2, #16
 8005da2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005db0:	d901      	bls.n	8005db6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e006      	b.n	8005dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b10      	cmp	r3, #16
 8005dc0:	d0f0      	beq.n	8005da4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b089      	sub	sp, #36	@ 0x24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	4611      	mov	r1, r2
 8005ddc:	461a      	mov	r2, r3
 8005dde:	460b      	mov	r3, r1
 8005de0:	71fb      	strb	r3, [r7, #7]
 8005de2:	4613      	mov	r3, r2
 8005de4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005dee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d123      	bne.n	8005e3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005df6:	88bb      	ldrh	r3, [r7, #4]
 8005df8:	3303      	adds	r3, #3
 8005dfa:	089b      	lsrs	r3, r3, #2
 8005dfc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	e018      	b.n	8005e36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	031a      	lsls	r2, r3, #12
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e10:	461a      	mov	r2, r3
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	3301      	adds	r3, #1
 8005e22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	3301      	adds	r3, #1
 8005e28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	3301      	adds	r3, #1
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d3e2      	bcc.n	8005e04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3724      	adds	r7, #36	@ 0x24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b08b      	sub	sp, #44	@ 0x2c
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	4613      	mov	r3, r2
 8005e58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	089b      	lsrs	r3, r3, #2
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e6a:	88fb      	ldrh	r3, [r7, #6]
 8005e6c:	f003 0303 	and.w	r3, r3, #3
 8005e70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e72:	2300      	movs	r3, #0
 8005e74:	623b      	str	r3, [r7, #32]
 8005e76:	e014      	b.n	8005ea2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e82:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e86:	3301      	adds	r3, #1
 8005e88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e92:	3301      	adds	r3, #1
 8005e94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	3301      	adds	r3, #1
 8005e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	623b      	str	r3, [r7, #32]
 8005ea2:	6a3a      	ldr	r2, [r7, #32]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d3e6      	bcc.n	8005e78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005eaa:	8bfb      	ldrh	r3, [r7, #30]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01e      	beq.n	8005eee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f107 0310 	add.w	r3, r7, #16
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	701a      	strb	r2, [r3, #0]
      i++;
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	623b      	str	r3, [r7, #32]
      pDest++;
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	3301      	adds	r3, #1
 8005ee0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005ee2:	8bfb      	ldrh	r3, [r7, #30]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ee8:	8bfb      	ldrh	r3, [r7, #30]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1ea      	bne.n	8005ec4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	372c      	adds	r7, #44	@ 0x2c
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4013      	ands	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f14:	68fb      	ldr	r3, [r7, #12]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	4013      	ands	r3, r2
 8005f54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f56:	68bb      	ldr	r3, [r7, #8]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	f003 0301 	and.w	r3, r3, #1
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f98:	d901      	bls.n	8005f9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e01b      	b.n	8005fd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	daf2      	bge.n	8005f8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f043 0201 	orr.w	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fc2:	d901      	bls.n	8005fc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e006      	b.n	8005fd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d0f0      	beq.n	8005fb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006004:	461a      	mov	r2, r3
 8006006:	2300      	movs	r3, #0
 8006008:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006026:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d119      	bne.n	800606e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800603a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800603e:	2b01      	cmp	r3, #1
 8006040:	d10a      	bne.n	8006058 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006050:	f043 0304 	orr.w	r3, r3, #4
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	e014      	b.n	8006082 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006066:	f023 0304 	bic.w	r3, r3, #4
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	e009      	b.n	8006082 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800607c:	f023 0304 	bic.w	r3, r3, #4
 8006080:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006082:	2110      	movs	r1, #16
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff fe43 	bl	8005d10 <USB_FlushTxFifo>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff fe6d 	bl	8005d74 <USB_FlushRxFifo>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80060a4:	2300      	movs	r3, #0
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	e015      	b.n	80060d6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b6:	461a      	mov	r2, r3
 80060b8:	f04f 33ff 	mov.w	r3, #4294967295
 80060bc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ca:	461a      	mov	r2, r3
 80060cc:	2300      	movs	r3, #0
 80060ce:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3301      	adds	r3, #1
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060da:	461a      	mov	r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	4293      	cmp	r3, r2
 80060e0:	d3e3      	bcc.n	80060aa <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f04f 32ff 	mov.w	r2, #4294967295
 80060ee:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a18      	ldr	r2, [pc, #96]	@ (8006154 <USB_HostInit+0x170>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d10b      	bne.n	8006110 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060fe:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a15      	ldr	r2, [pc, #84]	@ (8006158 <USB_HostInit+0x174>)
 8006104:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a14      	ldr	r2, [pc, #80]	@ (800615c <USB_HostInit+0x178>)
 800610a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800610e:	e009      	b.n	8006124 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2280      	movs	r2, #128	@ 0x80
 8006114:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a11      	ldr	r2, [pc, #68]	@ (8006160 <USB_HostInit+0x17c>)
 800611a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a11      	ldr	r2, [pc, #68]	@ (8006164 <USB_HostInit+0x180>)
 8006120:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006124:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006128:	2b00      	cmp	r3, #0
 800612a:	d105      	bne.n	8006138 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	f043 0210 	orr.w	r2, r3, #16
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699a      	ldr	r2, [r3, #24]
 800613c:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <USB_HostInit+0x184>)
 800613e:	4313      	orrs	r3, r2
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006144:	7dfb      	ldrb	r3, [r7, #23]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006150:	b004      	add	sp, #16
 8006152:	4770      	bx	lr
 8006154:	40040000 	.word	0x40040000
 8006158:	01000200 	.word	0x01000200
 800615c:	00e00300 	.word	0x00e00300
 8006160:	00600080 	.word	0x00600080
 8006164:	004000e0 	.word	0x004000e0
 8006168:	a3200008 	.word	0xa3200008

0800616c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800618a:	f023 0303 	bic.w	r3, r3, #3
 800618e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80061a4:	4313      	orrs	r3, r2
 80061a6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d107      	bne.n	80061be <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061b4:	461a      	mov	r2, r3
 80061b6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80061ba:	6053      	str	r3, [r2, #4]
 80061bc:	e00c      	b.n	80061d8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d107      	bne.n	80061d4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061ca:	461a      	mov	r2, r3
 80061cc:	f241 7370 	movw	r3, #6000	@ 0x1770
 80061d0:	6053      	str	r3, [r2, #4]
 80061d2:	e001      	b.n	80061d8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006206:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006214:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006216:	2064      	movs	r0, #100	@ 0x64
 8006218:	f7fa fe72 	bl	8000f00 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006228:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800622a:	200a      	movs	r0, #10
 800622c:	f7fa fe68 	bl	8000f00 <HAL_Delay>

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800625e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <USB_DriveVbus+0x44>
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d106      	bne.n	800627e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006278:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800627c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006288:	d109      	bne.n	800629e <USB_DriveVbus+0x64>
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d106      	bne.n	800629e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006298:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800629c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	0c5b      	lsrs	r3, r3, #17
 80062ca:	f003 0303 	and.w	r3, r3, #3
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	b29b      	uxth	r3, r3
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	4608      	mov	r0, r1
 8006306:	4611      	mov	r1, r2
 8006308:	461a      	mov	r2, r3
 800630a:	4603      	mov	r3, r0
 800630c:	70fb      	strb	r3, [r7, #3]
 800630e:	460b      	mov	r3, r1
 8006310:	70bb      	strb	r3, [r7, #2]
 8006312:	4613      	mov	r3, r2
 8006314:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800631e:	78fb      	ldrb	r3, [r7, #3]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	4413      	add	r3, r2
 8006326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800632a:	461a      	mov	r2, r3
 800632c:	f04f 33ff 	mov.w	r3, #4294967295
 8006330:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006332:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006336:	2b03      	cmp	r3, #3
 8006338:	d87c      	bhi.n	8006434 <USB_HC_Init+0x138>
 800633a:	a201      	add	r2, pc, #4	@ (adr r2, 8006340 <USB_HC_Init+0x44>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006351 	.word	0x08006351
 8006344:	080063f7 	.word	0x080063f7
 8006348:	08006351 	.word	0x08006351
 800634c:	080063b9 	.word	0x080063b9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4413      	add	r3, r2
 8006358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800635c:	461a      	mov	r2, r3
 800635e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006362:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006364:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006368:	2b00      	cmp	r3, #0
 800636a:	da10      	bge.n	800638e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4413      	add	r3, r2
 8006374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	78fa      	ldrb	r2, [r7, #3]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	440a      	add	r2, r1
 8006382:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800638a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800638c:	e055      	b.n	800643a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a6f      	ldr	r2, [pc, #444]	@ (8006550 <USB_HC_Init+0x254>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d151      	bne.n	800643a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	4413      	add	r3, r2
 800639e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80063b4:	60d3      	str	r3, [r2, #12]
      break;
 80063b6:	e040      	b.n	800643a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c4:	461a      	mov	r2, r3
 80063c6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80063ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	da34      	bge.n	800643e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	78fa      	ldrb	r2, [r7, #3]
 80063e4:	0151      	lsls	r1, r2, #5
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	440a      	add	r2, r1
 80063ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063f2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80063f4:	e023      	b.n	800643e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006402:	461a      	mov	r2, r3
 8006404:	f240 2325 	movw	r3, #549	@ 0x225
 8006408:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800640a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800640e:	2b00      	cmp	r3, #0
 8006410:	da17      	bge.n	8006442 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006412:	78fb      	ldrb	r3, [r7, #3]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4413      	add	r3, r2
 800641a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	78fa      	ldrb	r2, [r7, #3]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	440a      	add	r2, r1
 8006428:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800642c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006430:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006432:	e006      	b.n	8006442 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	77fb      	strb	r3, [r7, #31]
      break;
 8006438:	e004      	b.n	8006444 <USB_HC_Init+0x148>
      break;
 800643a:	bf00      	nop
 800643c:	e002      	b.n	8006444 <USB_HC_Init+0x148>
      break;
 800643e:	bf00      	nop
 8006440:	e000      	b.n	8006444 <USB_HC_Init+0x148>
      break;
 8006442:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	4413      	add	r3, r2
 800644c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006450:	461a      	mov	r2, r3
 8006452:	2300      	movs	r3, #0
 8006454:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006456:	78fb      	ldrb	r3, [r7, #3]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	4413      	add	r3, r2
 800645e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	78fa      	ldrb	r2, [r7, #3]
 8006466:	0151      	lsls	r1, r2, #5
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	440a      	add	r2, r1
 800646c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006470:	f043 0302 	orr.w	r3, r3, #2
 8006474:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	78fb      	ldrb	r3, [r7, #3]
 8006480:	f003 030f 	and.w	r3, r3, #15
 8006484:	2101      	movs	r1, #1
 8006486:	fa01 f303 	lsl.w	r3, r1, r3
 800648a:	6939      	ldr	r1, [r7, #16]
 800648c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006490:	4313      	orrs	r3, r2
 8006492:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80064a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	da03      	bge.n	80064b0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80064a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e001      	b.n	80064b4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff fef9 	bl	80062ac <USB_GetHostSpeed>
 80064ba:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80064bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d106      	bne.n	80064d2 <USB_HC_Init+0x1d6>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d003      	beq.n	80064d2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80064ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	e001      	b.n	80064d6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064d6:	787b      	ldrb	r3, [r7, #1]
 80064d8:	059b      	lsls	r3, r3, #22
 80064da:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064de:	78bb      	ldrb	r3, [r7, #2]
 80064e0:	02db      	lsls	r3, r3, #11
 80064e2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064e6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80064ec:	049b      	lsls	r3, r3, #18
 80064ee:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064f2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80064f4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80064f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064fa:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	431a      	orrs	r2, r3
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006504:	78fa      	ldrb	r2, [r7, #3]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	440a      	add	r2, r1
 800650c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006510:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006514:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006516:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800651a:	2b03      	cmp	r3, #3
 800651c:	d003      	beq.n	8006526 <USB_HC_Init+0x22a>
 800651e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006522:	2b01      	cmp	r3, #1
 8006524:	d10f      	bne.n	8006546 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	78fa      	ldrb	r2, [r7, #3]
 8006536:	0151      	lsls	r1, r2, #5
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	440a      	add	r2, r1
 800653c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006540:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006544:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006546:	7ffb      	ldrb	r3, [r7, #31]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3720      	adds	r7, #32
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40040000 	.word	0x40040000

08006554 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08c      	sub	sp, #48	@ 0x30
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	785b      	ldrb	r3, [r3, #1]
 800656a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800656c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006570:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4a5d      	ldr	r2, [pc, #372]	@ (80066ec <USB_HC_StartXfer+0x198>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d12f      	bne.n	80065da <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d11c      	bne.n	80065ba <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	7c9b      	ldrb	r3, [r3, #18]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <USB_HC_StartXfer+0x3c>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	7c9b      	ldrb	r3, [r3, #18]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d124      	bne.n	80065da <USB_HC_StartXfer+0x86>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	799b      	ldrb	r3, [r3, #6]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d120      	bne.n	80065da <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	0151      	lsls	r1, r2, #5
 80065aa:	6a3a      	ldr	r2, [r7, #32]
 80065ac:	440a      	add	r2, r1
 80065ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b6:	60d3      	str	r3, [r2, #12]
 80065b8:	e00f      	b.n	80065da <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	791b      	ldrb	r3, [r3, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10b      	bne.n	80065da <USB_HC_StartXfer+0x86>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	795b      	ldrb	r3, [r3, #5]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d107      	bne.n	80065da <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	4619      	mov	r1, r3
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 fb6b 	bl	8006cac <USB_DoPing>
        return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e232      	b.n	8006a40 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	799b      	ldrb	r3, [r3, #6]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d158      	bne.n	8006694 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80065e2:	2301      	movs	r3, #1
 80065e4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	78db      	ldrb	r3, [r3, #3]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d007      	beq.n	80065fe <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	8a92      	ldrh	r2, [r2, #20]
 80065f4:	fb03 f202 	mul.w	r2, r3, r2
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	61da      	str	r2, [r3, #28]
 80065fc:	e07c      	b.n	80066f8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	7c9b      	ldrb	r3, [r3, #18]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d130      	bne.n	8006668 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	2bbc      	cmp	r3, #188	@ 0xbc
 800660c:	d918      	bls.n	8006640 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	8a9b      	ldrh	r3, [r3, #20]
 8006612:	461a      	mov	r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	69da      	ldr	r2, [r3, #28]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d003      	beq.n	8006630 <USB_HC_StartXfer+0xdc>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d103      	bne.n	8006638 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2202      	movs	r2, #2
 8006634:	60da      	str	r2, [r3, #12]
 8006636:	e05f      	b.n	80066f8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2201      	movs	r2, #1
 800663c:	60da      	str	r2, [r3, #12]
 800663e:	e05b      	b.n	80066f8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	6a1a      	ldr	r2, [r3, #32]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d007      	beq.n	8006660 <USB_HC_StartXfer+0x10c>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	2b02      	cmp	r3, #2
 8006656:	d003      	beq.n	8006660 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2204      	movs	r2, #4
 800665c:	60da      	str	r2, [r3, #12]
 800665e:	e04b      	b.n	80066f8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2203      	movs	r2, #3
 8006664:	60da      	str	r2, [r3, #12]
 8006666:	e047      	b.n	80066f8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d10d      	bne.n	800668a <USB_HC_StartXfer+0x136>
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	8a92      	ldrh	r2, [r2, #20]
 8006676:	4293      	cmp	r3, r2
 8006678:	d907      	bls.n	800668a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800667a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	8a92      	ldrh	r2, [r2, #20]
 8006680:	fb03 f202 	mul.w	r2, r3, r2
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	61da      	str	r2, [r3, #28]
 8006688:	e036      	b.n	80066f8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6a1a      	ldr	r2, [r3, #32]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	61da      	str	r2, [r3, #28]
 8006692:	e031      	b.n	80066f8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d018      	beq.n	80066ce <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	8a92      	ldrh	r2, [r2, #20]
 80066a4:	4413      	add	r3, r2
 80066a6:	3b01      	subs	r3, #1
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	8a92      	ldrh	r2, [r2, #20]
 80066ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80066b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80066b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80066b4:	8b7b      	ldrh	r3, [r7, #26]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d90b      	bls.n	80066d2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80066ba:	8b7b      	ldrh	r3, [r7, #26]
 80066bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	8a92      	ldrh	r2, [r2, #20]
 80066c4:	fb03 f202 	mul.w	r2, r3, r2
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	61da      	str	r2, [r3, #28]
 80066cc:	e001      	b.n	80066d2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80066ce:	2301      	movs	r3, #1
 80066d0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	78db      	ldrb	r3, [r3, #3]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	8a92      	ldrh	r2, [r2, #20]
 80066e0:	fb03 f202 	mul.w	r2, r3, r2
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	61da      	str	r2, [r3, #28]
 80066e8:	e006      	b.n	80066f8 <USB_HC_StartXfer+0x1a4>
 80066ea:	bf00      	nop
 80066ec:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6a1a      	ldr	r2, [r3, #32]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006700:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006702:	04d9      	lsls	r1, r3, #19
 8006704:	4ba3      	ldr	r3, [pc, #652]	@ (8006994 <USB_HC_StartXfer+0x440>)
 8006706:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006708:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	7d9b      	ldrb	r3, [r3, #22]
 800670e:	075b      	lsls	r3, r3, #29
 8006710:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006714:	69f9      	ldr	r1, [r7, #28]
 8006716:	0148      	lsls	r0, r1, #5
 8006718:	6a39      	ldr	r1, [r7, #32]
 800671a:	4401      	add	r1, r0
 800671c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006720:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006722:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6999      	ldr	r1, [r3, #24]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800673a:	460a      	mov	r2, r1
 800673c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	bf0c      	ite	eq
 800674e:	2301      	moveq	r3, #1
 8006750:	2300      	movne	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	4413      	add	r3, r2
 800675e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	0151      	lsls	r1, r2, #5
 8006768:	6a3a      	ldr	r2, [r7, #32]
 800676a:	440a      	add	r2, r1
 800676c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006770:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006774:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	4413      	add	r3, r2
 800677e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	7e7b      	ldrb	r3, [r7, #25]
 8006786:	075b      	lsls	r3, r3, #29
 8006788:	69f9      	ldr	r1, [r7, #28]
 800678a:	0148      	lsls	r0, r1, #5
 800678c:	6a39      	ldr	r1, [r7, #32]
 800678e:	4401      	add	r1, r0
 8006790:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006794:	4313      	orrs	r3, r2
 8006796:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	799b      	ldrb	r3, [r3, #6]
 800679c:	2b01      	cmp	r3, #1
 800679e:	f040 80c3 	bne.w	8006928 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	7c5b      	ldrb	r3, [r3, #17]
 80067a6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80067ac:	4313      	orrs	r3, r2
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	6a3a      	ldr	r2, [r7, #32]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80067ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80067be:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	0151      	lsls	r1, r2, #5
 80067d2:	6a3a      	ldr	r2, [r7, #32]
 80067d4:	440a      	add	r2, r1
 80067d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067da:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80067de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	79db      	ldrb	r3, [r3, #7]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d123      	bne.n	8006830 <USB_HC_StartXfer+0x2dc>
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	78db      	ldrb	r3, [r3, #3]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d11f      	bne.n	8006830 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	0151      	lsls	r1, r2, #5
 8006802:	6a3a      	ldr	r2, [r7, #32]
 8006804:	440a      	add	r2, r1
 8006806:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800680a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800680e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	4413      	add	r3, r2
 8006818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	69fa      	ldr	r2, [r7, #28]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	6a3a      	ldr	r2, [r7, #32]
 8006824:	440a      	add	r2, r1
 8006826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800682a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800682e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	7c9b      	ldrb	r3, [r3, #18]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d003      	beq.n	8006840 <USB_HC_StartXfer+0x2ec>
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	7c9b      	ldrb	r3, [r3, #18]
 800683c:	2b03      	cmp	r3, #3
 800683e:	d117      	bne.n	8006870 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006844:	2b01      	cmp	r3, #1
 8006846:	d113      	bne.n	8006870 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	78db      	ldrb	r3, [r3, #3]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d10f      	bne.n	8006870 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	4413      	add	r3, r2
 8006858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	69fa      	ldr	r2, [r7, #28]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	6a3a      	ldr	r2, [r7, #32]
 8006864:	440a      	add	r2, r1
 8006866:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800686a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800686e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	7c9b      	ldrb	r3, [r3, #18]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d162      	bne.n	800693e <USB_HC_StartXfer+0x3ea>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	78db      	ldrb	r3, [r3, #3]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d15e      	bne.n	800693e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	3b01      	subs	r3, #1
 8006886:	2b03      	cmp	r3, #3
 8006888:	d858      	bhi.n	800693c <USB_HC_StartXfer+0x3e8>
 800688a:	a201      	add	r2, pc, #4	@ (adr r2, 8006890 <USB_HC_StartXfer+0x33c>)
 800688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006890:	080068a1 	.word	0x080068a1
 8006894:	080068c3 	.word	0x080068c3
 8006898:	080068e5 	.word	0x080068e5
 800689c:	08006907 	.word	0x08006907
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	0151      	lsls	r1, r2, #5
 80068b2:	6a3a      	ldr	r2, [r7, #32]
 80068b4:	440a      	add	r2, r1
 80068b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068be:	6053      	str	r3, [r2, #4]
          break;
 80068c0:	e03d      	b.n	800693e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	0151      	lsls	r1, r2, #5
 80068d4:	6a3a      	ldr	r2, [r7, #32]
 80068d6:	440a      	add	r2, r1
 80068d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068dc:	f043 030e 	orr.w	r3, r3, #14
 80068e0:	6053      	str	r3, [r2, #4]
          break;
 80068e2:	e02c      	b.n	800693e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	0151      	lsls	r1, r2, #5
 80068f6:	6a3a      	ldr	r2, [r7, #32]
 80068f8:	440a      	add	r2, r1
 80068fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006902:	6053      	str	r3, [r2, #4]
          break;
 8006904:	e01b      	b.n	800693e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	4413      	add	r3, r2
 800690e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	0151      	lsls	r1, r2, #5
 8006918:	6a3a      	ldr	r2, [r7, #32]
 800691a:	440a      	add	r2, r1
 800691c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006920:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006924:	6053      	str	r3, [r2, #4]
          break;
 8006926:	e00a      	b.n	800693e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	4413      	add	r3, r2
 8006930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006934:	461a      	mov	r2, r3
 8006936:	2300      	movs	r3, #0
 8006938:	6053      	str	r3, [r2, #4]
 800693a:	e000      	b.n	800693e <USB_HC_StartXfer+0x3ea>
          break;
 800693c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	4413      	add	r3, r2
 8006946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006954:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	78db      	ldrb	r3, [r3, #3]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d004      	beq.n	8006968 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	e003      	b.n	8006970 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800696e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006976:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006984:	461a      	mov	r2, r3
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	e055      	b.n	8006a40 <USB_HC_StartXfer+0x4ec>
 8006994:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	78db      	ldrb	r3, [r3, #3]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d14e      	bne.n	8006a3e <USB_HC_StartXfer+0x4ea>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d04a      	beq.n	8006a3e <USB_HC_StartXfer+0x4ea>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	79db      	ldrb	r3, [r3, #7]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d146      	bne.n	8006a3e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	7c9b      	ldrb	r3, [r3, #18]
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d831      	bhi.n	8006a1c <USB_HC_StartXfer+0x4c8>
 80069b8:	a201      	add	r2, pc, #4	@ (adr r2, 80069c0 <USB_HC_StartXfer+0x46c>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	080069d1 	.word	0x080069d1
 80069c4:	080069f5 	.word	0x080069f5
 80069c8:	080069d1 	.word	0x080069d1
 80069cc:	080069f5 	.word	0x080069f5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	3303      	adds	r3, #3
 80069d6:	089b      	lsrs	r3, r3, #2
 80069d8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80069da:	8afa      	ldrh	r2, [r7, #22]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d91c      	bls.n	8006a20 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	f043 0220 	orr.w	r2, r3, #32
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80069f2:	e015      	b.n	8006a20 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	3303      	adds	r3, #3
 80069fa:	089b      	lsrs	r3, r3, #2
 80069fc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80069fe:	8afa      	ldrh	r2, [r7, #22]
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d90a      	bls.n	8006a24 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a1a:	e003      	b.n	8006a24 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006a1c:	bf00      	nop
 8006a1e:	e002      	b.n	8006a26 <USB_HC_StartXfer+0x4d2>
        break;
 8006a20:	bf00      	nop
 8006a22:	e000      	b.n	8006a26 <USB_HC_StartXfer+0x4d2>
        break;
 8006a24:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6999      	ldr	r1, [r3, #24]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	785a      	ldrb	r2, [r3, #1]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2000      	movs	r0, #0
 8006a36:	9000      	str	r0, [sp, #0]
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7ff f9c9 	bl	8005dd0 <USB_WritePacket>
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3728      	adds	r7, #40	@ 0x28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	b29b      	uxth	r3, r3
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b089      	sub	sp, #36	@ 0x24
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	460b      	mov	r3, r1
 8006a74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006a7a:	78fb      	ldrb	r3, [r7, #3]
 8006a7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	0c9b      	lsrs	r3, r3, #18
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	0fdb      	lsrs	r3, r3, #31
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	0fdb      	lsrs	r3, r3, #31
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d10d      	bne.n	8006aec <USB_HC_Halt+0x82>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10a      	bne.n	8006aec <USB_HC_Halt+0x82>
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d002      	beq.n	8006ae8 <USB_HC_Halt+0x7e>
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d101      	bne.n	8006aec <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e0d8      	b.n	8006c9e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <USB_HC_Halt+0x8e>
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d173      	bne.n	8006be0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	0151      	lsls	r1, r2, #5
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	440a      	add	r2, r1
 8006b0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b16:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f003 0320 	and.w	r3, r3, #32
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d14a      	bne.n	8006bba <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d133      	bne.n	8006b98 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	0151      	lsls	r1, r2, #5
 8006b42:	69fa      	ldr	r2, [r7, #28]
 8006b44:	440a      	add	r2, r1
 8006b46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b4e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	0151      	lsls	r1, r2, #5
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	440a      	add	r2, r1
 8006b66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b6e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b7c:	d82e      	bhi.n	8006bdc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b94:	d0ec      	beq.n	8006b70 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b96:	e081      	b.n	8006c9c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	0151      	lsls	r1, r2, #5
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	440a      	add	r2, r1
 8006bae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bb6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bb8:	e070      	b.n	8006c9c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bd8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bda:	e05f      	b.n	8006c9c <USB_HC_Halt+0x232>
            break;
 8006bdc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bde:	e05d      	b.n	8006c9c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bfe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d133      	bne.n	8006c78 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	0151      	lsls	r1, r2, #5
 8006c22:	69fa      	ldr	r2, [r7, #28]
 8006c24:	440a      	add	r2, r1
 8006c26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c2e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	0151      	lsls	r1, r2, #5
 8006c42:	69fa      	ldr	r2, [r7, #28]
 8006c44:	440a      	add	r2, r1
 8006c46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c4e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c5c:	d81d      	bhi.n	8006c9a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c74:	d0ec      	beq.n	8006c50 <USB_HC_Halt+0x1e6>
 8006c76:	e011      	b.n	8006c9c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	0151      	lsls	r1, r2, #5
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	440a      	add	r2, r1
 8006c8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	e000      	b.n	8006c9c <USB_HC_Halt+0x232>
          break;
 8006c9a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3724      	adds	r7, #36	@ 0x24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
	...

08006cac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	04da      	lsls	r2, r3, #19
 8006cc8:	4b15      	ldr	r3, [pc, #84]	@ (8006d20 <USB_DoPing+0x74>)
 8006cca:	4013      	ands	r3, r2
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006cdc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006cf4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006cfc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	1ff80000 	.word	0x1ff80000

08006d24 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7fe ff8c 	bl	8005c56 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d3e:	2110      	movs	r1, #16
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7fe ffe5 	bl	8005d10 <USB_FlushTxFifo>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff f80f 	bl	8005d74 <USB_FlushRxFifo>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006d60:	2300      	movs	r3, #0
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	e01f      	b.n	8006da6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d84:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d8c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	3301      	adds	r3, #1
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b0f      	cmp	r3, #15
 8006daa:	d9dc      	bls.n	8006d66 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006dac:	2300      	movs	r3, #0
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	e034      	b.n	8006e1c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dc8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006dd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dd8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de6:	461a      	mov	r2, r3
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006df8:	d80c      	bhi.n	8006e14 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e10:	d0ec      	beq.n	8006dec <USB_StopHost+0xc8>
 8006e12:	e000      	b.n	8006e16 <USB_StopHost+0xf2>
        break;
 8006e14:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	61bb      	str	r3, [r7, #24]
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	2b0f      	cmp	r3, #15
 8006e20:	d9c7      	bls.n	8006db2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f04f 32ff 	mov.w	r2, #4294967295
 8006e36:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fe fefb 	bl	8005c34 <USB_EnableGlobalInt>

  return ret;
 8006e3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3720      	adds	r7, #32
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006e48:	b590      	push	{r4, r7, lr}
 8006e4a:	b089      	sub	sp, #36	@ 0x24
 8006e4c:	af04      	add	r7, sp, #16
 8006e4e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006e50:	2301      	movs	r3, #1
 8006e52:	2202      	movs	r2, #2
 8006e54:	2102      	movs	r1, #2
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fc85 	bl	8007766 <USBH_FindInterface>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2bff      	cmp	r3, #255	@ 0xff
 8006e64:	d002      	beq.n	8006e6c <USBH_CDC_InterfaceInit+0x24>
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d901      	bls.n	8006e70 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e13d      	b.n	80070ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fc5a 	bl	800772e <USBH_SelectInterface>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006e84:	2302      	movs	r3, #2
 8006e86:	e131      	b.n	80070ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006e8e:	2050      	movs	r0, #80	@ 0x50
 8006e90:	f002 fb64 	bl	800955c <malloc>
 8006e94:	4603      	mov	r3, r0
 8006e96:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e11f      	b.n	80070ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006eac:	2250      	movs	r2, #80	@ 0x50
 8006eae:	2100      	movs	r1, #0
 8006eb0:	68b8      	ldr	r0, [r7, #8]
 8006eb2:	f002 fc11 	bl	80096d8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	211a      	movs	r1, #26
 8006ebc:	fb01 f303 	mul.w	r3, r1, r3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	b25b      	sxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	da15      	bge.n	8006efa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	211a      	movs	r1, #26
 8006ed4:	fb01 f303 	mul.w	r3, r1, r3
 8006ed8:	4413      	add	r3, r2
 8006eda:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	211a      	movs	r1, #26
 8006eea:	fb01 f303 	mul.w	r3, r1, r3
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006ef4:	881a      	ldrh	r2, [r3, #0]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	785b      	ldrb	r3, [r3, #1]
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 ffbe 	bl	8008e82 <USBH_AllocPipe>
 8006f06:	4603      	mov	r3, r0
 8006f08:	461a      	mov	r2, r3
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	7819      	ldrb	r1, [r3, #0]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	7858      	ldrb	r0, [r3, #1]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	8952      	ldrh	r2, [r2, #10]
 8006f26:	9202      	str	r2, [sp, #8]
 8006f28:	2203      	movs	r2, #3
 8006f2a:	9201      	str	r2, [sp, #4]
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	4623      	mov	r3, r4
 8006f30:	4602      	mov	r2, r0
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f001 ff76 	bl	8008e24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f002 fa85 	bl	8009450 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006f46:	2300      	movs	r3, #0
 8006f48:	2200      	movs	r2, #0
 8006f4a:	210a      	movs	r1, #10
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fc0a 	bl	8007766 <USBH_FindInterface>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	2bff      	cmp	r3, #255	@ 0xff
 8006f5a:	d002      	beq.n	8006f62 <USBH_CDC_InterfaceInit+0x11a>
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d901      	bls.n	8006f66 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f62:	2302      	movs	r3, #2
 8006f64:	e0c2      	b.n	80070ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	211a      	movs	r1, #26
 8006f6c:	fb01 f303 	mul.w	r3, r1, r3
 8006f70:	4413      	add	r3, r2
 8006f72:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	b25b      	sxtb	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da16      	bge.n	8006fac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	211a      	movs	r1, #26
 8006f84:	fb01 f303 	mul.w	r3, r1, r3
 8006f88:	4413      	add	r3, r2
 8006f8a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006f8e:	781a      	ldrb	r2, [r3, #0]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	211a      	movs	r1, #26
 8006f9a:	fb01 f303 	mul.w	r3, r1, r3
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006fa4:	881a      	ldrh	r2, [r3, #0]
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	835a      	strh	r2, [r3, #26]
 8006faa:	e015      	b.n	8006fd8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	211a      	movs	r1, #26
 8006fb2:	fb01 f303 	mul.w	r3, r1, r3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006fbc:	781a      	ldrb	r2, [r3, #0]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	211a      	movs	r1, #26
 8006fc8:	fb01 f303 	mul.w	r3, r1, r3
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006fd2:	881a      	ldrh	r2, [r3, #0]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	211a      	movs	r1, #26
 8006fde:	fb01 f303 	mul.w	r3, r1, r3
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	b25b      	sxtb	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	da16      	bge.n	800701e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	211a      	movs	r1, #26
 8006ff6:	fb01 f303 	mul.w	r3, r1, r3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007000:	781a      	ldrb	r2, [r3, #0]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	211a      	movs	r1, #26
 800700c:	fb01 f303 	mul.w	r3, r1, r3
 8007010:	4413      	add	r3, r2
 8007012:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007016:	881a      	ldrh	r2, [r3, #0]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	835a      	strh	r2, [r3, #26]
 800701c:	e015      	b.n	800704a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	211a      	movs	r1, #26
 8007024:	fb01 f303 	mul.w	r3, r1, r3
 8007028:	4413      	add	r3, r2
 800702a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800702e:	781a      	ldrb	r2, [r3, #0]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	211a      	movs	r1, #26
 800703a:	fb01 f303 	mul.w	r3, r1, r3
 800703e:	4413      	add	r3, r2
 8007040:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007044:	881a      	ldrh	r2, [r3, #0]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	7b9b      	ldrb	r3, [r3, #14]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 ff16 	bl	8008e82 <USBH_AllocPipe>
 8007056:	4603      	mov	r3, r0
 8007058:	461a      	mov	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	7bdb      	ldrb	r3, [r3, #15]
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 ff0c 	bl	8008e82 <USBH_AllocPipe>
 800706a:	4603      	mov	r3, r0
 800706c:	461a      	mov	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	7b59      	ldrb	r1, [r3, #13]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	7b98      	ldrb	r0, [r3, #14]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	8b12      	ldrh	r2, [r2, #24]
 800708a:	9202      	str	r2, [sp, #8]
 800708c:	2202      	movs	r2, #2
 800708e:	9201      	str	r2, [sp, #4]
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	4623      	mov	r3, r4
 8007094:	4602      	mov	r2, r0
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fec4 	bl	8008e24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	7b19      	ldrb	r1, [r3, #12]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	7bd8      	ldrb	r0, [r3, #15]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	8b52      	ldrh	r2, [r2, #26]
 80070b4:	9202      	str	r2, [sp, #8]
 80070b6:	2202      	movs	r2, #2
 80070b8:	9201      	str	r2, [sp, #4]
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	4623      	mov	r3, r4
 80070be:	4602      	mov	r2, r0
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 feaf 	bl	8008e24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	7b5b      	ldrb	r3, [r3, #13]
 80070d2:	2200      	movs	r2, #0
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f002 f9ba 	bl	8009450 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	7b1b      	ldrb	r3, [r3, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f002 f9b3 	bl	8009450 <USBH_LL_SetToggle>

  return USBH_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd90      	pop	{r4, r7, pc}

080070f4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00e      	beq.n	800712c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 fea4 	bl	8008e62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 fecf 	bl	8008ec4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	7b1b      	ldrb	r3, [r3, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00e      	beq.n	8007152 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	7b1b      	ldrb	r3, [r3, #12]
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 fe91 	bl	8008e62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	7b1b      	ldrb	r3, [r3, #12]
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 febc 	bl	8008ec4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	7b5b      	ldrb	r3, [r3, #13]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00e      	beq.n	8007178 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	7b5b      	ldrb	r3, [r3, #13]
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 fe7e 	bl	8008e62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	7b5b      	ldrb	r3, [r3, #13]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 fea9 	bl	8008ec4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00b      	beq.n	800719c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	4618      	mov	r0, r3
 800718e:	f002 f9ed 	bl	800956c <free>
    phost->pActiveClass->pData = 0U;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007198:	2200      	movs	r2, #0
 800719a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3340      	adds	r3, #64	@ 0x40
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f8b1 	bl	8007326 <GetLineCoding>
 80071c4:	4603      	mov	r3, r0
 80071c6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d105      	bne.n	80071da <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80071d4:	2102      	movs	r1, #2
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80071da:	7afb      	ldrb	r3, [r7, #11]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007204:	2b04      	cmp	r3, #4
 8007206:	d877      	bhi.n	80072f8 <USBH_CDC_Process+0x114>
 8007208:	a201      	add	r2, pc, #4	@ (adr r2, 8007210 <USBH_CDC_Process+0x2c>)
 800720a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720e:	bf00      	nop
 8007210:	08007225 	.word	0x08007225
 8007214:	0800722b 	.word	0x0800722b
 8007218:	0800725b 	.word	0x0800725b
 800721c:	080072cf 	.word	0x080072cf
 8007220:	080072dd 	.word	0x080072dd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	73fb      	strb	r3, [r7, #15]
      break;
 8007228:	e06d      	b.n	8007306 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f897 	bl	8007364 <SetLineCoding>
 8007236:	4603      	mov	r3, r0
 8007238:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d104      	bne.n	800724a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007248:	e058      	b.n	80072fc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d055      	beq.n	80072fc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2204      	movs	r2, #4
 8007254:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007258:	e050      	b.n	80072fc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	3340      	adds	r3, #64	@ 0x40
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f860 	bl	8007326 <GetLineCoding>
 8007266:	4603      	mov	r3, r0
 8007268:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d126      	bne.n	80072be <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007282:	791b      	ldrb	r3, [r3, #4]
 8007284:	429a      	cmp	r2, r3
 8007286:	d13b      	bne.n	8007300 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007292:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007294:	429a      	cmp	r2, r3
 8007296:	d133      	bne.n	8007300 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072a2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d12b      	bne.n	8007300 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072b0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d124      	bne.n	8007300 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f958 	bl	800756c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80072bc:	e020      	b.n	8007300 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d01d      	beq.n	8007300 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2204      	movs	r2, #4
 80072c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80072cc:	e018      	b.n	8007300 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f867 	bl	80073a2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f8da 	bl	800748e <CDC_ProcessReception>
      break;
 80072da:	e014      	b.n	8007306 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80072dc:	2100      	movs	r1, #0
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 f81a 	bl	8008318 <USBH_ClrFeature>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80072f6:	e005      	b.n	8007304 <USBH_CDC_Process+0x120>

    default:
      break;
 80072f8:	bf00      	nop
 80072fa:	e004      	b.n	8007306 <USBH_CDC_Process+0x122>
      break;
 80072fc:	bf00      	nop
 80072fe:	e002      	b.n	8007306 <USBH_CDC_Process+0x122>
      break;
 8007300:	bf00      	nop
 8007302:	e000      	b.n	8007306 <USBH_CDC_Process+0x122>
      break;
 8007304:	bf00      	nop

  }

  return status;
 8007306:	7bfb      	ldrb	r3, [r7, #15]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	22a1      	movs	r2, #161	@ 0xa1
 8007334:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2221      	movs	r2, #33	@ 0x21
 800733a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2207      	movs	r2, #7
 800734c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2207      	movs	r2, #7
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 fb14 	bl	8008982 <USBH_CtlReq>
 800735a:	4603      	mov	r3, r0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2221      	movs	r2, #33	@ 0x21
 8007372:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2220      	movs	r2, #32
 8007378:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2207      	movs	r2, #7
 800738a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	2207      	movs	r2, #7
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 faf5 	bl	8008982 <USBH_CtlReq>
 8007398:	4603      	mov	r3, r0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b086      	sub	sp, #24
 80073a6:	af02      	add	r7, sp, #8
 80073a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073b4:	2300      	movs	r3, #0
 80073b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d002      	beq.n	80073c8 <CDC_ProcessTransmission+0x26>
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d023      	beq.n	800740e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80073c6:	e05e      	b.n	8007486 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	8b12      	ldrh	r2, [r2, #24]
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d90b      	bls.n	80073ec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	69d9      	ldr	r1, [r3, #28]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8b1a      	ldrh	r2, [r3, #24]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	7b5b      	ldrb	r3, [r3, #13]
 80073e0:	2001      	movs	r0, #1
 80073e2:	9000      	str	r0, [sp, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 fcda 	bl	8008d9e <USBH_BulkSendData>
 80073ea:	e00b      	b.n	8007404 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	7b5b      	ldrb	r3, [r3, #13]
 80073fa:	2001      	movs	r0, #1
 80073fc:	9000      	str	r0, [sp, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f001 fccd 	bl	8008d9e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800740c:	e03b      	b.n	8007486 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	7b5b      	ldrb	r3, [r3, #13]
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 fff1 	bl	80093fc <USBH_LL_GetURBState>
 800741a:	4603      	mov	r3, r0
 800741c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d128      	bne.n	8007476 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	8b12      	ldrh	r2, [r2, #24]
 800742c:	4293      	cmp	r3, r2
 800742e:	d90e      	bls.n	800744e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	8b12      	ldrh	r2, [r2, #24]
 8007438:	1a9a      	subs	r2, r3, r2
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	8b12      	ldrh	r2, [r2, #24]
 8007446:	441a      	add	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	61da      	str	r2, [r3, #28]
 800744c:	e002      	b.n	8007454 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007458:	2b00      	cmp	r3, #0
 800745a:	d004      	beq.n	8007466 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007464:	e00e      	b.n	8007484 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f868 	bl	8007544 <USBH_CDC_TransmitCallback>
      break;
 8007474:	e006      	b.n	8007484 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	2b02      	cmp	r3, #2
 800747a:	d103      	bne.n	8007484 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007484:	bf00      	nop
  }
}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b086      	sub	sp, #24
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80074a0:	2300      	movs	r3, #0
 80074a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d002      	beq.n	80074b4 <CDC_ProcessReception+0x26>
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d00e      	beq.n	80074d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80074b2:	e043      	b.n	800753c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	6a19      	ldr	r1, [r3, #32]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	8b5a      	ldrh	r2, [r3, #26]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	7b1b      	ldrb	r3, [r3, #12]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 fc91 	bl	8008de8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2204      	movs	r2, #4
 80074ca:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80074ce:	e035      	b.n	800753c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	7b1b      	ldrb	r3, [r3, #12]
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 ff90 	bl	80093fc <USBH_LL_GetURBState>
 80074dc:	4603      	mov	r3, r0
 80074de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80074e0:	7cfb      	ldrb	r3, [r7, #19]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d129      	bne.n	800753a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	7b1b      	ldrb	r3, [r3, #12]
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 fef3 	bl	80092d8 <USBH_LL_GetLastXferSize>
 80074f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d016      	beq.n	800752c <CDC_ProcessReception+0x9e>
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	8b5b      	ldrh	r3, [r3, #26]
 8007502:	461a      	mov	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4293      	cmp	r3, r2
 8007508:	d110      	bne.n	800752c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	1ad2      	subs	r2, r2, r3
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	6a1a      	ldr	r2, [r3, #32]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	441a      	add	r2, r3
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2203      	movs	r2, #3
 8007526:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800752a:	e006      	b.n	800753a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f80f 	bl	8007558 <USBH_CDC_ReceiveCallback>
      break;
 800753a:	bf00      	nop
  }
}
 800753c:	bf00      	nop
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	4613      	mov	r3, r2
 800758c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007594:	2302      	movs	r3, #2
 8007596:	e029      	b.n	80075ec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	79fa      	ldrb	r2, [r7, #7]
 800759c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 f81f 	bl	80075f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f001 fdc3 	bl	8009170 <USBH_LL_Init>

  return USBH_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	e009      	b.n	800761a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	33e0      	adds	r3, #224	@ 0xe0
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	2200      	movs	r2, #0
 8007612:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	3301      	adds	r3, #1
 8007618:	60fb      	str	r3, [r7, #12]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b0f      	cmp	r3, #15
 800761e:	d9f2      	bls.n	8007606 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	e009      	b.n	800763a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007630:	2200      	movs	r2, #0
 8007632:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007640:	d3f1      	bcc.n	8007626 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2240      	movs	r2, #64	@ 0x40
 8007666:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	331c      	adds	r3, #28
 8007692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007696:	2100      	movs	r1, #0
 8007698:	4618      	mov	r0, r3
 800769a:	f002 f81d 	bl	80096d8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80076a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076a8:	2100      	movs	r1, #0
 80076aa:	4618      	mov	r0, r3
 80076ac:	f002 f814 	bl	80096d8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80076b6:	2212      	movs	r2, #18
 80076b8:	2100      	movs	r1, #0
 80076ba:	4618      	mov	r0, r3
 80076bc:	f002 f80c 	bl	80096d8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80076c6:	223e      	movs	r2, #62	@ 0x3e
 80076c8:	2100      	movs	r1, #0
 80076ca:	4618      	mov	r0, r3
 80076cc:	f002 f804 	bl	80096d8 <memset>

  return USBH_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80076da:	b480      	push	{r7}
 80076dc:	b085      	sub	sp, #20
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d016      	beq.n	800771c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10e      	bne.n	8007716 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80076fe:	1c59      	adds	r1, r3, #1
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	33de      	adds	r3, #222	@ 0xde
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	73fb      	strb	r3, [r7, #15]
 8007714:	e004      	b.n	8007720 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007716:	2302      	movs	r3, #2
 8007718:	73fb      	strb	r3, [r7, #15]
 800771a:	e001      	b.n	8007720 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800771c:	2302      	movs	r3, #2
 800771e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007720:	7bfb      	ldrb	r3, [r7, #15]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	460b      	mov	r3, r1
 8007738:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007744:	78fa      	ldrb	r2, [r7, #3]
 8007746:	429a      	cmp	r2, r3
 8007748:	d204      	bcs.n	8007754 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	78fa      	ldrb	r2, [r7, #3]
 800774e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007752:	e001      	b.n	8007758 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007754:	2302      	movs	r3, #2
 8007756:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007758:	7bfb      	ldrb	r3, [r7, #15]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007766:	b480      	push	{r7}
 8007768:	b087      	sub	sp, #28
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	4608      	mov	r0, r1
 8007770:	4611      	mov	r1, r2
 8007772:	461a      	mov	r2, r3
 8007774:	4603      	mov	r3, r0
 8007776:	70fb      	strb	r3, [r7, #3]
 8007778:	460b      	mov	r3, r1
 800777a:	70bb      	strb	r3, [r7, #2]
 800777c:	4613      	mov	r3, r2
 800777e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007784:	2300      	movs	r3, #0
 8007786:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800778e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007790:	e025      	b.n	80077de <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	221a      	movs	r2, #26
 8007796:	fb02 f303 	mul.w	r3, r2, r3
 800779a:	3308      	adds	r3, #8
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	3302      	adds	r3, #2
 80077a2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	795b      	ldrb	r3, [r3, #5]
 80077a8:	78fa      	ldrb	r2, [r7, #3]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d002      	beq.n	80077b4 <USBH_FindInterface+0x4e>
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	2bff      	cmp	r3, #255	@ 0xff
 80077b2:	d111      	bne.n	80077d8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077b8:	78ba      	ldrb	r2, [r7, #2]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d002      	beq.n	80077c4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077be:	78bb      	ldrb	r3, [r7, #2]
 80077c0:	2bff      	cmp	r3, #255	@ 0xff
 80077c2:	d109      	bne.n	80077d8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077c8:	787a      	ldrb	r2, [r7, #1]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d002      	beq.n	80077d4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077ce:	787b      	ldrb	r3, [r7, #1]
 80077d0:	2bff      	cmp	r3, #255	@ 0xff
 80077d2:	d101      	bne.n	80077d8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	e006      	b.n	80077e6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	3301      	adds	r3, #1
 80077dc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d9d6      	bls.n	8007792 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80077e4:	23ff      	movs	r3, #255	@ 0xff
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	371c      	adds	r7, #28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 fcf4 	bl	80091e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007800:	2101      	movs	r1, #1
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 fe0d 	bl	8009422 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af04      	add	r7, sp, #16
 800781a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800781c:	2302      	movs	r3, #2
 800781e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b01      	cmp	r3, #1
 800782e:	d102      	bne.n	8007836 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2203      	movs	r2, #3
 8007834:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b0b      	cmp	r3, #11
 800783e:	f200 81bb 	bhi.w	8007bb8 <USBH_Process+0x3a4>
 8007842:	a201      	add	r2, pc, #4	@ (adr r2, 8007848 <USBH_Process+0x34>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	08007879 	.word	0x08007879
 800784c:	080078ab 	.word	0x080078ab
 8007850:	08007913 	.word	0x08007913
 8007854:	08007b53 	.word	0x08007b53
 8007858:	08007bb9 	.word	0x08007bb9
 800785c:	080079b3 	.word	0x080079b3
 8007860:	08007af9 	.word	0x08007af9
 8007864:	080079e9 	.word	0x080079e9
 8007868:	08007a09 	.word	0x08007a09
 800786c:	08007a27 	.word	0x08007a27
 8007870:	08007a6b 	.word	0x08007a6b
 8007874:	08007b3b 	.word	0x08007b3b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 819b 	beq.w	8007bbc <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800788c:	20c8      	movs	r0, #200	@ 0xc8
 800788e:	f001 fe12 	bl	80094b6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 fd05 	bl	80092a2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078a8:	e188      	b.n	8007bbc <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d107      	bne.n	80078c4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078c2:	e18a      	b.n	8007bda <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80078ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078ce:	d914      	bls.n	80078fa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80078d6:	3301      	adds	r3, #1
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d903      	bls.n	80078f2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	220d      	movs	r2, #13
 80078ee:	701a      	strb	r2, [r3, #0]
      break;
 80078f0:	e173      	b.n	8007bda <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	701a      	strb	r2, [r3, #0]
      break;
 80078f8:	e16f      	b.n	8007bda <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007900:	f103 020a 	add.w	r2, r3, #10
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800790a:	200a      	movs	r0, #10
 800790c:	f001 fdd3 	bl	80094b6 <USBH_Delay>
      break;
 8007910:	e163      	b.n	8007bda <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007922:	2104      	movs	r1, #4
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007928:	2064      	movs	r0, #100	@ 0x64
 800792a:	f001 fdc4 	bl	80094b6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 fc90 	bl	8009254 <USBH_LL_GetSpeed>
 8007934:	4603      	mov	r3, r0
 8007936:	461a      	mov	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2205      	movs	r2, #5
 8007942:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007944:	2100      	movs	r1, #0
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 fa9b 	bl	8008e82 <USBH_AllocPipe>
 800794c:	4603      	mov	r3, r0
 800794e:	461a      	mov	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007954:	2180      	movs	r1, #128	@ 0x80
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 fa93 	bl	8008e82 <USBH_AllocPipe>
 800795c:	4603      	mov	r3, r0
 800795e:	461a      	mov	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	7919      	ldrb	r1, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007978:	9202      	str	r2, [sp, #8]
 800797a:	2200      	movs	r2, #0
 800797c:	9201      	str	r2, [sp, #4]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	4603      	mov	r3, r0
 8007982:	2280      	movs	r2, #128	@ 0x80
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f001 fa4d 	bl	8008e24 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	7959      	ldrb	r1, [r3, #5]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800799e:	9202      	str	r2, [sp, #8]
 80079a0:	2200      	movs	r2, #0
 80079a2:	9201      	str	r2, [sp, #4]
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	4603      	mov	r3, r0
 80079a8:	2200      	movs	r2, #0
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 fa3a 	bl	8008e24 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079b0:	e113      	b.n	8007bda <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f916 	bl	8007be4 <USBH_HandleEnum>
 80079b8:	4603      	mov	r3, r0
 80079ba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f040 80fd 	bne.w	8007bc0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d103      	bne.n	80079e0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2208      	movs	r2, #8
 80079dc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079de:	e0ef      	b.n	8007bc0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2207      	movs	r2, #7
 80079e4:	701a      	strb	r2, [r3, #0]
      break;
 80079e6:	e0eb      	b.n	8007bc0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 80e8 	beq.w	8007bc4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079fa:	2101      	movs	r1, #1
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2208      	movs	r2, #8
 8007a04:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007a06:	e0dd      	b.n	8007bc4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fc3a 	bl	800828a <USBH_SetCfg>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f040 80d5 	bne.w	8007bc8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2209      	movs	r2, #9
 8007a22:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a24:	e0d0      	b.n	8007bc8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d016      	beq.n	8007a62 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007a34:	2101      	movs	r1, #1
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fc4a 	bl	80082d0 <USBH_SetFeature>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d103      	bne.n	8007a50 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	220a      	movs	r2, #10
 8007a4c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a4e:	e0bd      	b.n	8007bcc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b03      	cmp	r3, #3
 8007a56:	f040 80b9 	bne.w	8007bcc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	220a      	movs	r2, #10
 8007a5e:	701a      	strb	r2, [r3, #0]
      break;
 8007a60:	e0b4      	b.n	8007bcc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	220a      	movs	r2, #10
 8007a66:	701a      	strb	r2, [r3, #0]
      break;
 8007a68:	e0b0      	b.n	8007bcc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 80ad 	beq.w	8007bd0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a7e:	2300      	movs	r3, #0
 8007a80:	73fb      	strb	r3, [r7, #15]
 8007a82:	e016      	b.n	8007ab2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007a84:	7bfa      	ldrb	r2, [r7, #15]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	32de      	adds	r2, #222	@ 0xde
 8007a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8e:	791a      	ldrb	r2, [r3, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d108      	bne.n	8007aac <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007a9a:	7bfa      	ldrb	r2, [r7, #15]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	32de      	adds	r2, #222	@ 0xde
 8007aa0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007aaa:	e005      	b.n	8007ab8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	73fb      	strb	r3, [r7, #15]
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0e5      	beq.n	8007a84 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d016      	beq.n	8007af0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2206      	movs	r2, #6
 8007ad8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ae0:	2103      	movs	r1, #3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ae6:	e073      	b.n	8007bd0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	220d      	movs	r2, #13
 8007aec:	701a      	strb	r2, [r3, #0]
      break;
 8007aee:	e06f      	b.n	8007bd0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	220d      	movs	r2, #13
 8007af4:	701a      	strb	r2, [r3, #0]
      break;
 8007af6:	e06b      	b.n	8007bd0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d017      	beq.n	8007b32 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	4798      	blx	r3
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d103      	bne.n	8007b22 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	220b      	movs	r2, #11
 8007b1e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b20:	e058      	b.n	8007bd4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d154      	bne.n	8007bd4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	220d      	movs	r2, #13
 8007b2e:	701a      	strb	r2, [r3, #0]
      break;
 8007b30:	e050      	b.n	8007bd4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	220d      	movs	r2, #13
 8007b36:	701a      	strb	r2, [r3, #0]
      break;
 8007b38:	e04c      	b.n	8007bd4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d049      	beq.n	8007bd8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	4798      	blx	r3
      }
      break;
 8007b50:	e042      	b.n	8007bd8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7ff fd4a 	bl	80075f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d009      	beq.n	8007b7e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b8e:	2105      	movs	r1, #5
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d107      	bne.n	8007bb0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7ff fe22 	bl	80077f2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007bae:	e014      	b.n	8007bda <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 fb19 	bl	80091e8 <USBH_LL_Start>
      break;
 8007bb6:	e010      	b.n	8007bda <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007bb8:	bf00      	nop
 8007bba:	e00e      	b.n	8007bda <USBH_Process+0x3c6>
      break;
 8007bbc:	bf00      	nop
 8007bbe:	e00c      	b.n	8007bda <USBH_Process+0x3c6>
      break;
 8007bc0:	bf00      	nop
 8007bc2:	e00a      	b.n	8007bda <USBH_Process+0x3c6>
    break;
 8007bc4:	bf00      	nop
 8007bc6:	e008      	b.n	8007bda <USBH_Process+0x3c6>
      break;
 8007bc8:	bf00      	nop
 8007bca:	e006      	b.n	8007bda <USBH_Process+0x3c6>
      break;
 8007bcc:	bf00      	nop
 8007bce:	e004      	b.n	8007bda <USBH_Process+0x3c6>
      break;
 8007bd0:	bf00      	nop
 8007bd2:	e002      	b.n	8007bda <USBH_Process+0x3c6>
      break;
 8007bd4:	bf00      	nop
 8007bd6:	e000      	b.n	8007bda <USBH_Process+0x3c6>
      break;
 8007bd8:	bf00      	nop
  }
  return USBH_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b088      	sub	sp, #32
 8007be8:	af04      	add	r7, sp, #16
 8007bea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007bec:	2301      	movs	r3, #1
 8007bee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	785b      	ldrb	r3, [r3, #1]
 8007bf8:	2b07      	cmp	r3, #7
 8007bfa:	f200 81bd 	bhi.w	8007f78 <USBH_HandleEnum+0x394>
 8007bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8007c04 <USBH_HandleEnum+0x20>)
 8007c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c04:	08007c25 	.word	0x08007c25
 8007c08:	08007cdf 	.word	0x08007cdf
 8007c0c:	08007d49 	.word	0x08007d49
 8007c10:	08007dd3 	.word	0x08007dd3
 8007c14:	08007e3d 	.word	0x08007e3d
 8007c18:	08007ead 	.word	0x08007ead
 8007c1c:	08007ef3 	.word	0x08007ef3
 8007c20:	08007f39 	.word	0x08007f39
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007c24:	2108      	movs	r1, #8
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa4c 	bl	80080c4 <USBH_Get_DevDesc>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d12e      	bne.n	8007c94 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	7919      	ldrb	r1, [r3, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c5a:	9202      	str	r2, [sp, #8]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	9201      	str	r2, [sp, #4]
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	4603      	mov	r3, r0
 8007c64:	2280      	movs	r2, #128	@ 0x80
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f001 f8dc 	bl	8008e24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	7959      	ldrb	r1, [r3, #5]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c80:	9202      	str	r2, [sp, #8]
 8007c82:	2200      	movs	r2, #0
 8007c84:	9201      	str	r2, [sp, #4]
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 f8c9 	bl	8008e24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c92:	e173      	b.n	8007f7c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	f040 8170 	bne.w	8007f7c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d903      	bls.n	8007cbe <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	220d      	movs	r2, #13
 8007cba:	701a      	strb	r2, [r3, #0]
      break;
 8007cbc:	e15e      	b.n	8007f7c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	795b      	ldrb	r3, [r3, #5]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 f8fd 	bl	8008ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	791b      	ldrb	r3, [r3, #4]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 f8f7 	bl	8008ec4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	701a      	strb	r2, [r3, #0]
      break;
 8007cdc:	e14e      	b.n	8007f7c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007cde:	2112      	movs	r1, #18
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f9ef 	bl	80080c4 <USBH_Get_DevDesc>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cf6:	e143      	b.n	8007f80 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	f040 8140 	bne.w	8007f80 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d06:	3301      	adds	r3, #1
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d903      	bls.n	8007d22 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	220d      	movs	r2, #13
 8007d1e:	701a      	strb	r2, [r3, #0]
      break;
 8007d20:	e12e      	b.n	8007f80 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	795b      	ldrb	r3, [r3, #5]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 f8cb 	bl	8008ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	791b      	ldrb	r3, [r3, #4]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 f8c5 	bl	8008ec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]
      break;
 8007d46:	e11b      	b.n	8007f80 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007d48:	2101      	movs	r1, #1
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fa79 	bl	8008242 <USBH_SetAddress>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d130      	bne.n	8007dbc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007d5a:	2002      	movs	r0, #2
 8007d5c:	f001 fbab 	bl	80094b6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2203      	movs	r2, #3
 8007d6c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	7919      	ldrb	r1, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d82:	9202      	str	r2, [sp, #8]
 8007d84:	2200      	movs	r2, #0
 8007d86:	9201      	str	r2, [sp, #4]
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2280      	movs	r2, #128	@ 0x80
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f001 f848 	bl	8008e24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	7959      	ldrb	r1, [r3, #5]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007da8:	9202      	str	r2, [sp, #8]
 8007daa:	2200      	movs	r2, #0
 8007dac:	9201      	str	r2, [sp, #4]
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	4603      	mov	r3, r0
 8007db2:	2200      	movs	r2, #0
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f001 f835 	bl	8008e24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007dba:	e0e3      	b.n	8007f84 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	f040 80e0 	bne.w	8007f84 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	220d      	movs	r2, #13
 8007dc8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	705a      	strb	r2, [r3, #1]
      break;
 8007dd0:	e0d8      	b.n	8007f84 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007dd2:	2109      	movs	r1, #9
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f9a1 	bl	800811c <USBH_Get_CfgDesc>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d103      	bne.n	8007dec <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2204      	movs	r2, #4
 8007de8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007dea:	e0cd      	b.n	8007f88 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	f040 80ca 	bne.w	8007f88 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d903      	bls.n	8007e16 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	220d      	movs	r2, #13
 8007e12:	701a      	strb	r2, [r3, #0]
      break;
 8007e14:	e0b8      	b.n	8007f88 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	795b      	ldrb	r3, [r3, #5]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 f851 	bl	8008ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	791b      	ldrb	r3, [r3, #4]
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 f84b 	bl	8008ec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	701a      	strb	r2, [r3, #0]
      break;
 8007e3a:	e0a5      	b.n	8007f88 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f969 	bl	800811c <USBH_Get_CfgDesc>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d103      	bne.n	8007e5c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2205      	movs	r2, #5
 8007e58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e5a:	e097      	b.n	8007f8c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	f040 8094 	bne.w	8007f8c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d903      	bls.n	8007e86 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	220d      	movs	r2, #13
 8007e82:	701a      	strb	r2, [r3, #0]
      break;
 8007e84:	e082      	b.n	8007f8c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	795b      	ldrb	r3, [r3, #5]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 f819 	bl	8008ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	791b      	ldrb	r3, [r3, #4]
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 f813 	bl	8008ec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	701a      	strb	r2, [r3, #0]
      break;
 8007eaa:	e06f      	b.n	8007f8c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d019      	beq.n	8007eea <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ec2:	23ff      	movs	r3, #255	@ 0xff
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f953 	bl	8008170 <USBH_Get_StringDesc>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d103      	bne.n	8007edc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2206      	movs	r2, #6
 8007ed8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007eda:	e059      	b.n	8007f90 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d156      	bne.n	8007f90 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2206      	movs	r2, #6
 8007ee6:	705a      	strb	r2, [r3, #1]
      break;
 8007ee8:	e052      	b.n	8007f90 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2206      	movs	r2, #6
 8007eee:	705a      	strb	r2, [r3, #1]
      break;
 8007ef0:	e04e      	b.n	8007f90 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d019      	beq.n	8007f30 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f08:	23ff      	movs	r3, #255	@ 0xff
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f930 	bl	8008170 <USBH_Get_StringDesc>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d103      	bne.n	8007f22 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2207      	movs	r2, #7
 8007f1e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007f20:	e038      	b.n	8007f94 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d135      	bne.n	8007f94 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2207      	movs	r2, #7
 8007f2c:	705a      	strb	r2, [r3, #1]
      break;
 8007f2e:	e031      	b.n	8007f94 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2207      	movs	r2, #7
 8007f34:	705a      	strb	r2, [r3, #1]
      break;
 8007f36:	e02d      	b.n	8007f94 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d017      	beq.n	8007f72 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f4e:	23ff      	movs	r3, #255	@ 0xff
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f90d 	bl	8008170 <USBH_Get_StringDesc>
 8007f56:	4603      	mov	r3, r0
 8007f58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007f64:	e018      	b.n	8007f98 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d115      	bne.n	8007f98 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f70:	e012      	b.n	8007f98 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]
      break;
 8007f76:	e00f      	b.n	8007f98 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007f78:	bf00      	nop
 8007f7a:	e00e      	b.n	8007f9a <USBH_HandleEnum+0x3b6>
      break;
 8007f7c:	bf00      	nop
 8007f7e:	e00c      	b.n	8007f9a <USBH_HandleEnum+0x3b6>
      break;
 8007f80:	bf00      	nop
 8007f82:	e00a      	b.n	8007f9a <USBH_HandleEnum+0x3b6>
      break;
 8007f84:	bf00      	nop
 8007f86:	e008      	b.n	8007f9a <USBH_HandleEnum+0x3b6>
      break;
 8007f88:	bf00      	nop
 8007f8a:	e006      	b.n	8007f9a <USBH_HandleEnum+0x3b6>
      break;
 8007f8c:	bf00      	nop
 8007f8e:	e004      	b.n	8007f9a <USBH_HandleEnum+0x3b6>
      break;
 8007f90:	bf00      	nop
 8007f92:	e002      	b.n	8007f9a <USBH_HandleEnum+0x3b6>
      break;
 8007f94:	bf00      	nop
 8007f96:	e000      	b.n	8007f9a <USBH_HandleEnum+0x3b6>
      break;
 8007f98:	bf00      	nop
  }
  return Status;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f804 	bl	8007fe6 <USBH_HandleSof>
}
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b0b      	cmp	r3, #11
 8007ff6:	d10a      	bne.n	800800e <USBH_HandleSof+0x28>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d005      	beq.n	800800e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
  }
}
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008026:	bf00      	nop
}
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008042:	bf00      	nop
}
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 f8be 	bl	800921e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	791b      	ldrb	r3, [r3, #4]
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 ff0b 	bl	8008ec4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	795b      	ldrb	r3, [r3, #5]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 ff05 	bl	8008ec4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80080d0:	887b      	ldrh	r3, [r7, #2]
 80080d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080d6:	d901      	bls.n	80080dc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80080d8:	2303      	movs	r3, #3
 80080da:	e01b      	b.n	8008114 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80080e2:	887b      	ldrh	r3, [r7, #2]
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	4613      	mov	r3, r2
 80080e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080ec:	2100      	movs	r1, #0
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f872 	bl	80081d8 <USBH_GetDescriptor>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d109      	bne.n	8008112 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008104:	887a      	ldrh	r2, [r7, #2]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f929 	bl	8008360 <USBH_ParseDevDesc>
 800810e:	4603      	mov	r3, r0
 8008110:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008112:	7bfb      	ldrb	r3, [r7, #15]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af02      	add	r7, sp, #8
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	331c      	adds	r3, #28
 800812c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800812e:	887b      	ldrh	r3, [r7, #2]
 8008130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008134:	d901      	bls.n	800813a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008136:	2303      	movs	r3, #3
 8008138:	e016      	b.n	8008168 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800813a:	887b      	ldrh	r3, [r7, #2]
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008144:	2100      	movs	r1, #0
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f846 	bl	80081d8 <USBH_GetDescriptor>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d107      	bne.n	8008166 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008156:	887b      	ldrh	r3, [r7, #2]
 8008158:	461a      	mov	r2, r3
 800815a:	68b9      	ldr	r1, [r7, #8]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f9af 	bl	80084c0 <USBH_ParseCfgDesc>
 8008162:	4603      	mov	r3, r0
 8008164:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008166:	7bfb      	ldrb	r3, [r7, #15]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af02      	add	r7, sp, #8
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	607a      	str	r2, [r7, #4]
 800817a:	461a      	mov	r2, r3
 800817c:	460b      	mov	r3, r1
 800817e:	72fb      	strb	r3, [r7, #11]
 8008180:	4613      	mov	r3, r2
 8008182:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008184:	893b      	ldrh	r3, [r7, #8]
 8008186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800818a:	d802      	bhi.n	8008192 <USBH_Get_StringDesc+0x22>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008192:	2303      	movs	r3, #3
 8008194:	e01c      	b.n	80081d0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008196:	7afb      	ldrb	r3, [r7, #11]
 8008198:	b29b      	uxth	r3, r3
 800819a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800819e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80081a6:	893b      	ldrh	r3, [r7, #8]
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	460b      	mov	r3, r1
 80081ac:	2100      	movs	r1, #0
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f812 	bl	80081d8 <USBH_GetDescriptor>
 80081b4:	4603      	mov	r3, r0
 80081b6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d107      	bne.n	80081ce <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80081c4:	893a      	ldrh	r2, [r7, #8]
 80081c6:	6879      	ldr	r1, [r7, #4]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fb8d 	bl	80088e8 <USBH_ParseStringDesc>
  }

  return status;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	607b      	str	r3, [r7, #4]
 80081e2:	460b      	mov	r3, r1
 80081e4:	72fb      	strb	r3, [r7, #11]
 80081e6:	4613      	mov	r3, r2
 80081e8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	789b      	ldrb	r3, [r3, #2]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d11c      	bne.n	800822c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80081f2:	7afb      	ldrb	r3, [r7, #11]
 80081f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2206      	movs	r2, #6
 8008202:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	893a      	ldrh	r2, [r7, #8]
 8008208:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800820a:	893b      	ldrh	r3, [r7, #8]
 800820c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008210:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008214:	d104      	bne.n	8008220 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f240 4209 	movw	r2, #1033	@ 0x409
 800821c:	829a      	strh	r2, [r3, #20]
 800821e:	e002      	b.n	8008226 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	8b3a      	ldrh	r2, [r7, #24]
 800822a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800822c:	8b3b      	ldrh	r3, [r7, #24]
 800822e:	461a      	mov	r2, r3
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 fba5 	bl	8008982 <USBH_CtlReq>
 8008238:	4603      	mov	r3, r0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	460b      	mov	r3, r1
 800824c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	789b      	ldrb	r3, [r3, #2]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d10f      	bne.n	8008276 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2205      	movs	r2, #5
 8008260:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008262:	78fb      	ldrb	r3, [r7, #3]
 8008264:	b29a      	uxth	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008276:	2200      	movs	r2, #0
 8008278:	2100      	movs	r1, #0
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fb81 	bl	8008982 <USBH_CtlReq>
 8008280:	4603      	mov	r3, r0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	789b      	ldrb	r3, [r3, #2]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d10e      	bne.n	80082bc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2209      	movs	r2, #9
 80082a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	887a      	ldrh	r2, [r7, #2]
 80082ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80082bc:	2200      	movs	r2, #0
 80082be:	2100      	movs	r1, #0
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fb5e 	bl	8008982 <USBH_CtlReq>
 80082c6:	4603      	mov	r3, r0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	789b      	ldrb	r3, [r3, #2]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d10f      	bne.n	8008304 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2203      	movs	r2, #3
 80082ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80082f0:	78fb      	ldrb	r3, [r7, #3]
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008304:	2200      	movs	r2, #0
 8008306:	2100      	movs	r1, #0
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fb3a 	bl	8008982 <USBH_CtlReq>
 800830e:	4603      	mov	r3, r0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	789b      	ldrb	r3, [r3, #2]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d10f      	bne.n	800834c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	b29a      	uxth	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800834c:	2200      	movs	r2, #0
 800834e:	2100      	movs	r1, #0
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fb16 	bl	8008982 <USBH_CtlReq>
 8008356:	4603      	mov	r3, r0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008374:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008380:	2302      	movs	r3, #2
 8008382:	e094      	b.n	80084ae <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	781a      	ldrb	r2, [r3, #0]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	785a      	ldrb	r2, [r3, #1]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	3302      	adds	r3, #2
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	3303      	adds	r3, #3
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	021b      	lsls	r3, r3, #8
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	4313      	orrs	r3, r2
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	791a      	ldrb	r2, [r3, #4]
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	795a      	ldrb	r2, [r3, #5]
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	799a      	ldrb	r2, [r3, #6]
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	79da      	ldrb	r2, [r3, #7]
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d004      	beq.n	80083e2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d11b      	bne.n	800841a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	79db      	ldrb	r3, [r3, #7]
 80083e6:	2b20      	cmp	r3, #32
 80083e8:	dc0f      	bgt.n	800840a <USBH_ParseDevDesc+0xaa>
 80083ea:	2b08      	cmp	r3, #8
 80083ec:	db0f      	blt.n	800840e <USBH_ParseDevDesc+0xae>
 80083ee:	3b08      	subs	r3, #8
 80083f0:	4a32      	ldr	r2, [pc, #200]	@ (80084bc <USBH_ParseDevDesc+0x15c>)
 80083f2:	fa22 f303 	lsr.w	r3, r2, r3
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	bf14      	ite	ne
 80083fe:	2301      	movne	r3, #1
 8008400:	2300      	moveq	r3, #0
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d106      	bne.n	8008416 <USBH_ParseDevDesc+0xb6>
 8008408:	e001      	b.n	800840e <USBH_ParseDevDesc+0xae>
 800840a:	2b40      	cmp	r3, #64	@ 0x40
 800840c:	d003      	beq.n	8008416 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2208      	movs	r2, #8
 8008412:	71da      	strb	r2, [r3, #7]
        break;
 8008414:	e000      	b.n	8008418 <USBH_ParseDevDesc+0xb8>
        break;
 8008416:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008418:	e00e      	b.n	8008438 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008420:	2b02      	cmp	r3, #2
 8008422:	d107      	bne.n	8008434 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	79db      	ldrb	r3, [r3, #7]
 8008428:	2b08      	cmp	r3, #8
 800842a:	d005      	beq.n	8008438 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	2208      	movs	r2, #8
 8008430:	71da      	strb	r2, [r3, #7]
 8008432:	e001      	b.n	8008438 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008434:	2303      	movs	r3, #3
 8008436:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008438:	88fb      	ldrh	r3, [r7, #6]
 800843a:	2b08      	cmp	r3, #8
 800843c:	d936      	bls.n	80084ac <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	3308      	adds	r3, #8
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	461a      	mov	r2, r3
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	3309      	adds	r3, #9
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	b29b      	uxth	r3, r3
 8008450:	4313      	orrs	r3, r2
 8008452:	b29a      	uxth	r2, r3
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	330a      	adds	r3, #10
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	330b      	adds	r3, #11
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	021b      	lsls	r3, r3, #8
 8008468:	b29b      	uxth	r3, r3
 800846a:	4313      	orrs	r3, r2
 800846c:	b29a      	uxth	r2, r3
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	330c      	adds	r3, #12
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	330d      	adds	r3, #13
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	021b      	lsls	r3, r3, #8
 8008482:	b29b      	uxth	r3, r3
 8008484:	4313      	orrs	r3, r2
 8008486:	b29a      	uxth	r2, r3
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	7b9a      	ldrb	r2, [r3, #14]
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	7bda      	ldrb	r2, [r3, #15]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	7c1a      	ldrb	r2, [r3, #16]
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	7c5a      	ldrb	r2, [r3, #17]
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	371c      	adds	r7, #28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	01000101 	.word	0x01000101

080084c0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08c      	sub	sp, #48	@ 0x30
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80084d4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80084dc:	2300      	movs	r3, #0
 80084de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80084ee:	2302      	movs	r3, #2
 80084f0:	e0da      	b.n	80086a8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80084f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	2b09      	cmp	r3, #9
 80084fc:	d002      	beq.n	8008504 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80084fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008500:	2209      	movs	r2, #9
 8008502:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	781a      	ldrb	r2, [r3, #0]
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	785a      	ldrb	r2, [r3, #1]
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	3302      	adds	r3, #2
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	3303      	adds	r3, #3
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	021b      	lsls	r3, r3, #8
 8008524:	b29b      	uxth	r3, r3
 8008526:	4313      	orrs	r3, r2
 8008528:	b29b      	uxth	r3, r3
 800852a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800852e:	bf28      	it	cs
 8008530:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008534:	b29a      	uxth	r2, r3
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	791a      	ldrb	r2, [r3, #4]
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	795a      	ldrb	r2, [r3, #5]
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	799a      	ldrb	r2, [r3, #6]
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	79da      	ldrb	r2, [r3, #7]
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	7a1a      	ldrb	r2, [r3, #8]
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008562:	88fb      	ldrh	r3, [r7, #6]
 8008564:	2b09      	cmp	r3, #9
 8008566:	f240 809d 	bls.w	80086a4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800856a:	2309      	movs	r3, #9
 800856c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800856e:	2300      	movs	r3, #0
 8008570:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008572:	e081      	b.n	8008678 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008574:	f107 0316 	add.w	r3, r7, #22
 8008578:	4619      	mov	r1, r3
 800857a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800857c:	f000 f9e7 	bl	800894e <USBH_GetNextDesc>
 8008580:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008584:	785b      	ldrb	r3, [r3, #1]
 8008586:	2b04      	cmp	r3, #4
 8008588:	d176      	bne.n	8008678 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800858a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	2b09      	cmp	r3, #9
 8008590:	d002      	beq.n	8008598 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008594:	2209      	movs	r2, #9
 8008596:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800859c:	221a      	movs	r2, #26
 800859e:	fb02 f303 	mul.w	r3, r2, r3
 80085a2:	3308      	adds	r3, #8
 80085a4:	6a3a      	ldr	r2, [r7, #32]
 80085a6:	4413      	add	r3, r2
 80085a8:	3302      	adds	r3, #2
 80085aa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80085ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085ae:	69f8      	ldr	r0, [r7, #28]
 80085b0:	f000 f87e 	bl	80086b0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80085be:	e043      	b.n	8008648 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80085c0:	f107 0316 	add.w	r3, r7, #22
 80085c4:	4619      	mov	r1, r3
 80085c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085c8:	f000 f9c1 	bl	800894e <USBH_GetNextDesc>
 80085cc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80085ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d0:	785b      	ldrb	r3, [r3, #1]
 80085d2:	2b05      	cmp	r3, #5
 80085d4:	d138      	bne.n	8008648 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	795b      	ldrb	r3, [r3, #5]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d113      	bne.n	8008606 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d003      	beq.n	80085ee <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	799b      	ldrb	r3, [r3, #6]
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d10b      	bne.n	8008606 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	79db      	ldrb	r3, [r3, #7]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10b      	bne.n	800860e <USBH_ParseCfgDesc+0x14e>
 80085f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b09      	cmp	r3, #9
 80085fc:	d007      	beq.n	800860e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80085fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008600:	2209      	movs	r2, #9
 8008602:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008604:	e003      	b.n	800860e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008608:	2207      	movs	r2, #7
 800860a:	701a      	strb	r2, [r3, #0]
 800860c:	e000      	b.n	8008610 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800860e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008614:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008618:	3201      	adds	r2, #1
 800861a:	00d2      	lsls	r2, r2, #3
 800861c:	211a      	movs	r1, #26
 800861e:	fb01 f303 	mul.w	r3, r1, r3
 8008622:	4413      	add	r3, r2
 8008624:	3308      	adds	r3, #8
 8008626:	6a3a      	ldr	r2, [r7, #32]
 8008628:	4413      	add	r3, r2
 800862a:	3304      	adds	r3, #4
 800862c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800862e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008630:	69b9      	ldr	r1, [r7, #24]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 f870 	bl	8008718 <USBH_ParseEPDesc>
 8008638:	4603      	mov	r3, r0
 800863a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800863e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008642:	3301      	adds	r3, #1
 8008644:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	791b      	ldrb	r3, [r3, #4]
 800864c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008650:	429a      	cmp	r2, r3
 8008652:	d204      	bcs.n	800865e <USBH_ParseCfgDesc+0x19e>
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	885a      	ldrh	r2, [r3, #2]
 8008658:	8afb      	ldrh	r3, [r7, #22]
 800865a:	429a      	cmp	r2, r3
 800865c:	d8b0      	bhi.n	80085c0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	791b      	ldrb	r3, [r3, #4]
 8008662:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008666:	429a      	cmp	r2, r3
 8008668:	d201      	bcs.n	800866e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800866a:	2303      	movs	r3, #3
 800866c:	e01c      	b.n	80086a8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800866e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008672:	3301      	adds	r3, #1
 8008674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800867c:	2b01      	cmp	r3, #1
 800867e:	d805      	bhi.n	800868c <USBH_ParseCfgDesc+0x1cc>
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	885a      	ldrh	r2, [r3, #2]
 8008684:	8afb      	ldrh	r3, [r7, #22]
 8008686:	429a      	cmp	r2, r3
 8008688:	f63f af74 	bhi.w	8008574 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	791b      	ldrb	r3, [r3, #4]
 8008690:	2b02      	cmp	r3, #2
 8008692:	bf28      	it	cs
 8008694:	2302      	movcs	r3, #2
 8008696:	b2db      	uxtb	r3, r3
 8008698:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800869c:	429a      	cmp	r2, r3
 800869e:	d201      	bcs.n	80086a4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e001      	b.n	80086a8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80086a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3730      	adds	r7, #48	@ 0x30
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	781a      	ldrb	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	785a      	ldrb	r2, [r3, #1]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	789a      	ldrb	r2, [r3, #2]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	78da      	ldrb	r2, [r3, #3]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	3304      	adds	r3, #4
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	bf28      	it	cs
 80086e4:	2302      	movcs	r3, #2
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	795a      	ldrb	r2, [r3, #5]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	799a      	ldrb	r2, [r3, #6]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	79da      	ldrb	r2, [r3, #7]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	7a1a      	ldrb	r2, [r3, #8]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	721a      	strb	r2, [r3, #8]
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	781a      	ldrb	r2, [r3, #0]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	785a      	ldrb	r2, [r3, #1]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	789a      	ldrb	r2, [r3, #2]
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	78da      	ldrb	r2, [r3, #3]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3304      	adds	r3, #4
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3305      	adds	r3, #5
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	021b      	lsls	r3, r3, #8
 8008758:	b29b      	uxth	r3, r3
 800875a:	4313      	orrs	r3, r2
 800875c:	b29a      	uxth	r2, r3
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	799a      	ldrb	r2, [r3, #6]
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	889b      	ldrh	r3, [r3, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d009      	beq.n	8008786 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800877a:	d804      	bhi.n	8008786 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008784:	d901      	bls.n	800878a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008786:	2303      	movs	r3, #3
 8008788:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008790:	2b00      	cmp	r3, #0
 8008792:	d136      	bne.n	8008802 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	78db      	ldrb	r3, [r3, #3]
 8008798:	f003 0303 	and.w	r3, r3, #3
 800879c:	2b02      	cmp	r3, #2
 800879e:	d108      	bne.n	80087b2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	889b      	ldrh	r3, [r3, #4]
 80087a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087a8:	f240 8097 	bls.w	80088da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087ac:	2303      	movs	r3, #3
 80087ae:	75fb      	strb	r3, [r7, #23]
 80087b0:	e093      	b.n	80088da <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	78db      	ldrb	r3, [r3, #3]
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d107      	bne.n	80087ce <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	889b      	ldrh	r3, [r3, #4]
 80087c2:	2b40      	cmp	r3, #64	@ 0x40
 80087c4:	f240 8089 	bls.w	80088da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80087c8:	2303      	movs	r3, #3
 80087ca:	75fb      	strb	r3, [r7, #23]
 80087cc:	e085      	b.n	80088da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	78db      	ldrb	r3, [r3, #3]
 80087d2:	f003 0303 	and.w	r3, r3, #3
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d005      	beq.n	80087e6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	78db      	ldrb	r3, [r3, #3]
 80087de:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d10a      	bne.n	80087fc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	799b      	ldrb	r3, [r3, #6]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <USBH_ParseEPDesc+0xde>
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	799b      	ldrb	r3, [r3, #6]
 80087f2:	2b10      	cmp	r3, #16
 80087f4:	d970      	bls.n	80088d8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80087f6:	2303      	movs	r3, #3
 80087f8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80087fa:	e06d      	b.n	80088d8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80087fc:	2303      	movs	r3, #3
 80087fe:	75fb      	strb	r3, [r7, #23]
 8008800:	e06b      	b.n	80088da <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008808:	2b01      	cmp	r3, #1
 800880a:	d13c      	bne.n	8008886 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	78db      	ldrb	r3, [r3, #3]
 8008810:	f003 0303 	and.w	r3, r3, #3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d005      	beq.n	8008824 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	78db      	ldrb	r3, [r3, #3]
 800881c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008820:	2b00      	cmp	r3, #0
 8008822:	d106      	bne.n	8008832 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	889b      	ldrh	r3, [r3, #4]
 8008828:	2b40      	cmp	r3, #64	@ 0x40
 800882a:	d956      	bls.n	80088da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800882c:	2303      	movs	r3, #3
 800882e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008830:	e053      	b.n	80088da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	78db      	ldrb	r3, [r3, #3]
 8008836:	f003 0303 	and.w	r3, r3, #3
 800883a:	2b01      	cmp	r3, #1
 800883c:	d10e      	bne.n	800885c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	799b      	ldrb	r3, [r3, #6]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d007      	beq.n	8008856 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800884a:	2b10      	cmp	r3, #16
 800884c:	d803      	bhi.n	8008856 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008852:	2b40      	cmp	r3, #64	@ 0x40
 8008854:	d941      	bls.n	80088da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008856:	2303      	movs	r3, #3
 8008858:	75fb      	strb	r3, [r7, #23]
 800885a:	e03e      	b.n	80088da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	78db      	ldrb	r3, [r3, #3]
 8008860:	f003 0303 	and.w	r3, r3, #3
 8008864:	2b03      	cmp	r3, #3
 8008866:	d10b      	bne.n	8008880 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	799b      	ldrb	r3, [r3, #6]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d004      	beq.n	800887a <USBH_ParseEPDesc+0x162>
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	889b      	ldrh	r3, [r3, #4]
 8008874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008878:	d32f      	bcc.n	80088da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800887a:	2303      	movs	r3, #3
 800887c:	75fb      	strb	r3, [r7, #23]
 800887e:	e02c      	b.n	80088da <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008880:	2303      	movs	r3, #3
 8008882:	75fb      	strb	r3, [r7, #23]
 8008884:	e029      	b.n	80088da <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800888c:	2b02      	cmp	r3, #2
 800888e:	d120      	bne.n	80088d2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	78db      	ldrb	r3, [r3, #3]
 8008894:	f003 0303 	and.w	r3, r3, #3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d106      	bne.n	80088aa <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	889b      	ldrh	r3, [r3, #4]
 80088a0:	2b08      	cmp	r3, #8
 80088a2:	d01a      	beq.n	80088da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80088a4:	2303      	movs	r3, #3
 80088a6:	75fb      	strb	r3, [r7, #23]
 80088a8:	e017      	b.n	80088da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	78db      	ldrb	r3, [r3, #3]
 80088ae:	f003 0303 	and.w	r3, r3, #3
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d10a      	bne.n	80088cc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	799b      	ldrb	r3, [r3, #6]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <USBH_ParseEPDesc+0x1ae>
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	889b      	ldrh	r3, [r3, #4]
 80088c2:	2b08      	cmp	r3, #8
 80088c4:	d909      	bls.n	80088da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80088c6:	2303      	movs	r3, #3
 80088c8:	75fb      	strb	r3, [r7, #23]
 80088ca:	e006      	b.n	80088da <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80088cc:	2303      	movs	r3, #3
 80088ce:	75fb      	strb	r3, [r7, #23]
 80088d0:	e003      	b.n	80088da <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80088d2:	2303      	movs	r3, #3
 80088d4:	75fb      	strb	r3, [r7, #23]
 80088d6:	e000      	b.n	80088da <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80088d8:	bf00      	nop
  }

  return status;
 80088da:	7dfb      	ldrb	r3, [r7, #23]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	371c      	adds	r7, #28
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	4613      	mov	r3, r2
 80088f4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3301      	adds	r3, #1
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d120      	bne.n	8008942 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	1e9a      	subs	r2, r3, #2
 8008906:	88fb      	ldrh	r3, [r7, #6]
 8008908:	4293      	cmp	r3, r2
 800890a:	bf28      	it	cs
 800890c:	4613      	movcs	r3, r2
 800890e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3302      	adds	r3, #2
 8008914:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008916:	2300      	movs	r3, #0
 8008918:	82fb      	strh	r3, [r7, #22]
 800891a:	e00b      	b.n	8008934 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800891c:	8afb      	ldrh	r3, [r7, #22]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	4413      	add	r3, r2
 8008922:	781a      	ldrb	r2, [r3, #0]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	3301      	adds	r3, #1
 800892c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800892e:	8afb      	ldrh	r3, [r7, #22]
 8008930:	3302      	adds	r3, #2
 8008932:	82fb      	strh	r3, [r7, #22]
 8008934:	8afa      	ldrh	r2, [r7, #22]
 8008936:	8abb      	ldrh	r3, [r7, #20]
 8008938:	429a      	cmp	r2, r3
 800893a:	d3ef      	bcc.n	800891c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2200      	movs	r2, #0
 8008940:	701a      	strb	r2, [r3, #0]
  }
}
 8008942:	bf00      	nop
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800894e:	b480      	push	{r7}
 8008950:	b085      	sub	sp, #20
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	7812      	ldrb	r2, [r2, #0]
 8008960:	4413      	add	r3, r2
 8008962:	b29a      	uxth	r2, r3
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4413      	add	r3, r2
 8008972:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008974:	68fb      	ldr	r3, [r7, #12]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b086      	sub	sp, #24
 8008986:	af00      	add	r7, sp, #0
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	4613      	mov	r3, r2
 800898e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008990:	2301      	movs	r3, #1
 8008992:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	789b      	ldrb	r3, [r3, #2]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d002      	beq.n	80089a2 <USBH_CtlReq+0x20>
 800899c:	2b02      	cmp	r3, #2
 800899e:	d00f      	beq.n	80089c0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80089a0:	e027      	b.n	80089f2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	88fa      	ldrh	r2, [r7, #6]
 80089ac:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2201      	movs	r2, #1
 80089b2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2202      	movs	r2, #2
 80089b8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80089ba:	2301      	movs	r3, #1
 80089bc:	75fb      	strb	r3, [r7, #23]
      break;
 80089be:	e018      	b.n	80089f2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 f81b 	bl	80089fc <USBH_HandleControl>
 80089c6:	4603      	mov	r3, r0
 80089c8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80089ca:	7dfb      	ldrb	r3, [r7, #23]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <USBH_CtlReq+0x54>
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
 80089d2:	2b03      	cmp	r3, #3
 80089d4:	d106      	bne.n	80089e4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2201      	movs	r2, #1
 80089da:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	761a      	strb	r2, [r3, #24]
      break;
 80089e2:	e005      	b.n	80089f0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d102      	bne.n	80089f0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2201      	movs	r2, #1
 80089ee:	709a      	strb	r2, [r3, #2]
      break;
 80089f0:	bf00      	nop
  }
  return status;
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af02      	add	r7, sp, #8
 8008a02:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a04:	2301      	movs	r3, #1
 8008a06:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7e1b      	ldrb	r3, [r3, #24]
 8008a10:	3b01      	subs	r3, #1
 8008a12:	2b0a      	cmp	r3, #10
 8008a14:	f200 8156 	bhi.w	8008cc4 <USBH_HandleControl+0x2c8>
 8008a18:	a201      	add	r2, pc, #4	@ (adr r2, 8008a20 <USBH_HandleControl+0x24>)
 8008a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1e:	bf00      	nop
 8008a20:	08008a4d 	.word	0x08008a4d
 8008a24:	08008a67 	.word	0x08008a67
 8008a28:	08008ad1 	.word	0x08008ad1
 8008a2c:	08008af7 	.word	0x08008af7
 8008a30:	08008b2f 	.word	0x08008b2f
 8008a34:	08008b59 	.word	0x08008b59
 8008a38:	08008bab 	.word	0x08008bab
 8008a3c:	08008bcd 	.word	0x08008bcd
 8008a40:	08008c09 	.word	0x08008c09
 8008a44:	08008c2f 	.word	0x08008c2f
 8008a48:	08008c6d 	.word	0x08008c6d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f103 0110 	add.w	r1, r3, #16
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	795b      	ldrb	r3, [r3, #5]
 8008a56:	461a      	mov	r2, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f943 	bl	8008ce4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2202      	movs	r2, #2
 8008a62:	761a      	strb	r2, [r3, #24]
      break;
 8008a64:	e139      	b.n	8008cda <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	795b      	ldrb	r3, [r3, #5]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fcc5 	bl	80093fc <USBH_LL_GetURBState>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d11e      	bne.n	8008aba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	7c1b      	ldrb	r3, [r3, #16]
 8008a80:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a84:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	8adb      	ldrh	r3, [r3, #22]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008a8e:	7b7b      	ldrb	r3, [r7, #13]
 8008a90:	2b80      	cmp	r3, #128	@ 0x80
 8008a92:	d103      	bne.n	8008a9c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2203      	movs	r2, #3
 8008a98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a9a:	e115      	b.n	8008cc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2205      	movs	r2, #5
 8008aa0:	761a      	strb	r2, [r3, #24]
      break;
 8008aa2:	e111      	b.n	8008cc8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008aa4:	7b7b      	ldrb	r3, [r7, #13]
 8008aa6:	2b80      	cmp	r3, #128	@ 0x80
 8008aa8:	d103      	bne.n	8008ab2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2209      	movs	r2, #9
 8008aae:	761a      	strb	r2, [r3, #24]
      break;
 8008ab0:	e10a      	b.n	8008cc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2207      	movs	r2, #7
 8008ab6:	761a      	strb	r2, [r3, #24]
      break;
 8008ab8:	e106      	b.n	8008cc8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	2b04      	cmp	r3, #4
 8008abe:	d003      	beq.n	8008ac8 <USBH_HandleControl+0xcc>
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	f040 8100 	bne.w	8008cc8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	220b      	movs	r2, #11
 8008acc:	761a      	strb	r2, [r3, #24]
      break;
 8008ace:	e0fb      	b.n	8008cc8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6899      	ldr	r1, [r3, #8]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	899a      	ldrh	r2, [r3, #12]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	791b      	ldrb	r3, [r3, #4]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f93a 	bl	8008d62 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2204      	movs	r2, #4
 8008af2:	761a      	strb	r2, [r3, #24]
      break;
 8008af4:	e0f1      	b.n	8008cda <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	791b      	ldrb	r3, [r3, #4]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fc7d 	bl	80093fc <USBH_LL_GetURBState>
 8008b02:	4603      	mov	r3, r0
 8008b04:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d102      	bne.n	8008b12 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2209      	movs	r2, #9
 8008b10:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	2b05      	cmp	r3, #5
 8008b16:	d102      	bne.n	8008b1e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b1c:	e0d6      	b.n	8008ccc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	f040 80d3 	bne.w	8008ccc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	220b      	movs	r2, #11
 8008b2a:	761a      	strb	r2, [r3, #24]
      break;
 8008b2c:	e0ce      	b.n	8008ccc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6899      	ldr	r1, [r3, #8]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	899a      	ldrh	r2, [r3, #12]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	795b      	ldrb	r3, [r3, #5]
 8008b3a:	2001      	movs	r0, #1
 8008b3c:	9000      	str	r0, [sp, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f8ea 	bl	8008d18 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2206      	movs	r2, #6
 8008b54:	761a      	strb	r2, [r3, #24]
      break;
 8008b56:	e0c0      	b.n	8008cda <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	795b      	ldrb	r3, [r3, #5]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fc4c 	bl	80093fc <USBH_LL_GetURBState>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d103      	bne.n	8008b76 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2207      	movs	r2, #7
 8008b72:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b74:	e0ac      	b.n	8008cd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	2b05      	cmp	r3, #5
 8008b7a:	d105      	bne.n	8008b88 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	220c      	movs	r2, #12
 8008b80:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008b82:	2303      	movs	r3, #3
 8008b84:	73fb      	strb	r3, [r7, #15]
      break;
 8008b86:	e0a3      	b.n	8008cd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d103      	bne.n	8008b96 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2205      	movs	r2, #5
 8008b92:	761a      	strb	r2, [r3, #24]
      break;
 8008b94:	e09c      	b.n	8008cd0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b04      	cmp	r3, #4
 8008b9a:	f040 8099 	bne.w	8008cd0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	220b      	movs	r2, #11
 8008ba2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba8:	e092      	b.n	8008cd0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	791b      	ldrb	r3, [r3, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f8d5 	bl	8008d62 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2208      	movs	r2, #8
 8008bc8:	761a      	strb	r2, [r3, #24]

      break;
 8008bca:	e086      	b.n	8008cda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	791b      	ldrb	r3, [r3, #4]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fc12 	bl	80093fc <USBH_LL_GetURBState>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008bdc:	7bbb      	ldrb	r3, [r7, #14]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d105      	bne.n	8008bee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	220d      	movs	r2, #13
 8008be6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008bec:	e072      	b.n	8008cd4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008bee:	7bbb      	ldrb	r3, [r7, #14]
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	d103      	bne.n	8008bfc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	220b      	movs	r2, #11
 8008bf8:	761a      	strb	r2, [r3, #24]
      break;
 8008bfa:	e06b      	b.n	8008cd4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	2b05      	cmp	r3, #5
 8008c00:	d168      	bne.n	8008cd4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008c02:	2303      	movs	r3, #3
 8008c04:	73fb      	strb	r3, [r7, #15]
      break;
 8008c06:	e065      	b.n	8008cd4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	795b      	ldrb	r3, [r3, #5]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	9200      	str	r2, [sp, #0]
 8008c10:	2200      	movs	r2, #0
 8008c12:	2100      	movs	r1, #0
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f87f 	bl	8008d18 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	220a      	movs	r2, #10
 8008c2a:	761a      	strb	r2, [r3, #24]
      break;
 8008c2c:	e055      	b.n	8008cda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	795b      	ldrb	r3, [r3, #5]
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fbe1 	bl	80093fc <USBH_LL_GetURBState>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d105      	bne.n	8008c50 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	220d      	movs	r2, #13
 8008c4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c4e:	e043      	b.n	8008cd8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d103      	bne.n	8008c5e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2209      	movs	r2, #9
 8008c5a:	761a      	strb	r2, [r3, #24]
      break;
 8008c5c:	e03c      	b.n	8008cd8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008c5e:	7bbb      	ldrb	r3, [r7, #14]
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d139      	bne.n	8008cd8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	220b      	movs	r2, #11
 8008c68:	761a      	strb	r2, [r3, #24]
      break;
 8008c6a:	e035      	b.n	8008cd8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	7e5b      	ldrb	r3, [r3, #25]
 8008c70:	3301      	adds	r3, #1
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	765a      	strb	r2, [r3, #25]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	7e5b      	ldrb	r3, [r3, #25]
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d806      	bhi.n	8008c8e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008c8c:	e025      	b.n	8008cda <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c94:	2106      	movs	r1, #6
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	795b      	ldrb	r3, [r3, #5]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f90c 	bl	8008ec4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	791b      	ldrb	r3, [r3, #4]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f906 	bl	8008ec4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cc2:	e00a      	b.n	8008cda <USBH_HandleControl+0x2de>

    default:
      break;
 8008cc4:	bf00      	nop
 8008cc6:	e008      	b.n	8008cda <USBH_HandleControl+0x2de>
      break;
 8008cc8:	bf00      	nop
 8008cca:	e006      	b.n	8008cda <USBH_HandleControl+0x2de>
      break;
 8008ccc:	bf00      	nop
 8008cce:	e004      	b.n	8008cda <USBH_HandleControl+0x2de>
      break;
 8008cd0:	bf00      	nop
 8008cd2:	e002      	b.n	8008cda <USBH_HandleControl+0x2de>
      break;
 8008cd4:	bf00      	nop
 8008cd6:	e000      	b.n	8008cda <USBH_HandleControl+0x2de>
      break;
 8008cd8:	bf00      	nop
  }

  return status;
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af04      	add	r7, sp, #16
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cf2:	79f9      	ldrb	r1, [r7, #7]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	9303      	str	r3, [sp, #12]
 8008cf8:	2308      	movs	r3, #8
 8008cfa:	9302      	str	r3, [sp, #8]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	2300      	movs	r3, #0
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	2300      	movs	r3, #0
 8008d06:	2200      	movs	r2, #0
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 fb46 	bl	800939a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af04      	add	r7, sp, #16
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	4611      	mov	r1, r2
 8008d24:	461a      	mov	r2, r3
 8008d26:	460b      	mov	r3, r1
 8008d28:	80fb      	strh	r3, [r7, #6]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d3c:	7979      	ldrb	r1, [r7, #5]
 8008d3e:	7e3b      	ldrb	r3, [r7, #24]
 8008d40:	9303      	str	r3, [sp, #12]
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	9302      	str	r3, [sp, #8]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	9301      	str	r3, [sp, #4]
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	2200      	movs	r2, #0
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 fb21 	bl	800939a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b088      	sub	sp, #32
 8008d66:	af04      	add	r7, sp, #16
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	461a      	mov	r2, r3
 8008d70:	460b      	mov	r3, r1
 8008d72:	80fb      	strh	r3, [r7, #6]
 8008d74:	4613      	mov	r3, r2
 8008d76:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d78:	7979      	ldrb	r1, [r7, #5]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	9303      	str	r3, [sp, #12]
 8008d7e:	88fb      	ldrh	r3, [r7, #6]
 8008d80:	9302      	str	r3, [sp, #8]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	9301      	str	r3, [sp, #4]
 8008d86:	2301      	movs	r3, #1
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 fb03 	bl	800939a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008d94:	2300      	movs	r3, #0

}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b088      	sub	sp, #32
 8008da2:	af04      	add	r7, sp, #16
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	4611      	mov	r1, r2
 8008daa:	461a      	mov	r2, r3
 8008dac:	460b      	mov	r3, r1
 8008dae:	80fb      	strh	r3, [r7, #6]
 8008db0:	4613      	mov	r3, r2
 8008db2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dc2:	7979      	ldrb	r1, [r7, #5]
 8008dc4:	7e3b      	ldrb	r3, [r7, #24]
 8008dc6:	9303      	str	r3, [sp, #12]
 8008dc8:	88fb      	ldrh	r3, [r7, #6]
 8008dca:	9302      	str	r3, [sp, #8]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 fade 	bl	800939a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af04      	add	r7, sp, #16
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	4611      	mov	r1, r2
 8008df4:	461a      	mov	r2, r3
 8008df6:	460b      	mov	r3, r1
 8008df8:	80fb      	strh	r3, [r7, #6]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dfe:	7979      	ldrb	r1, [r7, #5]
 8008e00:	2300      	movs	r3, #0
 8008e02:	9303      	str	r3, [sp, #12]
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	9302      	str	r3, [sp, #8]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	9301      	str	r3, [sp, #4]
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	2302      	movs	r3, #2
 8008e12:	2201      	movs	r2, #1
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f000 fac0 	bl	800939a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af04      	add	r7, sp, #16
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	4611      	mov	r1, r2
 8008e30:	461a      	mov	r2, r3
 8008e32:	4603      	mov	r3, r0
 8008e34:	70fb      	strb	r3, [r7, #3]
 8008e36:	460b      	mov	r3, r1
 8008e38:	70bb      	strb	r3, [r7, #2]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008e3e:	7878      	ldrb	r0, [r7, #1]
 8008e40:	78ba      	ldrb	r2, [r7, #2]
 8008e42:	78f9      	ldrb	r1, [r7, #3]
 8008e44:	8b3b      	ldrh	r3, [r7, #24]
 8008e46:	9302      	str	r3, [sp, #8]
 8008e48:	7d3b      	ldrb	r3, [r7, #20]
 8008e4a:	9301      	str	r3, [sp, #4]
 8008e4c:	7c3b      	ldrb	r3, [r7, #16]
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	4603      	mov	r3, r0
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fa53 	bl	80092fe <USBH_LL_OpenPipe>

  return USBH_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008e6e:	78fb      	ldrb	r3, [r7, #3]
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fa72 	bl	800935c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f836 	bl	8008f00 <USBH_GetFreePipe>
 8008e94:	4603      	mov	r3, r0
 8008e96:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008e98:	89fb      	ldrh	r3, [r7, #14]
 8008e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00a      	beq.n	8008eb8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	89fb      	ldrh	r3, [r7, #14]
 8008ea6:	f003 030f 	and.w	r3, r3, #15
 8008eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008eae:	6879      	ldr	r1, [r7, #4]
 8008eb0:	33e0      	adds	r3, #224	@ 0xe0
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008eb8:	89fb      	ldrh	r3, [r7, #14]
 8008eba:	b2db      	uxtb	r3, r3
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	2b0f      	cmp	r3, #15
 8008ed4:	d80d      	bhi.n	8008ef2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008ed6:	78fb      	ldrb	r3, [r7, #3]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	33e0      	adds	r3, #224	@ 0xe0
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	78fb      	ldrb	r3, [r7, #3]
 8008ee4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008ee8:	6879      	ldr	r1, [r7, #4]
 8008eea:	33e0      	adds	r3, #224	@ 0xe0
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
 8008f10:	e00f      	b.n	8008f32 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	33e0      	adds	r3, #224	@ 0xe0
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	e007      	b.n	8008f3c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	73fb      	strb	r3, [r7, #15]
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	2b0f      	cmp	r3, #15
 8008f36:	d9ec      	bls.n	8008f12 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008f38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	490e      	ldr	r1, [pc, #56]	@ (8008f88 <MX_USB_HOST_Init+0x40>)
 8008f50:	480e      	ldr	r0, [pc, #56]	@ (8008f8c <MX_USB_HOST_Init+0x44>)
 8008f52:	f7fe fb15 	bl	8007580 <USBH_Init>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008f5c:	f7f7 fd54 	bl	8000a08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008f60:	490b      	ldr	r1, [pc, #44]	@ (8008f90 <MX_USB_HOST_Init+0x48>)
 8008f62:	480a      	ldr	r0, [pc, #40]	@ (8008f8c <MX_USB_HOST_Init+0x44>)
 8008f64:	f7fe fbb9 	bl	80076da <USBH_RegisterClass>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008f6e:	f7f7 fd4b 	bl	8000a08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008f72:	4806      	ldr	r0, [pc, #24]	@ (8008f8c <MX_USB_HOST_Init+0x44>)
 8008f74:	f7fe fc3d 	bl	80077f2 <USBH_Start>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008f7e:	f7f7 fd43 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008f82:	bf00      	nop
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	08008fa9 	.word	0x08008fa9
 8008f8c:	20000184 	.word	0x20000184
 8008f90:	2000000c 	.word	0x2000000c

08008f94 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008f98:	4802      	ldr	r0, [pc, #8]	@ (8008fa4 <MX_USB_HOST_Process+0x10>)
 8008f9a:	f7fe fc3b 	bl	8007814 <USBH_Process>
}
 8008f9e:	bf00      	nop
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	20000184 	.word	0x20000184

08008fa8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d819      	bhi.n	8008ff0 <USBH_UserProcess+0x48>
 8008fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc4 <USBH_UserProcess+0x1c>)
 8008fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc2:	bf00      	nop
 8008fc4:	08008ff1 	.word	0x08008ff1
 8008fc8:	08008fe1 	.word	0x08008fe1
 8008fcc:	08008ff1 	.word	0x08008ff1
 8008fd0:	08008fe9 	.word	0x08008fe9
 8008fd4:	08008fd9 	.word	0x08008fd9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008fd8:	4b09      	ldr	r3, [pc, #36]	@ (8009000 <USBH_UserProcess+0x58>)
 8008fda:	2203      	movs	r2, #3
 8008fdc:	701a      	strb	r2, [r3, #0]
  break;
 8008fde:	e008      	b.n	8008ff2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008fe0:	4b07      	ldr	r3, [pc, #28]	@ (8009000 <USBH_UserProcess+0x58>)
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	701a      	strb	r2, [r3, #0]
  break;
 8008fe6:	e004      	b.n	8008ff2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008fe8:	4b05      	ldr	r3, [pc, #20]	@ (8009000 <USBH_UserProcess+0x58>)
 8008fea:	2201      	movs	r2, #1
 8008fec:	701a      	strb	r2, [r3, #0]
  break;
 8008fee:	e000      	b.n	8008ff2 <USBH_UserProcess+0x4a>

  default:
  break;
 8008ff0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	2000055c 	.word	0x2000055c

08009004 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08a      	sub	sp, #40	@ 0x28
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800900c:	f107 0314 	add.w	r3, r7, #20
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	605a      	str	r2, [r3, #4]
 8009016:	609a      	str	r2, [r3, #8]
 8009018:	60da      	str	r2, [r3, #12]
 800901a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009024:	d147      	bne.n	80090b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009026:	2300      	movs	r3, #0
 8009028:	613b      	str	r3, [r7, #16]
 800902a:	4b25      	ldr	r3, [pc, #148]	@ (80090c0 <HAL_HCD_MspInit+0xbc>)
 800902c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800902e:	4a24      	ldr	r2, [pc, #144]	@ (80090c0 <HAL_HCD_MspInit+0xbc>)
 8009030:	f043 0301 	orr.w	r3, r3, #1
 8009034:	6313      	str	r3, [r2, #48]	@ 0x30
 8009036:	4b22      	ldr	r3, [pc, #136]	@ (80090c0 <HAL_HCD_MspInit+0xbc>)
 8009038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	613b      	str	r3, [r7, #16]
 8009040:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009042:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009048:	2300      	movs	r3, #0
 800904a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800904c:	2300      	movs	r3, #0
 800904e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009050:	f107 0314 	add.w	r3, r7, #20
 8009054:	4619      	mov	r1, r3
 8009056:	481b      	ldr	r0, [pc, #108]	@ (80090c4 <HAL_HCD_MspInit+0xc0>)
 8009058:	f7f8 f888 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800905c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009062:	2302      	movs	r3, #2
 8009064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009066:	2300      	movs	r3, #0
 8009068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800906a:	2300      	movs	r3, #0
 800906c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800906e:	230a      	movs	r3, #10
 8009070:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009072:	f107 0314 	add.w	r3, r7, #20
 8009076:	4619      	mov	r1, r3
 8009078:	4812      	ldr	r0, [pc, #72]	@ (80090c4 <HAL_HCD_MspInit+0xc0>)
 800907a:	f7f8 f877 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800907e:	4b10      	ldr	r3, [pc, #64]	@ (80090c0 <HAL_HCD_MspInit+0xbc>)
 8009080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009082:	4a0f      	ldr	r2, [pc, #60]	@ (80090c0 <HAL_HCD_MspInit+0xbc>)
 8009084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009088:	6353      	str	r3, [r2, #52]	@ 0x34
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
 800908e:	4b0c      	ldr	r3, [pc, #48]	@ (80090c0 <HAL_HCD_MspInit+0xbc>)
 8009090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009092:	4a0b      	ldr	r2, [pc, #44]	@ (80090c0 <HAL_HCD_MspInit+0xbc>)
 8009094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009098:	6453      	str	r3, [r2, #68]	@ 0x44
 800909a:	4b09      	ldr	r3, [pc, #36]	@ (80090c0 <HAL_HCD_MspInit+0xbc>)
 800909c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800909e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090a6:	2200      	movs	r2, #0
 80090a8:	2100      	movs	r1, #0
 80090aa:	2043      	movs	r0, #67	@ 0x43
 80090ac:	f7f8 f827 	bl	80010fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090b0:	2043      	movs	r0, #67	@ 0x43
 80090b2:	f7f8 f840 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090b6:	bf00      	nop
 80090b8:	3728      	adds	r7, #40	@ 0x28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	40023800 	.word	0x40023800
 80090c4:	40020000 	.word	0x40020000

080090c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fe ff73 	bl	8007fc2 <USBH_LL_IncTimer>
}
 80090dc:	bf00      	nop
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe ffab 	bl	800804e <USBH_LL_Connect>
}
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe ffb4 	bl	800807c <USBH_LL_Disconnect>
}
 8009114:	bf00      	nop
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
 8009128:	4613      	mov	r3, r2
 800912a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe ff65 	bl	8008016 <USBH_LL_PortEnabled>
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe ff65 	bl	8008032 <USBH_LL_PortDisabled>
}
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800917e:	2b01      	cmp	r3, #1
 8009180:	d12a      	bne.n	80091d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009182:	4a18      	ldr	r2, [pc, #96]	@ (80091e4 <USBH_LL_Init+0x74>)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a15      	ldr	r2, [pc, #84]	@ (80091e4 <USBH_LL_Init+0x74>)
 800918e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009192:	4b14      	ldr	r3, [pc, #80]	@ (80091e4 <USBH_LL_Init+0x74>)
 8009194:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009198:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800919a:	4b12      	ldr	r3, [pc, #72]	@ (80091e4 <USBH_LL_Init+0x74>)
 800919c:	2208      	movs	r2, #8
 800919e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80091a0:	4b10      	ldr	r3, [pc, #64]	@ (80091e4 <USBH_LL_Init+0x74>)
 80091a2:	2201      	movs	r2, #1
 80091a4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091a6:	4b0f      	ldr	r3, [pc, #60]	@ (80091e4 <USBH_LL_Init+0x74>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80091ac:	4b0d      	ldr	r3, [pc, #52]	@ (80091e4 <USBH_LL_Init+0x74>)
 80091ae:	2202      	movs	r2, #2
 80091b0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80091b2:	4b0c      	ldr	r3, [pc, #48]	@ (80091e4 <USBH_LL_Init+0x74>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80091b8:	480a      	ldr	r0, [pc, #40]	@ (80091e4 <USBH_LL_Init+0x74>)
 80091ba:	f7f8 f9a6 	bl	800150a <HAL_HCD_Init>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80091c4:	f7f7 fc20 	bl	8000a08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80091c8:	4806      	ldr	r0, [pc, #24]	@ (80091e4 <USBH_LL_Init+0x74>)
 80091ca:	f7f8 fe07 	bl	8001ddc <HAL_HCD_GetCurrentFrame>
 80091ce:	4603      	mov	r3, r0
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7fe fee6 	bl	8007fa4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20000560 	.word	0x20000560

080091e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091fe:	4618      	mov	r0, r3
 8009200:	f7f8 fd74 	bl	8001cec <HAL_HCD_Start>
 8009204:	4603      	mov	r3, r0
 8009206:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	4618      	mov	r0, r3
 800920c:	f000 f95e 	bl	80094cc <USBH_Get_USB_Status>
 8009210:	4603      	mov	r3, r0
 8009212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009214:	7bbb      	ldrb	r3, [r7, #14]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009234:	4618      	mov	r0, r3
 8009236:	f7f8 fd7c 	bl	8001d32 <HAL_HCD_Stop>
 800923a:	4603      	mov	r3, r0
 800923c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	4618      	mov	r0, r3
 8009242:	f000 f943 	bl	80094cc <USBH_Get_USB_Status>
 8009246:	4603      	mov	r3, r0
 8009248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800924a:	7bbb      	ldrb	r3, [r7, #14]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800925c:	2301      	movs	r3, #1
 800925e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009266:	4618      	mov	r0, r3
 8009268:	f7f8 fdc6 	bl	8001df8 <HAL_HCD_GetCurrentSpeed>
 800926c:	4603      	mov	r3, r0
 800926e:	2b02      	cmp	r3, #2
 8009270:	d00c      	beq.n	800928c <USBH_LL_GetSpeed+0x38>
 8009272:	2b02      	cmp	r3, #2
 8009274:	d80d      	bhi.n	8009292 <USBH_LL_GetSpeed+0x3e>
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <USBH_LL_GetSpeed+0x2c>
 800927a:	2b01      	cmp	r3, #1
 800927c:	d003      	beq.n	8009286 <USBH_LL_GetSpeed+0x32>
 800927e:	e008      	b.n	8009292 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]
    break;
 8009284:	e008      	b.n	8009298 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009286:	2301      	movs	r3, #1
 8009288:	73fb      	strb	r3, [r7, #15]
    break;
 800928a:	e005      	b.n	8009298 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800928c:	2302      	movs	r3, #2
 800928e:	73fb      	strb	r3, [r7, #15]
    break;
 8009290:	e002      	b.n	8009298 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009292:	2301      	movs	r3, #1
 8009294:	73fb      	strb	r3, [r7, #15]
    break;
 8009296:	bf00      	nop
  }
  return  speed;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7f8 fd57 	bl	8001d6c <HAL_HCD_ResetPort>
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 f901 	bl	80094cc <USBH_Get_USB_Status>
 80092ca:	4603      	mov	r3, r0
 80092cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80092ea:	78fa      	ldrb	r2, [r7, #3]
 80092ec:	4611      	mov	r1, r2
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7f8 fd5f 	bl	8001db2 <HAL_HCD_HC_GetXferCount>
 80092f4:	4603      	mov	r3, r0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80092fe:	b590      	push	{r4, r7, lr}
 8009300:	b089      	sub	sp, #36	@ 0x24
 8009302:	af04      	add	r7, sp, #16
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	4608      	mov	r0, r1
 8009308:	4611      	mov	r1, r2
 800930a:	461a      	mov	r2, r3
 800930c:	4603      	mov	r3, r0
 800930e:	70fb      	strb	r3, [r7, #3]
 8009310:	460b      	mov	r3, r1
 8009312:	70bb      	strb	r3, [r7, #2]
 8009314:	4613      	mov	r3, r2
 8009316:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009326:	787c      	ldrb	r4, [r7, #1]
 8009328:	78ba      	ldrb	r2, [r7, #2]
 800932a:	78f9      	ldrb	r1, [r7, #3]
 800932c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800932e:	9302      	str	r3, [sp, #8]
 8009330:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	f897 3020 	ldrb.w	r3, [r7, #32]
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	4623      	mov	r3, r4
 800933e:	f7f8 f94b 	bl	80015d8 <HAL_HCD_HC_Init>
 8009342:	4603      	mov	r3, r0
 8009344:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	4618      	mov	r0, r3
 800934a:	f000 f8bf 	bl	80094cc <USBH_Get_USB_Status>
 800934e:	4603      	mov	r3, r0
 8009350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009352:	7bbb      	ldrb	r3, [r7, #14]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	bd90      	pop	{r4, r7, pc}

0800935c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	460b      	mov	r3, r1
 8009366:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009376:	78fa      	ldrb	r2, [r7, #3]
 8009378:	4611      	mov	r1, r2
 800937a:	4618      	mov	r0, r3
 800937c:	f7f8 f9e4 	bl	8001748 <HAL_HCD_HC_Halt>
 8009380:	4603      	mov	r3, r0
 8009382:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	4618      	mov	r0, r3
 8009388:	f000 f8a0 	bl	80094cc <USBH_Get_USB_Status>
 800938c:	4603      	mov	r3, r0
 800938e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009390:	7bbb      	ldrb	r3, [r7, #14]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800939a:	b590      	push	{r4, r7, lr}
 800939c:	b089      	sub	sp, #36	@ 0x24
 800939e:	af04      	add	r7, sp, #16
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	4608      	mov	r0, r1
 80093a4:	4611      	mov	r1, r2
 80093a6:	461a      	mov	r2, r3
 80093a8:	4603      	mov	r3, r0
 80093aa:	70fb      	strb	r3, [r7, #3]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70bb      	strb	r3, [r7, #2]
 80093b0:	4613      	mov	r3, r2
 80093b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80093c2:	787c      	ldrb	r4, [r7, #1]
 80093c4:	78ba      	ldrb	r2, [r7, #2]
 80093c6:	78f9      	ldrb	r1, [r7, #3]
 80093c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80093cc:	9303      	str	r3, [sp, #12]
 80093ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80093d0:	9302      	str	r3, [sp, #8]
 80093d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d4:	9301      	str	r3, [sp, #4]
 80093d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	4623      	mov	r3, r4
 80093de:	f7f8 f9d7 	bl	8001790 <HAL_HCD_HC_SubmitRequest>
 80093e2:	4603      	mov	r3, r0
 80093e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 f86f 	bl	80094cc <USBH_Get_USB_Status>
 80093ee:	4603      	mov	r3, r0
 80093f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd90      	pop	{r4, r7, pc}

080093fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f7f8 fcb8 	bl	8001d88 <HAL_HCD_HC_GetURBState>
 8009418:	4603      	mov	r3, r0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b082      	sub	sp, #8
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	460b      	mov	r3, r1
 800942c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009434:	2b01      	cmp	r3, #1
 8009436:	d103      	bne.n	8009440 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	4618      	mov	r0, r3
 800943c:	f000 f872 	bl	8009524 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009440:	20c8      	movs	r0, #200	@ 0xc8
 8009442:	f7f7 fd5d 	bl	8000f00 <HAL_Delay>
  return USBH_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	70fb      	strb	r3, [r7, #3]
 800945c:	4613      	mov	r3, r2
 800945e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009466:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009468:	78fa      	ldrb	r2, [r7, #3]
 800946a:	68f9      	ldr	r1, [r7, #12]
 800946c:	4613      	mov	r3, r2
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	1a9b      	subs	r3, r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	440b      	add	r3, r1
 8009476:	3317      	adds	r3, #23
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00a      	beq.n	8009494 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800947e:	78fa      	ldrb	r2, [r7, #3]
 8009480:	68f9      	ldr	r1, [r7, #12]
 8009482:	4613      	mov	r3, r2
 8009484:	011b      	lsls	r3, r3, #4
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	440b      	add	r3, r1
 800948c:	333c      	adds	r3, #60	@ 0x3c
 800948e:	78ba      	ldrb	r2, [r7, #2]
 8009490:	701a      	strb	r2, [r3, #0]
 8009492:	e009      	b.n	80094a8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009494:	78fa      	ldrb	r2, [r7, #3]
 8009496:	68f9      	ldr	r1, [r7, #12]
 8009498:	4613      	mov	r3, r2
 800949a:	011b      	lsls	r3, r3, #4
 800949c:	1a9b      	subs	r3, r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	440b      	add	r3, r1
 80094a2:	333d      	adds	r3, #61	@ 0x3d
 80094a4:	78ba      	ldrb	r2, [r7, #2]
 80094a6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b082      	sub	sp, #8
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7f7 fd1e 	bl	8000f00 <HAL_Delay>
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	4603      	mov	r3, r0
 80094d4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d817      	bhi.n	8009510 <USBH_Get_USB_Status+0x44>
 80094e0:	a201      	add	r2, pc, #4	@ (adr r2, 80094e8 <USBH_Get_USB_Status+0x1c>)
 80094e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e6:	bf00      	nop
 80094e8:	080094f9 	.word	0x080094f9
 80094ec:	080094ff 	.word	0x080094ff
 80094f0:	08009505 	.word	0x08009505
 80094f4:	0800950b 	.word	0x0800950b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]
    break;
 80094fc:	e00b      	b.n	8009516 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80094fe:	2302      	movs	r3, #2
 8009500:	73fb      	strb	r3, [r7, #15]
    break;
 8009502:	e008      	b.n	8009516 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009504:	2301      	movs	r3, #1
 8009506:	73fb      	strb	r3, [r7, #15]
    break;
 8009508:	e005      	b.n	8009516 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800950a:	2302      	movs	r3, #2
 800950c:	73fb      	strb	r3, [r7, #15]
    break;
 800950e:	e002      	b.n	8009516 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009510:	2302      	movs	r3, #2
 8009512:	73fb      	strb	r3, [r7, #15]
    break;
 8009514:	bf00      	nop
  }
  return usb_status;
 8009516:	7bfb      	ldrb	r3, [r7, #15]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	4603      	mov	r3, r0
 800952c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800952e:	79fb      	ldrb	r3, [r7, #7]
 8009530:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009532:	79fb      	ldrb	r3, [r7, #7]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d102      	bne.n	800953e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009538:	2300      	movs	r3, #0
 800953a:	73fb      	strb	r3, [r7, #15]
 800953c:	e001      	b.n	8009542 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800953e:	2301      	movs	r3, #1
 8009540:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	461a      	mov	r2, r3
 8009546:	2101      	movs	r1, #1
 8009548:	4803      	ldr	r0, [pc, #12]	@ (8009558 <MX_DriverVbusFS+0x34>)
 800954a:	f7f7 ffab 	bl	80014a4 <HAL_GPIO_WritePin>
}
 800954e:	bf00      	nop
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	40020800 	.word	0x40020800

0800955c <malloc>:
 800955c:	4b02      	ldr	r3, [pc, #8]	@ (8009568 <malloc+0xc>)
 800955e:	4601      	mov	r1, r0
 8009560:	6818      	ldr	r0, [r3, #0]
 8009562:	f000 b82d 	b.w	80095c0 <_malloc_r>
 8009566:	bf00      	nop
 8009568:	2000002c 	.word	0x2000002c

0800956c <free>:
 800956c:	4b02      	ldr	r3, [pc, #8]	@ (8009578 <free+0xc>)
 800956e:	4601      	mov	r1, r0
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	f000 b8f5 	b.w	8009760 <_free_r>
 8009576:	bf00      	nop
 8009578:	2000002c 	.word	0x2000002c

0800957c <sbrk_aligned>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	4e0f      	ldr	r6, [pc, #60]	@ (80095bc <sbrk_aligned+0x40>)
 8009580:	460c      	mov	r4, r1
 8009582:	6831      	ldr	r1, [r6, #0]
 8009584:	4605      	mov	r5, r0
 8009586:	b911      	cbnz	r1, 800958e <sbrk_aligned+0x12>
 8009588:	f000 f8ae 	bl	80096e8 <_sbrk_r>
 800958c:	6030      	str	r0, [r6, #0]
 800958e:	4621      	mov	r1, r4
 8009590:	4628      	mov	r0, r5
 8009592:	f000 f8a9 	bl	80096e8 <_sbrk_r>
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	d103      	bne.n	80095a2 <sbrk_aligned+0x26>
 800959a:	f04f 34ff 	mov.w	r4, #4294967295
 800959e:	4620      	mov	r0, r4
 80095a0:	bd70      	pop	{r4, r5, r6, pc}
 80095a2:	1cc4      	adds	r4, r0, #3
 80095a4:	f024 0403 	bic.w	r4, r4, #3
 80095a8:	42a0      	cmp	r0, r4
 80095aa:	d0f8      	beq.n	800959e <sbrk_aligned+0x22>
 80095ac:	1a21      	subs	r1, r4, r0
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f89a 	bl	80096e8 <_sbrk_r>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d1f2      	bne.n	800959e <sbrk_aligned+0x22>
 80095b8:	e7ef      	b.n	800959a <sbrk_aligned+0x1e>
 80095ba:	bf00      	nop
 80095bc:	20000940 	.word	0x20000940

080095c0 <_malloc_r>:
 80095c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c4:	1ccd      	adds	r5, r1, #3
 80095c6:	f025 0503 	bic.w	r5, r5, #3
 80095ca:	3508      	adds	r5, #8
 80095cc:	2d0c      	cmp	r5, #12
 80095ce:	bf38      	it	cc
 80095d0:	250c      	movcc	r5, #12
 80095d2:	2d00      	cmp	r5, #0
 80095d4:	4606      	mov	r6, r0
 80095d6:	db01      	blt.n	80095dc <_malloc_r+0x1c>
 80095d8:	42a9      	cmp	r1, r5
 80095da:	d904      	bls.n	80095e6 <_malloc_r+0x26>
 80095dc:	230c      	movs	r3, #12
 80095de:	6033      	str	r3, [r6, #0]
 80095e0:	2000      	movs	r0, #0
 80095e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096bc <_malloc_r+0xfc>
 80095ea:	f000 f869 	bl	80096c0 <__malloc_lock>
 80095ee:	f8d8 3000 	ldr.w	r3, [r8]
 80095f2:	461c      	mov	r4, r3
 80095f4:	bb44      	cbnz	r4, 8009648 <_malloc_r+0x88>
 80095f6:	4629      	mov	r1, r5
 80095f8:	4630      	mov	r0, r6
 80095fa:	f7ff ffbf 	bl	800957c <sbrk_aligned>
 80095fe:	1c43      	adds	r3, r0, #1
 8009600:	4604      	mov	r4, r0
 8009602:	d158      	bne.n	80096b6 <_malloc_r+0xf6>
 8009604:	f8d8 4000 	ldr.w	r4, [r8]
 8009608:	4627      	mov	r7, r4
 800960a:	2f00      	cmp	r7, #0
 800960c:	d143      	bne.n	8009696 <_malloc_r+0xd6>
 800960e:	2c00      	cmp	r4, #0
 8009610:	d04b      	beq.n	80096aa <_malloc_r+0xea>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	4639      	mov	r1, r7
 8009616:	4630      	mov	r0, r6
 8009618:	eb04 0903 	add.w	r9, r4, r3
 800961c:	f000 f864 	bl	80096e8 <_sbrk_r>
 8009620:	4581      	cmp	r9, r0
 8009622:	d142      	bne.n	80096aa <_malloc_r+0xea>
 8009624:	6821      	ldr	r1, [r4, #0]
 8009626:	1a6d      	subs	r5, r5, r1
 8009628:	4629      	mov	r1, r5
 800962a:	4630      	mov	r0, r6
 800962c:	f7ff ffa6 	bl	800957c <sbrk_aligned>
 8009630:	3001      	adds	r0, #1
 8009632:	d03a      	beq.n	80096aa <_malloc_r+0xea>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	442b      	add	r3, r5
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	f8d8 3000 	ldr.w	r3, [r8]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	bb62      	cbnz	r2, 800969c <_malloc_r+0xdc>
 8009642:	f8c8 7000 	str.w	r7, [r8]
 8009646:	e00f      	b.n	8009668 <_malloc_r+0xa8>
 8009648:	6822      	ldr	r2, [r4, #0]
 800964a:	1b52      	subs	r2, r2, r5
 800964c:	d420      	bmi.n	8009690 <_malloc_r+0xd0>
 800964e:	2a0b      	cmp	r2, #11
 8009650:	d917      	bls.n	8009682 <_malloc_r+0xc2>
 8009652:	1961      	adds	r1, r4, r5
 8009654:	42a3      	cmp	r3, r4
 8009656:	6025      	str	r5, [r4, #0]
 8009658:	bf18      	it	ne
 800965a:	6059      	strne	r1, [r3, #4]
 800965c:	6863      	ldr	r3, [r4, #4]
 800965e:	bf08      	it	eq
 8009660:	f8c8 1000 	streq.w	r1, [r8]
 8009664:	5162      	str	r2, [r4, r5]
 8009666:	604b      	str	r3, [r1, #4]
 8009668:	4630      	mov	r0, r6
 800966a:	f000 f82f 	bl	80096cc <__malloc_unlock>
 800966e:	f104 000b 	add.w	r0, r4, #11
 8009672:	1d23      	adds	r3, r4, #4
 8009674:	f020 0007 	bic.w	r0, r0, #7
 8009678:	1ac2      	subs	r2, r0, r3
 800967a:	bf1c      	itt	ne
 800967c:	1a1b      	subne	r3, r3, r0
 800967e:	50a3      	strne	r3, [r4, r2]
 8009680:	e7af      	b.n	80095e2 <_malloc_r+0x22>
 8009682:	6862      	ldr	r2, [r4, #4]
 8009684:	42a3      	cmp	r3, r4
 8009686:	bf0c      	ite	eq
 8009688:	f8c8 2000 	streq.w	r2, [r8]
 800968c:	605a      	strne	r2, [r3, #4]
 800968e:	e7eb      	b.n	8009668 <_malloc_r+0xa8>
 8009690:	4623      	mov	r3, r4
 8009692:	6864      	ldr	r4, [r4, #4]
 8009694:	e7ae      	b.n	80095f4 <_malloc_r+0x34>
 8009696:	463c      	mov	r4, r7
 8009698:	687f      	ldr	r7, [r7, #4]
 800969a:	e7b6      	b.n	800960a <_malloc_r+0x4a>
 800969c:	461a      	mov	r2, r3
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d1fb      	bne.n	800969c <_malloc_r+0xdc>
 80096a4:	2300      	movs	r3, #0
 80096a6:	6053      	str	r3, [r2, #4]
 80096a8:	e7de      	b.n	8009668 <_malloc_r+0xa8>
 80096aa:	230c      	movs	r3, #12
 80096ac:	6033      	str	r3, [r6, #0]
 80096ae:	4630      	mov	r0, r6
 80096b0:	f000 f80c 	bl	80096cc <__malloc_unlock>
 80096b4:	e794      	b.n	80095e0 <_malloc_r+0x20>
 80096b6:	6005      	str	r5, [r0, #0]
 80096b8:	e7d6      	b.n	8009668 <_malloc_r+0xa8>
 80096ba:	bf00      	nop
 80096bc:	20000944 	.word	0x20000944

080096c0 <__malloc_lock>:
 80096c0:	4801      	ldr	r0, [pc, #4]	@ (80096c8 <__malloc_lock+0x8>)
 80096c2:	f000 b84b 	b.w	800975c <__retarget_lock_acquire_recursive>
 80096c6:	bf00      	nop
 80096c8:	20000a84 	.word	0x20000a84

080096cc <__malloc_unlock>:
 80096cc:	4801      	ldr	r0, [pc, #4]	@ (80096d4 <__malloc_unlock+0x8>)
 80096ce:	f000 b846 	b.w	800975e <__retarget_lock_release_recursive>
 80096d2:	bf00      	nop
 80096d4:	20000a84 	.word	0x20000a84

080096d8 <memset>:
 80096d8:	4402      	add	r2, r0
 80096da:	4603      	mov	r3, r0
 80096dc:	4293      	cmp	r3, r2
 80096de:	d100      	bne.n	80096e2 <memset+0xa>
 80096e0:	4770      	bx	lr
 80096e2:	f803 1b01 	strb.w	r1, [r3], #1
 80096e6:	e7f9      	b.n	80096dc <memset+0x4>

080096e8 <_sbrk_r>:
 80096e8:	b538      	push	{r3, r4, r5, lr}
 80096ea:	4d06      	ldr	r5, [pc, #24]	@ (8009704 <_sbrk_r+0x1c>)
 80096ec:	2300      	movs	r3, #0
 80096ee:	4604      	mov	r4, r0
 80096f0:	4608      	mov	r0, r1
 80096f2:	602b      	str	r3, [r5, #0]
 80096f4:	f7f7 fb20 	bl	8000d38 <_sbrk>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d102      	bne.n	8009702 <_sbrk_r+0x1a>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	b103      	cbz	r3, 8009702 <_sbrk_r+0x1a>
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	20000a80 	.word	0x20000a80

08009708 <__errno>:
 8009708:	4b01      	ldr	r3, [pc, #4]	@ (8009710 <__errno+0x8>)
 800970a:	6818      	ldr	r0, [r3, #0]
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	2000002c 	.word	0x2000002c

08009714 <__libc_init_array>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	4d0d      	ldr	r5, [pc, #52]	@ (800974c <__libc_init_array+0x38>)
 8009718:	4c0d      	ldr	r4, [pc, #52]	@ (8009750 <__libc_init_array+0x3c>)
 800971a:	1b64      	subs	r4, r4, r5
 800971c:	10a4      	asrs	r4, r4, #2
 800971e:	2600      	movs	r6, #0
 8009720:	42a6      	cmp	r6, r4
 8009722:	d109      	bne.n	8009738 <__libc_init_array+0x24>
 8009724:	4d0b      	ldr	r5, [pc, #44]	@ (8009754 <__libc_init_array+0x40>)
 8009726:	4c0c      	ldr	r4, [pc, #48]	@ (8009758 <__libc_init_array+0x44>)
 8009728:	f000 f864 	bl	80097f4 <_init>
 800972c:	1b64      	subs	r4, r4, r5
 800972e:	10a4      	asrs	r4, r4, #2
 8009730:	2600      	movs	r6, #0
 8009732:	42a6      	cmp	r6, r4
 8009734:	d105      	bne.n	8009742 <__libc_init_array+0x2e>
 8009736:	bd70      	pop	{r4, r5, r6, pc}
 8009738:	f855 3b04 	ldr.w	r3, [r5], #4
 800973c:	4798      	blx	r3
 800973e:	3601      	adds	r6, #1
 8009740:	e7ee      	b.n	8009720 <__libc_init_array+0xc>
 8009742:	f855 3b04 	ldr.w	r3, [r5], #4
 8009746:	4798      	blx	r3
 8009748:	3601      	adds	r6, #1
 800974a:	e7f2      	b.n	8009732 <__libc_init_array+0x1e>
 800974c:	08009830 	.word	0x08009830
 8009750:	08009830 	.word	0x08009830
 8009754:	08009830 	.word	0x08009830
 8009758:	08009834 	.word	0x08009834

0800975c <__retarget_lock_acquire_recursive>:
 800975c:	4770      	bx	lr

0800975e <__retarget_lock_release_recursive>:
 800975e:	4770      	bx	lr

08009760 <_free_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4605      	mov	r5, r0
 8009764:	2900      	cmp	r1, #0
 8009766:	d041      	beq.n	80097ec <_free_r+0x8c>
 8009768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800976c:	1f0c      	subs	r4, r1, #4
 800976e:	2b00      	cmp	r3, #0
 8009770:	bfb8      	it	lt
 8009772:	18e4      	addlt	r4, r4, r3
 8009774:	f7ff ffa4 	bl	80096c0 <__malloc_lock>
 8009778:	4a1d      	ldr	r2, [pc, #116]	@ (80097f0 <_free_r+0x90>)
 800977a:	6813      	ldr	r3, [r2, #0]
 800977c:	b933      	cbnz	r3, 800978c <_free_r+0x2c>
 800977e:	6063      	str	r3, [r4, #4]
 8009780:	6014      	str	r4, [r2, #0]
 8009782:	4628      	mov	r0, r5
 8009784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009788:	f7ff bfa0 	b.w	80096cc <__malloc_unlock>
 800978c:	42a3      	cmp	r3, r4
 800978e:	d908      	bls.n	80097a2 <_free_r+0x42>
 8009790:	6820      	ldr	r0, [r4, #0]
 8009792:	1821      	adds	r1, r4, r0
 8009794:	428b      	cmp	r3, r1
 8009796:	bf01      	itttt	eq
 8009798:	6819      	ldreq	r1, [r3, #0]
 800979a:	685b      	ldreq	r3, [r3, #4]
 800979c:	1809      	addeq	r1, r1, r0
 800979e:	6021      	streq	r1, [r4, #0]
 80097a0:	e7ed      	b.n	800977e <_free_r+0x1e>
 80097a2:	461a      	mov	r2, r3
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	b10b      	cbz	r3, 80097ac <_free_r+0x4c>
 80097a8:	42a3      	cmp	r3, r4
 80097aa:	d9fa      	bls.n	80097a2 <_free_r+0x42>
 80097ac:	6811      	ldr	r1, [r2, #0]
 80097ae:	1850      	adds	r0, r2, r1
 80097b0:	42a0      	cmp	r0, r4
 80097b2:	d10b      	bne.n	80097cc <_free_r+0x6c>
 80097b4:	6820      	ldr	r0, [r4, #0]
 80097b6:	4401      	add	r1, r0
 80097b8:	1850      	adds	r0, r2, r1
 80097ba:	4283      	cmp	r3, r0
 80097bc:	6011      	str	r1, [r2, #0]
 80097be:	d1e0      	bne.n	8009782 <_free_r+0x22>
 80097c0:	6818      	ldr	r0, [r3, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	6053      	str	r3, [r2, #4]
 80097c6:	4408      	add	r0, r1
 80097c8:	6010      	str	r0, [r2, #0]
 80097ca:	e7da      	b.n	8009782 <_free_r+0x22>
 80097cc:	d902      	bls.n	80097d4 <_free_r+0x74>
 80097ce:	230c      	movs	r3, #12
 80097d0:	602b      	str	r3, [r5, #0]
 80097d2:	e7d6      	b.n	8009782 <_free_r+0x22>
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	1821      	adds	r1, r4, r0
 80097d8:	428b      	cmp	r3, r1
 80097da:	bf04      	itt	eq
 80097dc:	6819      	ldreq	r1, [r3, #0]
 80097de:	685b      	ldreq	r3, [r3, #4]
 80097e0:	6063      	str	r3, [r4, #4]
 80097e2:	bf04      	itt	eq
 80097e4:	1809      	addeq	r1, r1, r0
 80097e6:	6021      	streq	r1, [r4, #0]
 80097e8:	6054      	str	r4, [r2, #4]
 80097ea:	e7ca      	b.n	8009782 <_free_r+0x22>
 80097ec:	bd38      	pop	{r3, r4, r5, pc}
 80097ee:	bf00      	nop
 80097f0:	20000944 	.word	0x20000944

080097f4 <_init>:
 80097f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f6:	bf00      	nop
 80097f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fa:	bc08      	pop	{r3}
 80097fc:	469e      	mov	lr, r3
 80097fe:	4770      	bx	lr

08009800 <_fini>:
 8009800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009802:	bf00      	nop
 8009804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009806:	bc08      	pop	{r3}
 8009808:	469e      	mov	lr, r3
 800980a:	4770      	bx	lr
