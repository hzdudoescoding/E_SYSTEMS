
STM32407G_UltraSonicTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a51c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a6a4  0800a6a4  0000b6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6c0  0800a6c0  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a6c0  0800a6c0  0000b6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6c8  0800a6c8  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6c8  0800a6c8  0000b6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a6cc  0800a6cc  0000b6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a6d0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000abc  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b38  20000b38  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019bfa  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dee  00000000  00000000  00025ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  00029a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118c  00000000  00000000  0002b148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243c6  00000000  00000000  0002c2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001daa8  00000000  00000000  0005069a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d417e  00000000  00000000  0006e142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001422c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063b0  00000000  00000000  00142304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  001486b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a68c 	.word	0x0800a68c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a68c 	.word	0x0800a68c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	 HAL_Init();
 80004f8:	f000 fe22 	bl	8001140 <HAL_Init>
	  SystemClock_Config();
 80004fc:	f000 f82c 	bl	8000558 <SystemClock_Config>

	  MX_GPIO_Init();
 8000500:	f000 fa24 	bl	800094c <MX_GPIO_Init>
	  MX_TIM8_Init();
 8000504:	f000 f926 	bl	8000754 <MX_TIM8_Init>
	  MX_TIM9_Init();
 8000508:	f000 f9c4 	bl	8000894 <MX_TIM9_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fe18 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f822 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fa1a 	bl	800094c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000518:	f000 f888 	bl	800062c <MX_I2C1_Init>
  MX_I2S3_Init();
 800051c:	f000 f8b4 	bl	8000688 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000520:	f000 f8e2 	bl	80006e8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000524:	f009 fc5c 	bl	8009de0 <MX_USB_HOST_Init>
  MX_TIM8_Init();
 8000528:	f000 f914 	bl	8000754 <MX_TIM8_Init>
  MX_TIM9_Init();
 800052c:	f000 f9b2 	bl	8000894 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000530:	2100      	movs	r1, #0
 8000532:	4807      	ldr	r0, [pc, #28]	@ (8000550 <main+0x5c>)
 8000534:	f004 ff72 	bl	800541c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1);
 8000538:	2100      	movs	r1, #0
 800053a:	4806      	ldr	r0, [pc, #24]	@ (8000554 <main+0x60>)
 800053c:	f005 f890 	bl	8005660 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8000540:	2064      	movs	r0, #100	@ 0x64
 8000542:	f000 fe6f 	bl	8001224 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000546:	f009 fc71 	bl	8009e2c <MX_USB_HOST_Process>
	  HAL_Delay(100);
 800054a:	bf00      	nop
 800054c:	e7f8      	b.n	8000540 <main+0x4c>
 800054e:	bf00      	nop
 8000550:	2000018c 	.word	0x2000018c
 8000554:	200001d4 	.word	0x200001d4

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	@ 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f00a f802 	bl	800a570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	4a27      	ldr	r2, [pc, #156]	@ (8000624 <SystemClock_Config+0xcc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	@ 0x40
 800058c:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a21      	ldr	r2, [pc, #132]	@ (8000628 <SystemClock_Config+0xd0>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 f824 	bl	800462c <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ea:	f000 fb15 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2105      	movs	r1, #5
 800060c:	4618      	mov	r0, r3
 800060e:	f004 fa85 	bl	8004b1c <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000618:	f000 fafe 	bl	8000c18 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	@ 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	@ (800067c <MX_I2C1_Init+0x50>)
 800066a:	f003 f9fb 	bl	8003a64 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 fad0 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000098 	.word	0x20000098
 8000680:	40005400 	.word	0x40005400
 8000684:	000186a0 	.word	0x000186a0

08000688 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800068c:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_I2S3_Init+0x54>)
 800068e:	4a14      	ldr	r2, [pc, #80]	@ (80006e0 <MX_I2S3_Init+0x58>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_I2S3_Init+0x54>)
 8000694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000698:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <MX_I2S3_Init+0x54>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006b0:	4a0c      	ldr	r2, [pc, #48]	@ (80006e4 <MX_I2S3_Init+0x5c>)
 80006b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_I2S3_Init+0x54>)
 80006c8:	f003 fb10 	bl	8003cec <HAL_I2S_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006d2:	f000 faa1 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000ec 	.word	0x200000ec
 80006e0:	40003c00 	.word	0x40003c00
 80006e4:	00017700 	.word	0x00017700

080006e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ec:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_SPI1_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	@ (8000750 <MX_SPI1_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f2:	4b16      	ldr	r3, [pc, #88]	@ (800074c <MX_SPI1_Init+0x64>)
 80006f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_SPI1_Init+0x64>)
 8000714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000718:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_SPI1_Init+0x64>)
 8000734:	220a      	movs	r2, #10
 8000736:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_SPI1_Init+0x64>)
 800073a:	f004 fd3d 	bl	80051b8 <HAL_SPI_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 fa68 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000134 	.word	0x20000134
 8000750:	40013000 	.word	0x40013000

08000754 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b096      	sub	sp, #88	@ 0x58
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2220      	movs	r2, #32
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f009 feef 	bl	800a570 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000792:	4b3e      	ldr	r3, [pc, #248]	@ (800088c <MX_TIM8_Init+0x138>)
 8000794:	4a3e      	ldr	r2, [pc, #248]	@ (8000890 <MX_TIM8_Init+0x13c>)
 8000796:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8000798:	4b3c      	ldr	r3, [pc, #240]	@ (800088c <MX_TIM8_Init+0x138>)
 800079a:	22a7      	movs	r2, #167	@ 0xa7
 800079c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b3b      	ldr	r3, [pc, #236]	@ (800088c <MX_TIM8_Init+0x138>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 60000;
 80007a4:	4b39      	ldr	r3, [pc, #228]	@ (800088c <MX_TIM8_Init+0x138>)
 80007a6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80007aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b37      	ldr	r3, [pc, #220]	@ (800088c <MX_TIM8_Init+0x138>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80007b2:	4b36      	ldr	r3, [pc, #216]	@ (800088c <MX_TIM8_Init+0x138>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b34      	ldr	r3, [pc, #208]	@ (800088c <MX_TIM8_Init+0x138>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80007be:	4833      	ldr	r0, [pc, #204]	@ (800088c <MX_TIM8_Init+0x138>)
 80007c0:	f004 fd83 	bl	80052ca <HAL_TIM_Base_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80007ca:	f000 fa25 	bl	8000c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80007d4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007d8:	4619      	mov	r1, r3
 80007da:	482c      	ldr	r0, [pc, #176]	@ (800088c <MX_TIM8_Init+0x138>)
 80007dc:	f005 fab6 	bl	8005d4c <HAL_TIM_ConfigClockSource>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80007e6:	f000 fa17 	bl	8000c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80007ea:	4828      	ldr	r0, [pc, #160]	@ (800088c <MX_TIM8_Init+0x138>)
 80007ec:	f004 fdbc 	bl	8005368 <HAL_TIM_PWM_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80007f6:	f000 fa0f 	bl	8000c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000802:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000806:	4619      	mov	r1, r3
 8000808:	4820      	ldr	r0, [pc, #128]	@ (800088c <MX_TIM8_Init+0x138>)
 800080a:	f006 f819 	bl	8006840 <HAL_TIMEx_MasterConfigSynchronization>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000814:	f000 fa00 	bl	8000c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000818:	2360      	movs	r3, #96	@ 0x60
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 800081c:	230a      	movs	r3, #10
 800081e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	4813      	ldr	r0, [pc, #76]	@ (800088c <MX_TIM8_Init+0x138>)
 800083e:	f005 f9c3 	bl	8005bc8 <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000848:	f000 f9e6 	bl	8000c18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000860:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000864:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4807      	ldr	r0, [pc, #28]	@ (800088c <MX_TIM8_Init+0x138>)
 8000870:	f006 f862 	bl	8006938 <HAL_TIMEx_ConfigBreakDeadTime>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800087a:	f000 f9cd 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800087e:	4803      	ldr	r0, [pc, #12]	@ (800088c <MX_TIM8_Init+0x138>)
 8000880:	f000 fb6e 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000884:	bf00      	nop
 8000886:	3758      	adds	r7, #88	@ 0x58
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000018c 	.word	0x2000018c
 8000890:	40010400 	.word	0x40010400

08000894 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0310 	add.w	r3, r7, #16
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80008b4:	4b23      	ldr	r3, [pc, #140]	@ (8000944 <MX_TIM9_Init+0xb0>)
 80008b6:	4a24      	ldr	r2, [pc, #144]	@ (8000948 <MX_TIM9_Init+0xb4>)
 80008b8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 80008ba:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <MX_TIM9_Init+0xb0>)
 80008bc:	22a7      	movs	r2, #167	@ 0xa7
 80008be:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c0:	4b20      	ldr	r3, [pc, #128]	@ (8000944 <MX_TIM9_Init+0xb0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80008c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_TIM9_Init+0xb0>)
 80008c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008cc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_TIM9_Init+0xb0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000944 <MX_TIM9_Init+0xb0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80008da:	481a      	ldr	r0, [pc, #104]	@ (8000944 <MX_TIM9_Init+0xb0>)
 80008dc:	f004 fcf5 	bl	80052ca <HAL_TIM_Base_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 80008e6:	f000 f997 	bl	8000c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4619      	mov	r1, r3
 80008f6:	4813      	ldr	r0, [pc, #76]	@ (8000944 <MX_TIM9_Init+0xb0>)
 80008f8:	f005 fa28 	bl	8005d4c <HAL_TIM_ConfigClockSource>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8000902:	f000 f989 	bl	8000c18 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8000906:	480f      	ldr	r0, [pc, #60]	@ (8000944 <MX_TIM9_Init+0xb0>)
 8000908:	f004 fe50 	bl	80055ac <HAL_TIM_IC_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 8000912:	f000 f981 	bl	8000c18 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000916:	230a      	movs	r3, #10
 8000918:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800091a:	2301      	movs	r3, #1
 800091c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000926:	463b      	mov	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_TIM9_Init+0xb0>)
 800092e:	f005 f8af 	bl	8005a90 <HAL_TIM_IC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 8000938:	f000 f96e 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3720      	adds	r7, #32
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200001d4 	.word	0x200001d4
 8000948:	40014000 	.word	0x40014000

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	@ 0x30
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	4b78      	ldr	r3, [pc, #480]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a77      	ldr	r2, [pc, #476]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b75      	ldr	r3, [pc, #468]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0310 	and.w	r3, r3, #16
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	4b71      	ldr	r3, [pc, #452]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a70      	ldr	r2, [pc, #448]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b6e      	ldr	r3, [pc, #440]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b6a      	ldr	r3, [pc, #424]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a69      	ldr	r2, [pc, #420]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b67      	ldr	r3, [pc, #412]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b63      	ldr	r3, [pc, #396]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a62      	ldr	r2, [pc, #392]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b60      	ldr	r3, [pc, #384]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b5c      	ldr	r3, [pc, #368]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a5b      	ldr	r2, [pc, #364]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b59      	ldr	r3, [pc, #356]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b55      	ldr	r3, [pc, #340]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a54      	ldr	r2, [pc, #336]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b52      	ldr	r3, [pc, #328]	@ (8000b48 <MX_GPIO_Init+0x1fc>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	484f      	ldr	r0, [pc, #316]	@ (8000b4c <MX_GPIO_Init+0x200>)
 8000a10:	f000 feda 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2101      	movs	r1, #1
 8000a18:	484d      	ldr	r0, [pc, #308]	@ (8000b50 <MX_GPIO_Init+0x204>)
 8000a1a:	f000 fed5 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a24:	484b      	ldr	r0, [pc, #300]	@ (8000b54 <MX_GPIO_Init+0x208>)
 8000a26:	f000 fecf 	bl	80017c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4842      	ldr	r0, [pc, #264]	@ (8000b4c <MX_GPIO_Init+0x200>)
 8000a42:	f000 fd25 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	483c      	ldr	r0, [pc, #240]	@ (8000b50 <MX_GPIO_Init+0x204>)
 8000a5e:	f000 fd17 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a62:	2308      	movs	r3, #8
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a72:	2305      	movs	r3, #5
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4834      	ldr	r0, [pc, #208]	@ (8000b50 <MX_GPIO_Init+0x204>)
 8000a7e:	f000 fd07 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a86:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4830      	ldr	r0, [pc, #192]	@ (8000b58 <MX_GPIO_Init+0x20c>)
 8000a98:	f000 fcfa 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	482b      	ldr	r0, [pc, #172]	@ (8000b5c <MX_GPIO_Init+0x210>)
 8000ab0:	f000 fcee 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4822      	ldr	r0, [pc, #136]	@ (8000b5c <MX_GPIO_Init+0x210>)
 8000ad2:	f000 fcdd 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : button1_Pin */
  GPIO_InitStruct.Pin = button1_Pin;
 8000ad6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(button1_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481a      	ldr	r0, [pc, #104]	@ (8000b54 <MX_GPIO_Init+0x208>)
 8000aec:	f000 fcd0 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000af0:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000af4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4812      	ldr	r0, [pc, #72]	@ (8000b54 <MX_GPIO_Init+0x208>)
 8000b0a:	f000 fcc1 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b0e:	2320      	movs	r3, #32
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <MX_GPIO_Init+0x208>)
 8000b22:	f000 fcb5 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b2a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <MX_GPIO_Init+0x200>)
 8000b3c:	f000 fca8 	bl	8001490 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b40:	bf00      	nop
 8000b42:	3730      	adds	r7, #48	@ 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40020c00 	.word	0x40020c00
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020400 	.word	0x40020400

08000b60 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM9 &&
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a24      	ldr	r2, [pc, #144]	@ (8000c00 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d142      	bne.n	8000bf8 <HAL_TIM_IC_CaptureCallback+0x98>
      htim->Channel  == HAL_TIM_ACTIVE_CHANNEL_1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	7f1b      	ldrb	r3, [r3, #28]
  if (htim->Instance == TIM9 &&
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d13e      	bne.n	8000bf8 <HAL_TIM_IC_CaptureCallback+0x98>
  {
    if (edge_idx == 0)               /* rising edge */
 8000b7a:	4b22      	ldr	r3, [pc, #136]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10a      	bne.n	8000b9a <HAL_TIM_IC_CaptureCallback+0x3a>
    {
      ic_val1  = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b84:	2100      	movs	r1, #0
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f005 f9a8 	bl	8005edc <HAL_TIM_ReadCapturedValue>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000b90:	6013      	str	r3, [r2, #0]
      edge_idx = 1;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]

      edge_idx = 0;
      __HAL_TIM_SET_COUNTER(htim, 0);         /* ready for next shot */
    }
  }
}
 8000b98:	e02e      	b.n	8000bf8 <HAL_TIM_IC_CaptureCallback+0x98>
      ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f005 f99d 	bl	8005edc <HAL_TIM_ReadCapturedValue>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0xac>)
 8000ba6:	6013      	str	r3, [r2, #0]
      uint32_t pulse_us = (ic_val2 >= ic_val1) ?
 8000ba8:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0xac>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
                          (ic_val2 - ic_val1) :
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d305      	bcc.n	8000bc0 <HAL_TIM_IC_CaptureCallback+0x60>
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0xac>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	e007      	b.n	8000bd0 <HAL_TIM_IC_CaptureCallback+0x70>
                          ((0xFFFF - ic_val1) + ic_val2); /* wrap‑around */
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <HAL_TIM_IC_CaptureCallback+0xac>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	1ad3      	subs	r3, r2, r3
                          (ic_val2 - ic_val1) :
 8000bca:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000bce:	33ff      	adds	r3, #255	@ 0xff
      uint32_t pulse_us = (ic_val2 >= ic_val1) ?
 8000bd0:	60fb      	str	r3, [r7, #12]
      distance_cm = (float)pulse_us / 58.0f;  /* HC‑SR04 formula */
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bdc:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000c10 <HAL_TIM_IC_CaptureCallback+0xb0>
 8000be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000be4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000be6:	edc3 7a00 	vstr	s15, [r3]
      edge_idx = 0;
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_COUNTER(htim, 0);         /* ready for next shot */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40014000 	.word	0x40014000
 8000c04:	20000224 	.word	0x20000224
 8000c08:	2000021c 	.word	0x2000021c
 8000c0c:	20000220 	.word	0x20000220
 8000c10:	42680000 	.word	0x42680000
 8000c14:	20000228 	.word	0x20000228

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <Error_Handler+0x8>

08000c24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	4a0f      	ldr	r2, [pc, #60]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a08      	ldr	r2, [pc, #32]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c62:	2007      	movs	r0, #7
 8000c64:	f000 fbd2 	bl	800140c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a19      	ldr	r2, [pc, #100]	@ (8000cf8 <HAL_I2C_MspInit+0x84>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12c      	bne.n	8000cf0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <HAL_I2C_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a17      	ldr	r2, [pc, #92]	@ (8000cfc <HAL_I2C_MspInit+0x88>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <HAL_I2C_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cb2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb8:	2312      	movs	r3, #18
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <HAL_I2C_MspInit+0x8c>)
 8000cd0:	f000 fbde 	bl	8001490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <HAL_I2C_MspInit+0x88>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	4a07      	ldr	r2, [pc, #28]	@ (8000cfc <HAL_I2C_MspInit+0x88>)
 8000cde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ce2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_I2C_MspInit+0x88>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	@ 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020400 	.word	0x40020400

08000d04 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	@ 0x38
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a31      	ldr	r2, [pc, #196]	@ (8000df4 <HAL_I2S_MspInit+0xf0>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d15a      	bne.n	8000dea <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d34:	2301      	movs	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d38:	23c0      	movs	r3, #192	@ 0xc0
 8000d3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4618      	mov	r0, r3
 8000d46:	f004 f8f5 	bl	8004f34 <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d50:	f7ff ff62 	bl	8000c18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	4b27      	ldr	r3, [pc, #156]	@ (8000df8 <HAL_I2S_MspInit+0xf4>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	4a26      	ldr	r2, [pc, #152]	@ (8000df8 <HAL_I2S_MspInit+0xf4>)
 8000d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d64:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <HAL_I2S_MspInit+0xf4>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	4b20      	ldr	r3, [pc, #128]	@ (8000df8 <HAL_I2S_MspInit+0xf4>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d78:	4a1f      	ldr	r2, [pc, #124]	@ (8000df8 <HAL_I2S_MspInit+0xf4>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d80:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <HAL_I2S_MspInit+0xf4>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <HAL_I2S_MspInit+0xf4>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d94:	4a18      	ldr	r2, [pc, #96]	@ (8000df8 <HAL_I2S_MspInit+0xf4>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9c:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <HAL_I2S_MspInit+0xf4>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000da8:	2310      	movs	r3, #16
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db8:	2306      	movs	r3, #6
 8000dba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480e      	ldr	r0, [pc, #56]	@ (8000dfc <HAL_I2S_MspInit+0xf8>)
 8000dc4:	f000 fb64 	bl	8001490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dc8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dda:	2306      	movs	r3, #6
 8000ddc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <HAL_I2S_MspInit+0xfc>)
 8000de6:	f000 fb53 	bl	8001490 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000dea:	bf00      	nop
 8000dec:	3738      	adds	r7, #56	@ 0x38
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40003c00 	.word	0x40003c00
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020800 	.word	0x40020800

08000e04 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	@ 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <HAL_SPI_MspInit+0x84>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12b      	bne.n	8000e7e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_SPI_MspInit+0x88>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	4a17      	ldr	r2, [pc, #92]	@ (8000e8c <HAL_SPI_MspInit+0x88>)
 8000e30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_SPI_MspInit+0x88>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <HAL_SPI_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a10      	ldr	r2, [pc, #64]	@ (8000e8c <HAL_SPI_MspInit+0x88>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <HAL_SPI_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e5e:	23e0      	movs	r3, #224	@ 0xe0
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e6e:	2305      	movs	r3, #5
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <HAL_SPI_MspInit+0x8c>)
 8000e7a:	f000 fb09 	bl	8001490 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	@ 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40013000 	.word	0x40013000
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000

08000e94 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	@ 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a27      	ldr	r2, [pc, #156]	@ (8000f50 <HAL_TIM_Base_MspInit+0xbc>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d10e      	bne.n	8000ed4 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <HAL_TIM_Base_MspInit+0xc0>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	4a25      	ldr	r2, [pc, #148]	@ (8000f54 <HAL_TIM_Base_MspInit+0xc0>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec6:	4b23      	ldr	r3, [pc, #140]	@ (8000f54 <HAL_TIM_Base_MspInit+0xc0>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM9_MspInit 1 */

    /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000ed2:	e038      	b.n	8000f46 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM9)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f58 <HAL_TIM_Base_MspInit+0xc4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d133      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <HAL_TIM_Base_MspInit+0xc0>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f54 <HAL_TIM_Base_MspInit+0xc0>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eee:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <HAL_TIM_Base_MspInit+0xc0>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <HAL_TIM_Base_MspInit+0xc0>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <HAL_TIM_Base_MspInit+0xc0>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_TIM_Base_MspInit+0xc0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f16:	2320      	movs	r3, #32
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000f26:	2303      	movs	r3, #3
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <HAL_TIM_Base_MspInit+0xc8>)
 8000f32:	f000 faad 	bl	8001490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2018      	movs	r0, #24
 8000f3c:	f000 fa71 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000f40:	2018      	movs	r0, #24
 8000f42:	f000 fa8a 	bl	800145a <HAL_NVIC_EnableIRQ>
}
 8000f46:	bf00      	nop
 8000f48:	3728      	adds	r7, #40	@ 0x28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40010400 	.word	0x40010400
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40014000 	.word	0x40014000
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a12      	ldr	r2, [pc, #72]	@ (8000fc8 <HAL_TIM_MspPostInit+0x68>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d11d      	bne.n	8000fbe <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <HAL_TIM_MspPostInit+0x6c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a10      	ldr	r2, [pc, #64]	@ (8000fcc <HAL_TIM_MspPostInit+0x6c>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_TIM_MspPostInit+0x6c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f9e:	2340      	movs	r3, #64	@ 0x40
 8000fa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <HAL_TIM_MspPostInit+0x70>)
 8000fba:	f000 fa69 	bl	8001490 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3720      	adds	r7, #32
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40010400 	.word	0x40010400
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020800 	.word	0x40020800

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <NMI_Handler+0x4>

08000fdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102a:	f000 f8db 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800103a:	f004 fc39 	bl	80058b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200001d4 	.word	0x200001d4

08001048 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <OTG_FS_IRQHandler+0x10>)
 800104e:	f000 feb5 	bl	8001dbc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000610 	.word	0x20000610

0800105c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001064:	4a14      	ldr	r2, [pc, #80]	@ (80010b8 <_sbrk+0x5c>)
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <_sbrk+0x60>)
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001070:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <_sbrk+0x64>)
 800107a:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <_sbrk+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800108c:	f009 fa88 	bl	800a5a0 <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	220c      	movs	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e009      	b.n	80010b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a2:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <_sbrk+0x64>)
 80010ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20020000 	.word	0x20020000
 80010bc:	00000400 	.word	0x00000400
 80010c0:	2000022c 	.word	0x2000022c
 80010c4:	20000b38 	.word	0x20000b38

080010c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <SystemInit+0x20>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d2:	4a05      	ldr	r2, [pc, #20]	@ (80010e8 <SystemInit+0x20>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001124 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010f0:	f7ff ffea 	bl	80010c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	@ (8001128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	@ (800112c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	@ (8001138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111a:	f009 fa47 	bl	800a5ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111e:	f7ff f9e9 	bl	80004f4 <main>
  bx  lr    
 8001122:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001124:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001130:	0800a6d0 	.word	0x0800a6d0
  ldr r2, =_sbss
 8001134:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001138:	20000b38 	.word	0x20000b38

0800113c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC_IRQHandler>
	...

08001140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <HAL_Init+0x40>)
 800114a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800114e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <HAL_Init+0x40>)
 8001156:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800115a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a07      	ldr	r2, [pc, #28]	@ (8001180 <HAL_Init+0x40>)
 8001162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001168:	2003      	movs	r0, #3
 800116a:	f000 f94f 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116e:	2000      	movs	r0, #0
 8001170:	f000 f808 	bl	8001184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001174:	f7ff fd56 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023c00 	.word	0x40023c00

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <HAL_InitTick+0x54>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <HAL_InitTick+0x58>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f967 	bl	8001476 <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00e      	b.n	80011d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	d80a      	bhi.n	80011ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f000 f92f 	bl	8001422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4a06      	ldr	r2, [pc, #24]	@ (80011e0 <HAL_InitTick+0x5c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	20000230 	.word	0x20000230

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000230 	.word	0x20000230

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff ffee 	bl	800120c <HAL_GetTick>
 8001230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123c:	d005      	beq.n	800124a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_Delay+0x44>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124a:	bf00      	nop
 800124c:	f7ff ffde 	bl	800120c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	d8f7      	bhi.n	800124c <HAL_Delay+0x28>
  {
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008

0800126c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001294:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800129c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129e:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	60d3      	str	r3, [r2, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <__NVIC_GetPriorityGrouping+0x18>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 0307 	and.w	r3, r3, #7
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db0b      	blt.n	80012fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 021f 	and.w	r2, r3, #31
 80012e8:	4907      	ldr	r1, [pc, #28]	@ (8001308 <__NVIC_EnableIRQ+0x38>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	2001      	movs	r0, #1
 80012f2:	fa00 f202 	lsl.w	r2, r0, r2
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000e100 	.word	0xe000e100

0800130c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db0a      	blt.n	8001336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	490c      	ldr	r1, [pc, #48]	@ (8001358 <__NVIC_SetPriority+0x4c>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	0112      	lsls	r2, r2, #4
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	440b      	add	r3, r1
 8001330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001334:	e00a      	b.n	800134c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4908      	ldr	r1, [pc, #32]	@ (800135c <__NVIC_SetPriority+0x50>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	3b04      	subs	r3, #4
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	440b      	add	r3, r1
 800134a:	761a      	strb	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	@ 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f1c3 0307 	rsb	r3, r3, #7
 800137a:	2b04      	cmp	r3, #4
 800137c:	bf28      	it	cs
 800137e:	2304      	movcs	r3, #4
 8001380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3304      	adds	r3, #4
 8001386:	2b06      	cmp	r3, #6
 8001388:	d902      	bls.n	8001390 <NVIC_EncodePriority+0x30>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3b03      	subs	r3, #3
 800138e:	e000      	b.n	8001392 <NVIC_EncodePriority+0x32>
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	f04f 32ff 	mov.w	r2, #4294967295
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43da      	mvns	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	401a      	ands	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	43d9      	mvns	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	4313      	orrs	r3, r2
         );
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3724      	adds	r7, #36	@ 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f7ff ff8e 	bl	800130c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff29 	bl	800126c <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001434:	f7ff ff3e 	bl	80012b4 <__NVIC_GetPriorityGrouping>
 8001438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff ff8e 	bl	8001360 <NVIC_EncodePriority>
 8001444:	4602      	mov	r2, r0
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff5d 	bl	800130c <__NVIC_SetPriority>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff31 	bl	80012d0 <__NVIC_EnableIRQ>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ffa2 	bl	80013c8 <SysTick_Config>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	e16b      	b.n	8001784 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014ac:	2201      	movs	r2, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	f040 815a 	bne.w	800177e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d005      	beq.n	80014e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d130      	bne.n	8001544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	f003 0201 	and.w	r2, r3, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b03      	cmp	r3, #3
 800154e:	d017      	beq.n	8001580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d123      	bne.n	80015d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	08da      	lsrs	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3208      	adds	r2, #8
 8001594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	220f      	movs	r2, #15
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	08da      	lsrs	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3208      	adds	r2, #8
 80015ce:	69b9      	ldr	r1, [r7, #24]
 80015d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0203 	and.w	r2, r3, #3
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80b4 	beq.w	800177e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b60      	ldr	r3, [pc, #384]	@ (800179c <HAL_GPIO_Init+0x30c>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	4a5f      	ldr	r2, [pc, #380]	@ (800179c <HAL_GPIO_Init+0x30c>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001624:	6453      	str	r3, [r2, #68]	@ 0x44
 8001626:	4b5d      	ldr	r3, [pc, #372]	@ (800179c <HAL_GPIO_Init+0x30c>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001632:	4a5b      	ldr	r2, [pc, #364]	@ (80017a0 <HAL_GPIO_Init+0x310>)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a52      	ldr	r2, [pc, #328]	@ (80017a4 <HAL_GPIO_Init+0x314>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d02b      	beq.n	80016b6 <HAL_GPIO_Init+0x226>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a51      	ldr	r2, [pc, #324]	@ (80017a8 <HAL_GPIO_Init+0x318>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d025      	beq.n	80016b2 <HAL_GPIO_Init+0x222>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a50      	ldr	r2, [pc, #320]	@ (80017ac <HAL_GPIO_Init+0x31c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d01f      	beq.n	80016ae <HAL_GPIO_Init+0x21e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4f      	ldr	r2, [pc, #316]	@ (80017b0 <HAL_GPIO_Init+0x320>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <HAL_GPIO_Init+0x21a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x216>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4d      	ldr	r2, [pc, #308]	@ (80017b8 <HAL_GPIO_Init+0x328>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x212>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4c      	ldr	r2, [pc, #304]	@ (80017bc <HAL_GPIO_Init+0x32c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x20e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4b      	ldr	r2, [pc, #300]	@ (80017c0 <HAL_GPIO_Init+0x330>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x20a>
 8001696:	2307      	movs	r3, #7
 8001698:	e00e      	b.n	80016b8 <HAL_GPIO_Init+0x228>
 800169a:	2308      	movs	r3, #8
 800169c:	e00c      	b.n	80016b8 <HAL_GPIO_Init+0x228>
 800169e:	2306      	movs	r3, #6
 80016a0:	e00a      	b.n	80016b8 <HAL_GPIO_Init+0x228>
 80016a2:	2305      	movs	r3, #5
 80016a4:	e008      	b.n	80016b8 <HAL_GPIO_Init+0x228>
 80016a6:	2304      	movs	r3, #4
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x228>
 80016aa:	2303      	movs	r3, #3
 80016ac:	e004      	b.n	80016b8 <HAL_GPIO_Init+0x228>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e002      	b.n	80016b8 <HAL_GPIO_Init+0x228>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_GPIO_Init+0x228>
 80016b6:	2300      	movs	r3, #0
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	f002 0203 	and.w	r2, r2, #3
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	4093      	lsls	r3, r2
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c8:	4935      	ldr	r1, [pc, #212]	@ (80017a0 <HAL_GPIO_Init+0x310>)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d6:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <HAL_GPIO_Init+0x334>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fa:	4a32      	ldr	r2, [pc, #200]	@ (80017c4 <HAL_GPIO_Init+0x334>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001700:	4b30      	ldr	r3, [pc, #192]	@ (80017c4 <HAL_GPIO_Init+0x334>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001724:	4a27      	ldr	r2, [pc, #156]	@ (80017c4 <HAL_GPIO_Init+0x334>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800172a:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <HAL_GPIO_Init+0x334>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174e:	4a1d      	ldr	r2, [pc, #116]	@ (80017c4 <HAL_GPIO_Init+0x334>)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001754:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <HAL_GPIO_Init+0x334>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001778:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <HAL_GPIO_Init+0x334>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3301      	adds	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b0f      	cmp	r3, #15
 8001788:	f67f ae90 	bls.w	80014ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3724      	adds	r7, #36	@ 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40013800 	.word	0x40013800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40020c00 	.word	0x40020c00
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40021400 	.word	0x40021400
 80017bc:	40021800 	.word	0x40021800
 80017c0:	40021c00 	.word	0x40021c00
 80017c4:	40013c00 	.word	0x40013c00

080017c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
 80017d4:	4613      	mov	r3, r2
 80017d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e4:	e003      	b.n	80017ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	041a      	lsls	r2, r3, #16
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	619a      	str	r2, [r3, #24]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af02      	add	r7, sp, #8
 8001800:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e059      	b.n	80018c0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f008 fb38 	bl	8009e9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2203      	movs	r2, #3
 8001830:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800183a:	d102      	bne.n	8001842 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f005 f951 	bl	8006aee <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	7c1a      	ldrb	r2, [r3, #16]
 8001854:	f88d 2000 	strb.w	r2, [sp]
 8001858:	3304      	adds	r3, #4
 800185a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800185c:	f005 f8d2 	bl	8006a04 <USB_CoreInit>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2202      	movs	r2, #2
 800186a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e026      	b.n	80018c0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2101      	movs	r1, #1
 8001878:	4618      	mov	r0, r3
 800187a:	f005 f949 	bl	8006b10 <USB_SetCurrentMode>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e017      	b.n	80018c0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7c1a      	ldrb	r2, [r3, #16]
 8001898:	f88d 2000 	strb.w	r2, [sp]
 800189c:	3304      	adds	r3, #4
 800189e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a0:	f005 faec 	bl	8006e7c <USB_HostInit>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2202      	movs	r2, #2
 80018ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e004      	b.n	80018c0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b08b      	sub	sp, #44	@ 0x2c
 80018cc:	af04      	add	r7, sp, #16
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	4608      	mov	r0, r1
 80018d2:	4611      	mov	r1, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	70fb      	strb	r3, [r7, #3]
 80018da:	460b      	mov	r3, r1
 80018dc:	70bb      	strb	r3, [r7, #2]
 80018de:	4613      	mov	r3, r2
 80018e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80018e2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80018e4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <HAL_HCD_HC_Init+0x2c>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e09d      	b.n	8001a30 <HAL_HCD_HC_Init+0x168>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	3319      	adds	r3, #25
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	1a9b      	subs	r3, r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	3314      	adds	r3, #20
 8001920:	787a      	ldrb	r2, [r7, #1]
 8001922:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3315      	adds	r3, #21
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	3326      	adds	r3, #38	@ 0x26
 8001948:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800194c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800194e:	78fa      	ldrb	r2, [r7, #3]
 8001950:	78bb      	ldrb	r3, [r7, #2]
 8001952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001956:	b2d8      	uxtb	r0, r3
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	3316      	adds	r3, #22
 8001966:	4602      	mov	r2, r0
 8001968:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	4619      	mov	r1, r3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fbc8 	bl	8002104 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001974:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001978:	2b00      	cmp	r3, #0
 800197a:	da0a      	bge.n	8001992 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	3317      	adds	r3, #23
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	e009      	b.n	80019a6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	3317      	adds	r3, #23
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f005 fbca 	bl	8007144 <USB_GetHostSpeed>
 80019b0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80019b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d10b      	bne.n	80019d2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80019ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d107      	bne.n	80019d2 <HAL_HCD_HC_Init+0x10a>
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d104      	bne.n	80019d2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2bbc      	cmp	r3, #188	@ 0xbc
 80019cc:	d901      	bls.n	80019d2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80019ce:	23bc      	movs	r3, #188	@ 0xbc
 80019d0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	1a9b      	subs	r3, r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	3318      	adds	r3, #24
 80019e2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80019e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	b298      	uxth	r0, r3
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	3328      	adds	r3, #40	@ 0x28
 80019fc:	4602      	mov	r2, r0
 80019fe:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	787c      	ldrb	r4, [r7, #1]
 8001a0a:	78ba      	ldrb	r2, [r7, #2]
 8001a0c:	78f9      	ldrb	r1, [r7, #3]
 8001a0e:	9302      	str	r3, [sp, #8]
 8001a10:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	4623      	mov	r3, r4
 8001a1e:	f005 fbb9 	bl	8007194 <USB_HC_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd90      	pop	{r4, r7, pc}

08001a38 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_HCD_HC_Halt+0x1e>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e00f      	b.n	8001a76 <HAL_HCD_HC_Halt+0x3e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	78fa      	ldrb	r2, [r7, #3]
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f005 ff4b 	bl	8007902 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	70fb      	strb	r3, [r7, #3]
 8001a92:	460b      	mov	r3, r1
 8001a94:	70bb      	strb	r3, [r7, #2]
 8001a96:	4613      	mov	r3, r2
 8001a98:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3317      	adds	r3, #23
 8001aaa:	78ba      	ldrb	r2, [r7, #2]
 8001aac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001aae:	78fa      	ldrb	r2, [r7, #3]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	3326      	adds	r3, #38	@ 0x26
 8001abe:	787a      	ldrb	r2, [r7, #1]
 8001ac0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001ac2:	7c3b      	ldrb	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d114      	bne.n	8001af2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	332a      	adds	r3, #42	@ 0x2a
 8001ad8:	2203      	movs	r2, #3
 8001ada:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	3319      	adds	r3, #25
 8001aec:	7f3a      	ldrb	r2, [r7, #28]
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	e009      	b.n	8001b06 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001af2:	78fa      	ldrb	r2, [r7, #3]
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	332a      	adds	r3, #42	@ 0x2a
 8001b02:	2202      	movs	r2, #2
 8001b04:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b06:	787b      	ldrb	r3, [r7, #1]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	f200 8102 	bhi.w	8001d12 <HAL_HCD_HC_SubmitRequest+0x292>
 8001b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b14 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b14:	08001b25 	.word	0x08001b25
 8001b18:	08001cfd 	.word	0x08001cfd
 8001b1c:	08001be9 	.word	0x08001be9
 8001b20:	08001c73 	.word	0x08001c73
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001b24:	7c3b      	ldrb	r3, [r7, #16]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	f040 80f5 	bne.w	8001d16 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001b2c:	78bb      	ldrb	r3, [r7, #2]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d12d      	bne.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001b32:	8b3b      	ldrh	r3, [r7, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	333d      	adds	r3, #61	@ 0x3d
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b4c:	78fa      	ldrb	r2, [r7, #3]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	333d      	adds	r3, #61	@ 0x3d
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10a      	bne.n	8001b78 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	332a      	adds	r3, #42	@ 0x2a
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001b76:	e0ce      	b.n	8001d16 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	332a      	adds	r3, #42	@ 0x2a
 8001b88:	2202      	movs	r2, #2
 8001b8a:	701a      	strb	r2, [r3, #0]
      break;
 8001b8c:	e0c3      	b.n	8001d16 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	331a      	adds	r3, #26
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	f040 80b8 	bne.w	8001d16 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ba6:	78fa      	ldrb	r2, [r7, #3]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	333c      	adds	r3, #60	@ 0x3c
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10a      	bne.n	8001bd2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	332a      	adds	r3, #42	@ 0x2a
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
      break;
 8001bd0:	e0a1      	b.n	8001d16 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	332a      	adds	r3, #42	@ 0x2a
 8001be2:	2202      	movs	r2, #2
 8001be4:	701a      	strb	r2, [r3, #0]
      break;
 8001be6:	e096      	b.n	8001d16 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001be8:	78bb      	ldrb	r3, [r7, #2]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d120      	bne.n	8001c30 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	1a9b      	subs	r3, r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	333d      	adds	r3, #61	@ 0x3d
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	332a      	adds	r3, #42	@ 0x2a
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c18:	e07e      	b.n	8001d18 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c1a:	78fa      	ldrb	r2, [r7, #3]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	332a      	adds	r3, #42	@ 0x2a
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	701a      	strb	r2, [r3, #0]
      break;
 8001c2e:	e073      	b.n	8001d18 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	333c      	adds	r3, #60	@ 0x3c
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10a      	bne.n	8001c5c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c46:	78fa      	ldrb	r2, [r7, #3]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	332a      	adds	r3, #42	@ 0x2a
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
      break;
 8001c5a:	e05d      	b.n	8001d18 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	332a      	adds	r3, #42	@ 0x2a
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	701a      	strb	r2, [r3, #0]
      break;
 8001c70:	e052      	b.n	8001d18 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c72:	78bb      	ldrb	r3, [r7, #2]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d120      	bne.n	8001cba <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	333d      	adds	r3, #61	@ 0x3d
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10a      	bne.n	8001ca4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	332a      	adds	r3, #42	@ 0x2a
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ca2:	e039      	b.n	8001d18 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	332a      	adds	r3, #42	@ 0x2a
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	701a      	strb	r2, [r3, #0]
      break;
 8001cb8:	e02e      	b.n	8001d18 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	333c      	adds	r3, #60	@ 0x3c
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10a      	bne.n	8001ce6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	332a      	adds	r3, #42	@ 0x2a
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
      break;
 8001ce4:	e018      	b.n	8001d18 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	332a      	adds	r3, #42	@ 0x2a
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	701a      	strb	r2, [r3, #0]
      break;
 8001cfa:	e00d      	b.n	8001d18 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	332a      	adds	r3, #42	@ 0x2a
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
      break;
 8001d10:	e002      	b.n	8001d18 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001d12:	bf00      	nop
 8001d14:	e000      	b.n	8001d18 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001d16:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	332c      	adds	r3, #44	@ 0x2c
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d2c:	78fa      	ldrb	r2, [r7, #3]
 8001d2e:	8b39      	ldrh	r1, [r7, #24]
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4403      	add	r3, r0
 8001d3c:	3334      	adds	r3, #52	@ 0x34
 8001d3e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	334c      	adds	r3, #76	@ 0x4c
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d54:	78fa      	ldrb	r2, [r7, #3]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	3338      	adds	r3, #56	@ 0x38
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	3315      	adds	r3, #21
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	334d      	adds	r3, #77	@ 0x4d
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	4613      	mov	r3, r2
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	1a9b      	subs	r3, r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	3310      	adds	r3, #16
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	1d19      	adds	r1, r3, #4
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	799b      	ldrb	r3, [r3, #6]
 8001daa:	461a      	mov	r2, r3
 8001dac:	f005 fb1e 	bl	80073ec <USB_HC_StartXfer>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop

08001dbc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f005 f812 	bl	8006dfc <USB_GetMode>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	f040 80fb 	bne.w	8001fd6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 ffd5 	bl	8006d94 <USB_ReadInterrupts>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80f1 	beq.w	8001fd4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 ffcc 	bl	8006d94 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e06:	d104      	bne.n	8001e12 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001e10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 ffbc 	bl	8006d94 <USB_ReadInterrupts>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e26:	d104      	bne.n	8001e32 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 ffac 	bl	8006d94 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001e46:	d104      	bne.n	8001e52 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f004 ff9c 	bl	8006d94 <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d103      	bne.n	8001e6e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 ff8e 	bl	8006d94 <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e82:	d120      	bne.n	8001ec6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001e8c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d113      	bne.n	8001ec6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e9e:	2110      	movs	r1, #16
 8001ea0:	6938      	ldr	r0, [r7, #16]
 8001ea2:	f004 fe81 	bl	8006ba8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ea6:	6938      	ldr	r0, [r7, #16]
 8001ea8:	f004 feb0 	bl	8006c0c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7a5b      	ldrb	r3, [r3, #9]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d105      	bne.n	8001ec0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 f8a2 	bl	8007004 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f008 f869 	bl	8009f98 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 ff62 	bl	8006d94 <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ed6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eda:	d102      	bne.n	8001ee2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f001 fd4d 	bl	800397c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 ff54 	bl	8006d94 <USB_ReadInterrupts>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d106      	bne.n	8001f04 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f008 f832 	bl	8009f60 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2208      	movs	r2, #8
 8001f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 ff43 	bl	8006d94 <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f18:	d139      	bne.n	8001f8e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f005 fcde 	bl	80078e0 <USB_HC_ReadInterrupt>
 8001f24:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e025      	b.n	8001f78 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d018      	beq.n	8001f72 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f56:	d106      	bne.n	8001f66 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f905 	bl	800216e <HCD_HC_IN_IRQHandler>
 8001f64:	e005      	b.n	8001f72 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 ff67 	bl	8002e40 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	795b      	ldrb	r3, [r3, #5]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d3d3      	bcc.n	8001f2c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f004 fefe 	bl	8006d94 <USB_ReadInterrupts>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d101      	bne.n	8001fa6 <HAL_HCD_IRQHandler+0x1ea>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_HCD_IRQHandler+0x1ec>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d014      	beq.n	8001fd6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0210 	bic.w	r2, r2, #16
 8001fba:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f001 fbfe 	bl	80037be <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0210 	orr.w	r2, r2, #16
 8001fd0:	619a      	str	r2, [r3, #24]
 8001fd2:	e000      	b.n	8001fd6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001fd4:	bf00      	nop
    }
  }
}
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_HCD_Start+0x16>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e013      	b.n	800201a <HAL_HCD_Start+0x3e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2101      	movs	r1, #1
 8002000:	4618      	mov	r0, r3
 8002002:	f005 f866 	bl	80070d2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f004 fd5e 	bl	8006acc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_HCD_Stop+0x16>
 8002034:	2302      	movs	r3, #2
 8002036:	e00d      	b.n	8002054 <HAL_HCD_Stop+0x32>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f005 fdb9 	bl	8007bbc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f005 f808 	bl	800707e <USB_ResetPort>
 800206e:	4603      	mov	r3, r0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002084:	78fa      	ldrb	r2, [r7, #3]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	334c      	adds	r3, #76	@ 0x4c
 8002094:	781b      	ldrb	r3, [r3, #0]
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	3338      	adds	r3, #56	@ 0x38
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f005 f84a 	bl	8007172 <USB_GetCurrentFrame>
 80020de:	4603      	mov	r3, r0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f005 f825 	bl	8007144 <USB_GetHostSpeed>
 80020fa:	4603      	mov	r3, r0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	331a      	adds	r3, #26
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	331b      	adds	r3, #27
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	3325      	adds	r3, #37	@ 0x25
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3324      	adds	r3, #36	@ 0x24
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f004 fe14 	bl	8006dba <USB_ReadChInterrupts>
 8002192:	4603      	mov	r3, r0
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b04      	cmp	r3, #4
 800219a:	d11a      	bne.n	80021d2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a8:	461a      	mov	r2, r3
 80021aa:	2304      	movs	r3, #4
 80021ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	334d      	adds	r3, #77	@ 0x4d
 80021be:	2207      	movs	r2, #7
 80021c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f005 fb99 	bl	8007902 <USB_HC_Halt>
 80021d0:	e09e      	b.n	8002310 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f004 fded 	bl	8006dba <USB_ReadChInterrupts>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ea:	d11b      	bne.n	8002224 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021f8:	461a      	mov	r2, r3
 80021fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	334d      	adds	r3, #77	@ 0x4d
 8002210:	2208      	movs	r2, #8
 8002212:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f005 fb70 	bl	8007902 <USB_HC_Halt>
 8002222:	e075      	b.n	8002310 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f004 fdc4 	bl	8006dba <USB_ReadChInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b08      	cmp	r3, #8
 800223a:	d11a      	bne.n	8002272 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002248:	461a      	mov	r2, r3
 800224a:	2308      	movs	r3, #8
 800224c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	334d      	adds	r3, #77	@ 0x4d
 800225e:	2206      	movs	r2, #6
 8002260:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f005 fb49 	bl	8007902 <USB_HC_Halt>
 8002270:	e04e      	b.n	8002310 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f004 fd9d 	bl	8006dba <USB_ReadChInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800228a:	d11b      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800229e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	334d      	adds	r3, #77	@ 0x4d
 80022b0:	2209      	movs	r2, #9
 80022b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f005 fb20 	bl	8007902 <USB_HC_Halt>
 80022c2:	e025      	b.n	8002310 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f004 fd74 	bl	8006dba <USB_ReadChInterrupts>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d8:	2b80      	cmp	r3, #128	@ 0x80
 80022da:	d119      	bne.n	8002310 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022e8:	461a      	mov	r2, r3
 80022ea:	2380      	movs	r3, #128	@ 0x80
 80022ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	334d      	adds	r3, #77	@ 0x4d
 80022fe:	2207      	movs	r2, #7
 8002300:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f005 faf9 	bl	8007902 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f004 fd4e 	bl	8006dba <USB_ReadChInterrupts>
 800231e:	4603      	mov	r3, r0
 8002320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002328:	d112      	bne.n	8002350 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f005 fae5 	bl	8007902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800234a:	6093      	str	r3, [r2, #8]
 800234c:	f000 bd75 	b.w	8002e3a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f004 fd2e 	bl	8006dba <USB_ReadChInterrupts>
 800235e:	4603      	mov	r3, r0
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	f040 8128 	bne.w	80025ba <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002376:	461a      	mov	r2, r3
 8002378:	2320      	movs	r3, #32
 800237a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	331b      	adds	r3, #27
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d119      	bne.n	80023c6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	331b      	adds	r3, #27
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	0151      	lsls	r1, r2, #5
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	440a      	add	r2, r1
 80023bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	799b      	ldrb	r3, [r3, #6]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01b      	beq.n	8002406 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3330      	adds	r3, #48	@ 0x30
 80023de:	6819      	ldr	r1, [r3, #0]
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	1ac9      	subs	r1, r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4403      	add	r3, r0
 8002402:	3338      	adds	r3, #56	@ 0x38
 8002404:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	334d      	adds	r3, #77	@ 0x4d
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	3344      	adds	r3, #68	@ 0x44
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800242e:	78fb      	ldrb	r3, [r7, #3]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800243a:	461a      	mov	r2, r3
 800243c:	2301      	movs	r3, #1
 800243e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3326      	adds	r3, #38	@ 0x26
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	3326      	adds	r3, #38	@ 0x26
 8002466:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002468:	2b02      	cmp	r3, #2
 800246a:	d110      	bne.n	800248e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f005 fa44 	bl	8007902 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4413      	add	r3, r2
 8002482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002486:	461a      	mov	r2, r3
 8002488:	2310      	movs	r3, #16
 800248a:	6093      	str	r3, [r2, #8]
 800248c:	e03d      	b.n	800250a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	3326      	adds	r3, #38	@ 0x26
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d00a      	beq.n	80024ba <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	3326      	adds	r3, #38	@ 0x26
 80024b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d127      	bne.n	800250a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	0151      	lsls	r1, r2, #5
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	440a      	add	r2, r1
 80024d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80024d8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	334c      	adds	r3, #76	@ 0x4c
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80024ee:	78fa      	ldrb	r2, [r7, #3]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	334c      	adds	r3, #76	@ 0x4c
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	4619      	mov	r1, r3
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f007 fd55 	bl	8009fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	799b      	ldrb	r3, [r3, #6]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d13b      	bne.n	800258a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	3338      	adds	r3, #56	@ 0x38
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4403      	add	r3, r0
 8002532:	3328      	adds	r3, #40	@ 0x28
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	440b      	add	r3, r1
 8002538:	1e59      	subs	r1, r3, #1
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4403      	add	r3, r0
 8002548:	3328      	adds	r3, #40	@ 0x28
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 8470 	beq.w	8002e3a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	333c      	adds	r3, #60	@ 0x3c
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	f083 0301 	eor.w	r3, r3, #1
 8002572:	b2d8      	uxtb	r0, r3
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	333c      	adds	r3, #60	@ 0x3c
 8002582:	4602      	mov	r2, r0
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	f000 bc58 	b.w	8002e3a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	333c      	adds	r3, #60	@ 0x3c
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	f083 0301 	eor.w	r3, r3, #1
 80025a2:	b2d8      	uxtb	r0, r3
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	333c      	adds	r3, #60	@ 0x3c
 80025b2:	4602      	mov	r2, r0
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	f000 bc40 	b.w	8002e3a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 fbf9 	bl	8006dba <USB_ReadChInterrupts>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d131      	bne.n	8002636 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025de:	461a      	mov	r2, r3
 80025e0:	2320      	movs	r3, #32
 80025e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	331a      	adds	r3, #26
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	f040 841f 	bne.w	8002e3a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	331b      	adds	r3, #27
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	334d      	adds	r3, #77	@ 0x4d
 8002620:	2203      	movs	r2, #3
 8002622:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f005 f968 	bl	8007902 <USB_HC_Halt>
 8002632:	f000 bc02 	b.w	8002e3a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	78fa      	ldrb	r2, [r7, #3]
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f004 fbbb 	bl	8006dba <USB_ReadChInterrupts>
 8002644:	4603      	mov	r3, r0
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b02      	cmp	r3, #2
 800264c:	f040 8305 	bne.w	8002c5a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800265c:	461a      	mov	r2, r3
 800265e:	2302      	movs	r3, #2
 8002660:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	334d      	adds	r3, #77	@ 0x4d
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d114      	bne.n	80026a2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	334d      	adds	r3, #77	@ 0x4d
 8002688:	2202      	movs	r2, #2
 800268a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	334c      	adds	r3, #76	@ 0x4c
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	e2cc      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	334d      	adds	r3, #77	@ 0x4d
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b06      	cmp	r3, #6
 80026b6:	d114      	bne.n	80026e2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	334d      	adds	r3, #77	@ 0x4d
 80026c8:	2202      	movs	r2, #2
 80026ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	334c      	adds	r3, #76	@ 0x4c
 80026dc:	2205      	movs	r2, #5
 80026de:	701a      	strb	r2, [r3, #0]
 80026e0:	e2ac      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80026e2:	78fa      	ldrb	r2, [r7, #3]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	334d      	adds	r3, #77	@ 0x4d
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b07      	cmp	r3, #7
 80026f6:	d00b      	beq.n	8002710 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	334d      	adds	r3, #77	@ 0x4d
 8002708:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800270a:	2b09      	cmp	r3, #9
 800270c:	f040 80a6 	bne.w	800285c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	334d      	adds	r3, #77	@ 0x4d
 8002720:	2202      	movs	r2, #2
 8002722:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	3344      	adds	r3, #68	@ 0x44
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	1c59      	adds	r1, r3, #1
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4403      	add	r3, r0
 8002744:	3344      	adds	r3, #68	@ 0x44
 8002746:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3344      	adds	r3, #68	@ 0x44
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d943      	bls.n	80027e6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	3344      	adds	r3, #68	@ 0x44
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	331a      	adds	r3, #26
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d123      	bne.n	80027d0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	331b      	adds	r3, #27
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	331c      	adds	r3, #28
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	0151      	lsls	r1, r2, #5
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	440a      	add	r2, r1
 80027c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ce:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	334c      	adds	r3, #76	@ 0x4c
 80027e0:	2204      	movs	r2, #4
 80027e2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027e4:	e229      	b.n	8002c3a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	334c      	adds	r3, #76	@ 0x4c
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	3326      	adds	r3, #38	@ 0x26
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00b      	beq.n	8002828 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	3326      	adds	r3, #38	@ 0x26
 8002820:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002822:	2b02      	cmp	r3, #2
 8002824:	f040 8209 	bne.w	8002c3a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800283e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002846:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002854:	461a      	mov	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800285a:	e1ee      	b.n	8002c3a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	334d      	adds	r3, #77	@ 0x4d
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b05      	cmp	r3, #5
 8002870:	f040 80c8 	bne.w	8002a04 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	334d      	adds	r3, #77	@ 0x4d
 8002884:	2202      	movs	r2, #2
 8002886:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	331b      	adds	r3, #27
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	f040 81ce 	bne.w	8002c3c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	3326      	adds	r3, #38	@ 0x26
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d16b      	bne.n	800298e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	3348      	adds	r3, #72	@ 0x48
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	1c59      	adds	r1, r3, #1
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4403      	add	r3, r0
 80028d6:	3348      	adds	r3, #72	@ 0x48
 80028d8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	3348      	adds	r3, #72	@ 0x48
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d943      	bls.n	8002978 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	3348      	adds	r3, #72	@ 0x48
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	331b      	adds	r3, #27
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3344      	adds	r3, #68	@ 0x44
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d809      	bhi.n	8002942 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	331c      	adds	r3, #28
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	0151      	lsls	r1, r2, #5
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	440a      	add	r2, r1
 8002958:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800295c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002960:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	334c      	adds	r3, #76	@ 0x4c
 8002972:	2204      	movs	r2, #4
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e014      	b.n	80029a2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	334c      	adds	r3, #76	@ 0x4c
 8002988:	2202      	movs	r2, #2
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	e009      	b.n	80029a2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	334c      	adds	r3, #76	@ 0x4c
 800299e:	2202      	movs	r2, #2
 80029a0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3326      	adds	r3, #38	@ 0x26
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3326      	adds	r3, #38	@ 0x26
 80029c8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	f040 8136 	bne.w	8002c3c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029e6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029ee:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029fc:	461a      	mov	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e11b      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	334d      	adds	r3, #77	@ 0x4d
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	f040 8081 	bne.w	8002b1e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	334d      	adds	r3, #77	@ 0x4d
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	331b      	adds	r3, #27
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	f040 80fa 	bne.w	8002c3c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	334c      	adds	r3, #76	@ 0x4c
 8002a58:	2202      	movs	r2, #2
 8002a5a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	0151      	lsls	r1, r2, #5
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	440a      	add	r2, r1
 8002a72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	0151      	lsls	r1, r2, #5
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	440a      	add	r2, r1
 8002a92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a9a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	0151      	lsls	r1, r2, #5
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	440a      	add	r2, r1
 8002ab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ab6:	f023 0320 	bic.w	r3, r3, #32
 8002aba:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	3326      	adds	r3, #38	@ 0x26
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3326      	adds	r3, #38	@ 0x26
 8002ae2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	f040 80a9 	bne.w	8002c3c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b00:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b08:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	e08e      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	334d      	adds	r3, #77	@ 0x4d
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d143      	bne.n	8002bbc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	334d      	adds	r3, #77	@ 0x4d
 8002b44:	2202      	movs	r2, #2
 8002b46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	334c      	adds	r3, #76	@ 0x4c
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3326      	adds	r3, #38	@ 0x26
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3326      	adds	r3, #38	@ 0x26
 8002b82:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d159      	bne.n	8002c3c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b9e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ba6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e03f      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	334d      	adds	r3, #77	@ 0x4d
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d126      	bne.n	8002c20 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	334d      	adds	r3, #77	@ 0x4d
 8002be2:	2202      	movs	r2, #2
 8002be4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3344      	adds	r3, #68	@ 0x44
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	1c59      	adds	r1, r3, #1
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4403      	add	r3, r0
 8002c06:	3344      	adds	r3, #68	@ 0x44
 8002c08:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	334c      	adds	r3, #76	@ 0x4c
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	e00d      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334d      	adds	r3, #77	@ 0x4d
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	f000 8100 	beq.w	8002e38 <HCD_HC_IN_IRQHandler+0xcca>
 8002c38:	e000      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c3a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	334c      	adds	r3, #76	@ 0x4c
 8002c4c:	781a      	ldrb	r2, [r3, #0]
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	4619      	mov	r1, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f007 f9ae 	bl	8009fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c58:	e0ef      	b.n	8002e3a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 f8a9 	bl	8006dba <USB_ReadChInterrupts>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6e:	2b40      	cmp	r3, #64	@ 0x40
 8002c70:	d12f      	bne.n	8002cd2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2340      	movs	r3, #64	@ 0x40
 8002c82:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	334d      	adds	r3, #77	@ 0x4d
 8002c94:	2205      	movs	r2, #5
 8002c96:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	331a      	adds	r3, #26
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3344      	adds	r3, #68	@ 0x44
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f004 fe19 	bl	8007902 <USB_HC_Halt>
 8002cd0:	e0b3      	b.n	8002e3a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f004 f86d 	bl	8006dba <USB_ReadChInterrupts>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	f040 80a7 	bne.w	8002e3a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3326      	adds	r3, #38	@ 0x26
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d11b      	bne.n	8002d3a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3344      	adds	r3, #68	@ 0x44
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	334d      	adds	r3, #77	@ 0x4d
 8002d26:	2204      	movs	r2, #4
 8002d28:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f004 fde5 	bl	8007902 <USB_HC_Halt>
 8002d38:	e03f      	b.n	8002dba <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3326      	adds	r3, #38	@ 0x26
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3326      	adds	r3, #38	@ 0x26
 8002d60:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d129      	bne.n	8002dba <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	3344      	adds	r3, #68	@ 0x44
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	799b      	ldrb	r3, [r3, #6]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HCD_HC_IN_IRQHandler+0xc2a>
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	331b      	adds	r3, #27
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d110      	bne.n	8002dba <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	334d      	adds	r3, #77	@ 0x4d
 8002da8:	2204      	movs	r2, #4
 8002daa:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f004 fda4 	bl	8007902 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	331b      	adds	r3, #27
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d129      	bne.n	8002e24 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	331b      	adds	r3, #27
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	0151      	lsls	r1, r2, #5
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	440a      	add	r2, r1
 8002dfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e02:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	0151      	lsls	r1, r2, #5
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	440a      	add	r2, r1
 8002e1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e1e:	f043 0320 	orr.w	r3, r3, #32
 8002e22:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e30:	461a      	mov	r2, r3
 8002e32:	2310      	movs	r3, #16
 8002e34:	6093      	str	r3, [r2, #8]
 8002e36:	e000      	b.n	8002e3a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002e38:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 ffab 	bl	8006dba <USB_ReadChInterrupts>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d11b      	bne.n	8002ea6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	334d      	adds	r3, #77	@ 0x4d
 8002e90:	2207      	movs	r2, #7
 8002e92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f004 fd30 	bl	8007902 <USB_HC_Halt>
 8002ea2:	f000 bc89 	b.w	80037b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 ff83 	bl	8006dba <USB_ReadChInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	f040 8082 	bne.w	8002fc4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2320      	movs	r3, #32
 8002ed0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3319      	adds	r3, #25
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d124      	bne.n	8002f32 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3319      	adds	r3, #25
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	334c      	adds	r3, #76	@ 0x4c
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	334d      	adds	r3, #77	@ 0x4d
 8002f20:	2203      	movs	r2, #3
 8002f22:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f004 fce8 	bl	8007902 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	331a      	adds	r3, #26
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	f040 8437 	bne.w	80037b8 <HCD_HC_OUT_IRQHandler+0x978>
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	331b      	adds	r3, #27
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f040 842b 	bne.w	80037b8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	3326      	adds	r3, #38	@ 0x26
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d009      	beq.n	8002f8c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	331b      	adds	r3, #27
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	334d      	adds	r3, #77	@ 0x4d
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f004 fcaa 	bl	8007902 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3344      	adds	r3, #68	@ 0x44
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	e3f9      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fef4 	bl	8006dba <USB_ReadChInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fdc:	d111      	bne.n	8003002 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fea:	461a      	mov	r2, r3
 8002fec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ff0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f004 fc81 	bl	8007902 <USB_HC_Halt>
 8003000:	e3da      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f003 fed5 	bl	8006dba <USB_ReadChInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d168      	bne.n	80030ec <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	3344      	adds	r3, #68	@ 0x44
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f003 febf 	bl	8006dba <USB_ReadChInterrupts>
 800303c:	4603      	mov	r3, r0
 800303e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003042:	2b40      	cmp	r3, #64	@ 0x40
 8003044:	d112      	bne.n	800306c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	3319      	adds	r3, #25
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003066:	461a      	mov	r2, r3
 8003068:	2340      	movs	r3, #64	@ 0x40
 800306a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	331b      	adds	r3, #27
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d019      	beq.n	80030b6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	331b      	adds	r3, #27
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4413      	add	r3, r2
 800309e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	0151      	lsls	r1, r2, #5
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	440a      	add	r2, r1
 80030ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c2:	461a      	mov	r2, r3
 80030c4:	2301      	movs	r3, #1
 80030c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	334d      	adds	r3, #77	@ 0x4d
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f004 fc0c 	bl	8007902 <USB_HC_Halt>
 80030ea:	e365      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 fe60 	bl	8006dba <USB_ReadChInterrupts>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003100:	2b40      	cmp	r3, #64	@ 0x40
 8003102:	d139      	bne.n	8003178 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	334d      	adds	r3, #77	@ 0x4d
 8003114:	2205      	movs	r2, #5
 8003116:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	331a      	adds	r3, #26
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3319      	adds	r3, #25
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	3344      	adds	r3, #68	@ 0x44
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f004 fbcf 	bl	8007902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003170:	461a      	mov	r2, r3
 8003172:	2340      	movs	r3, #64	@ 0x40
 8003174:	6093      	str	r3, [r2, #8]
 8003176:	e31f      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f003 fe1a 	bl	8006dba <USB_ReadChInterrupts>
 8003186:	4603      	mov	r3, r0
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b08      	cmp	r3, #8
 800318e:	d11a      	bne.n	80031c6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800319c:	461a      	mov	r2, r3
 800319e:	2308      	movs	r3, #8
 80031a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	334d      	adds	r3, #77	@ 0x4d
 80031b2:	2206      	movs	r2, #6
 80031b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f004 fb9f 	bl	8007902 <USB_HC_Halt>
 80031c4:	e2f8      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f003 fdf3 	bl	8006dba <USB_ReadChInterrupts>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b10      	cmp	r3, #16
 80031dc:	d144      	bne.n	8003268 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	3344      	adds	r3, #68	@ 0x44
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	334d      	adds	r3, #77	@ 0x4d
 8003202:	2204      	movs	r2, #4
 8003204:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	3319      	adds	r3, #25
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d114      	bne.n	8003246 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	3318      	adds	r3, #24
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	3319      	adds	r3, #25
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f004 fb57 	bl	8007902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003260:	461a      	mov	r2, r3
 8003262:	2310      	movs	r3, #16
 8003264:	6093      	str	r3, [r2, #8]
 8003266:	e2a7      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f003 fda2 	bl	8006dba <USB_ReadChInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327c:	2b80      	cmp	r3, #128	@ 0x80
 800327e:	f040 8083 	bne.w	8003388 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	799b      	ldrb	r3, [r3, #6]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d111      	bne.n	80032ae <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	334d      	adds	r3, #77	@ 0x4d
 800329a:	2207      	movs	r2, #7
 800329c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	4611      	mov	r1, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 fb2b 	bl	8007902 <USB_HC_Halt>
 80032ac:	e062      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3344      	adds	r3, #68	@ 0x44
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	1c59      	adds	r1, r3, #1
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4403      	add	r3, r0
 80032ce:	3344      	adds	r3, #68	@ 0x44
 80032d0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	3344      	adds	r3, #68	@ 0x44
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d922      	bls.n	800332e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	3344      	adds	r3, #68	@ 0x44
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334c      	adds	r3, #76	@ 0x4c
 800330c:	2204      	movs	r2, #4
 800330e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	334c      	adds	r3, #76	@ 0x4c
 8003320:	781a      	ldrb	r2, [r3, #0]
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	4619      	mov	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f006 fe44 	bl	8009fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800332c:	e022      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	334c      	adds	r3, #76	@ 0x4c
 800333e:	2202      	movs	r2, #2
 8003340:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003358:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003360:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4413      	add	r3, r2
 800336a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800336e:	461a      	mov	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003380:	461a      	mov	r2, r3
 8003382:	2380      	movs	r3, #128	@ 0x80
 8003384:	6093      	str	r3, [r2, #8]
 8003386:	e217      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f003 fd12 	bl	8006dba <USB_ReadChInterrupts>
 8003396:	4603      	mov	r3, r0
 8003398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a0:	d11b      	bne.n	80033da <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	334d      	adds	r3, #77	@ 0x4d
 80033b2:	2209      	movs	r2, #9
 80033b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f004 fa9f 	bl	8007902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d0:	461a      	mov	r2, r3
 80033d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033d6:	6093      	str	r3, [r2, #8]
 80033d8:	e1ee      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	4611      	mov	r1, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 fce9 	bl	8006dba <USB_ReadChInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	f040 81df 	bne.w	80037b2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003400:	461a      	mov	r2, r3
 8003402:	2302      	movs	r3, #2
 8003404:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	334d      	adds	r3, #77	@ 0x4d
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	f040 8093 	bne.w	8003544 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	334d      	adds	r3, #77	@ 0x4d
 800342e:	2202      	movs	r2, #2
 8003430:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	334c      	adds	r3, #76	@ 0x4c
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	3326      	adds	r3, #38	@ 0x26
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d00b      	beq.n	8003474 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	3326      	adds	r3, #38	@ 0x26
 800346c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800346e:	2b03      	cmp	r3, #3
 8003470:	f040 8190 	bne.w	8003794 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	799b      	ldrb	r3, [r3, #6]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d115      	bne.n	80034a8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	333d      	adds	r3, #61	@ 0x3d
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	f083 0301 	eor.w	r3, r3, #1
 8003494:	b2d8      	uxtb	r0, r3
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	333d      	adds	r3, #61	@ 0x3d
 80034a4:	4602      	mov	r2, r0
 80034a6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	799b      	ldrb	r3, [r3, #6]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	f040 8171 	bne.w	8003794 <HCD_HC_OUT_IRQHandler+0x954>
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	3334      	adds	r3, #52	@ 0x34
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8165 	beq.w	8003794 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3334      	adds	r3, #52	@ 0x34
 80034da:	6819      	ldr	r1, [r3, #0]
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4403      	add	r3, r0
 80034ea:	3328      	adds	r3, #40	@ 0x28
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	440b      	add	r3, r1
 80034f0:	1e59      	subs	r1, r3, #1
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4403      	add	r3, r0
 8003500:	3328      	adds	r3, #40	@ 0x28
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	fbb1 f3f3 	udiv	r3, r1, r3
 8003508:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 813f 	beq.w	8003794 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	333d      	adds	r3, #61	@ 0x3d
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	f083 0301 	eor.w	r3, r3, #1
 800352e:	b2d8      	uxtb	r0, r3
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	333d      	adds	r3, #61	@ 0x3d
 800353e:	4602      	mov	r2, r0
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e127      	b.n	8003794 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	334d      	adds	r3, #77	@ 0x4d
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d120      	bne.n	800359c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	334d      	adds	r3, #77	@ 0x4d
 800356a:	2202      	movs	r2, #2
 800356c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	331b      	adds	r3, #27
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	f040 8107 	bne.w	8003794 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	334c      	adds	r3, #76	@ 0x4c
 8003596:	2202      	movs	r2, #2
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	e0fb      	b.n	8003794 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	334d      	adds	r3, #77	@ 0x4d
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d13a      	bne.n	8003628 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	334d      	adds	r3, #77	@ 0x4d
 80035c2:	2202      	movs	r2, #2
 80035c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	334c      	adds	r3, #76	@ 0x4c
 80035d6:	2202      	movs	r2, #2
 80035d8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	331b      	adds	r3, #27
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	f040 80d1 	bne.w	8003794 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	331b      	adds	r3, #27
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4413      	add	r3, r2
 800360e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	0151      	lsls	r1, r2, #5
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	440a      	add	r2, r1
 800361c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003624:	6053      	str	r3, [r2, #4]
 8003626:	e0b5      	b.n	8003794 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	334d      	adds	r3, #77	@ 0x4d
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b05      	cmp	r3, #5
 800363c:	d114      	bne.n	8003668 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	334d      	adds	r3, #77	@ 0x4d
 800364e:	2202      	movs	r2, #2
 8003650:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	334c      	adds	r3, #76	@ 0x4c
 8003662:	2202      	movs	r2, #2
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e095      	b.n	8003794 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	334d      	adds	r3, #77	@ 0x4d
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b06      	cmp	r3, #6
 800367c:	d114      	bne.n	80036a8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	334d      	adds	r3, #77	@ 0x4d
 800368e:	2202      	movs	r2, #2
 8003690:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	334c      	adds	r3, #76	@ 0x4c
 80036a2:	2205      	movs	r2, #5
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e075      	b.n	8003794 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	334d      	adds	r3, #77	@ 0x4d
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b07      	cmp	r3, #7
 80036bc:	d00a      	beq.n	80036d4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	334d      	adds	r3, #77	@ 0x4d
 80036ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036d0:	2b09      	cmp	r3, #9
 80036d2:	d170      	bne.n	80037b6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	334d      	adds	r3, #77	@ 0x4d
 80036e4:	2202      	movs	r2, #2
 80036e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	3344      	adds	r3, #68	@ 0x44
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	1c59      	adds	r1, r3, #1
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4403      	add	r3, r0
 8003708:	3344      	adds	r3, #68	@ 0x44
 800370a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800370c:	78fa      	ldrb	r2, [r7, #3]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	3344      	adds	r3, #68	@ 0x44
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d914      	bls.n	800374c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	3344      	adds	r3, #68	@ 0x44
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	334c      	adds	r3, #76	@ 0x4c
 8003746:	2204      	movs	r2, #4
 8003748:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800374a:	e022      	b.n	8003792 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	334c      	adds	r3, #76	@ 0x4c
 800375c:	2202      	movs	r2, #2
 800375e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003776:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800377e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800378c:	461a      	mov	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003792:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	334c      	adds	r3, #76	@ 0x4c
 80037a4:	781a      	ldrb	r2, [r3, #0]
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	4619      	mov	r1, r3
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f006 fc02 	bl	8009fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037b0:	e002      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80037b6:	bf00      	nop
  }
}
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b08a      	sub	sp, #40	@ 0x28
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	0c5b      	lsrs	r3, r3, #17
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d004      	beq.n	8003804 <HCD_RXQLVL_IRQHandler+0x46>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	f000 80b6 	beq.w	800396e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003802:	e0b7      	b.n	8003974 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80b3 	beq.w	8003972 <HCD_RXQLVL_IRQHandler+0x1b4>
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4613      	mov	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	332c      	adds	r3, #44	@ 0x2c
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80a7 	beq.w	8003972 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4613      	mov	r3, r2
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	3338      	adds	r3, #56	@ 0x38
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	18d1      	adds	r1, r2, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4403      	add	r3, r0
 8003848:	3334      	adds	r3, #52	@ 0x34
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4299      	cmp	r1, r3
 800384e:	f200 8083 	bhi.w	8003958 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	332c      	adds	r3, #44	@ 0x2c
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	b292      	uxth	r2, r2
 800386c:	4619      	mov	r1, r3
 800386e:	f003 fa39 	bl	8006ce4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	332c      	adds	r3, #44	@ 0x2c
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	18d1      	adds	r1, r2, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4403      	add	r3, r0
 8003896:	332c      	adds	r3, #44	@ 0x2c
 8003898:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	3338      	adds	r3, #56	@ 0x38
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	18d1      	adds	r1, r2, r3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4403      	add	r3, r0
 80038be:	3338      	adds	r3, #56	@ 0x38
 80038c0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	0cdb      	lsrs	r3, r3, #19
 80038d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3328      	adds	r3, #40	@ 0x28
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d13f      	bne.n	8003972 <HCD_RXQLVL_IRQHandler+0x1b4>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d03c      	beq.n	8003972 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800390e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003916:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003924:	461a      	mov	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4613      	mov	r3, r2
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	333c      	adds	r3, #60	@ 0x3c
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	f083 0301 	eor.w	r3, r3, #1
 8003940:	b2d8      	uxtb	r0, r3
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	333c      	adds	r3, #60	@ 0x3c
 8003952:	4602      	mov	r2, r0
 8003954:	701a      	strb	r2, [r3, #0]
      break;
 8003956:	e00c      	b.n	8003972 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	334c      	adds	r3, #76	@ 0x4c
 8003968:	2204      	movs	r2, #4
 800396a:	701a      	strb	r2, [r3, #0]
      break;
 800396c:	e001      	b.n	8003972 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003972:	bf00      	nop
  }
}
 8003974:	bf00      	nop
 8003976:	3728      	adds	r7, #40	@ 0x28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80039a8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d10b      	bne.n	80039cc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d102      	bne.n	80039c4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f006 fadc 	bl	8009f7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f043 0302 	orr.w	r3, r3, #2
 80039ca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d132      	bne.n	8003a3c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f043 0308 	orr.w	r3, r3, #8
 80039dc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d126      	bne.n	8003a36 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	7a5b      	ldrb	r3, [r3, #9]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d113      	bne.n	8003a18 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80039f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039fa:	d106      	bne.n	8003a0a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2102      	movs	r1, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f003 fafe 	bl	8007004 <USB_InitFSLSPClkSel>
 8003a08:	e011      	b.n	8003a2e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4618      	mov	r0, r3
 8003a12:	f003 faf7 	bl	8007004 <USB_InitFSLSPClkSel>
 8003a16:	e00a      	b.n	8003a2e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	79db      	ldrb	r3, [r3, #7]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d106      	bne.n	8003a2e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a26:	461a      	mov	r2, r3
 8003a28:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003a2c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f006 face 	bl	8009fd0 <HAL_HCD_PortEnabled_Callback>
 8003a34:	e002      	b.n	8003a3c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f006 fad8 	bl	8009fec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d103      	bne.n	8003a4e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f043 0320 	orr.w	r3, r3, #32
 8003a4c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6013      	str	r3, [r2, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e12b      	b.n	8003cce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd f8f2 	bl	8000c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	@ 0x24
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ab6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ac8:	f001 fa20 	bl	8004f0c <HAL_RCC_GetPCLK1Freq>
 8003acc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4a81      	ldr	r2, [pc, #516]	@ (8003cd8 <HAL_I2C_Init+0x274>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d807      	bhi.n	8003ae8 <HAL_I2C_Init+0x84>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a80      	ldr	r2, [pc, #512]	@ (8003cdc <HAL_I2C_Init+0x278>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	bf94      	ite	ls
 8003ae0:	2301      	movls	r3, #1
 8003ae2:	2300      	movhi	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e006      	b.n	8003af6 <HAL_I2C_Init+0x92>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4a7d      	ldr	r2, [pc, #500]	@ (8003ce0 <HAL_I2C_Init+0x27c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	bf94      	ite	ls
 8003af0:	2301      	movls	r3, #1
 8003af2:	2300      	movhi	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e0e7      	b.n	8003cce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4a78      	ldr	r2, [pc, #480]	@ (8003ce4 <HAL_I2C_Init+0x280>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	0c9b      	lsrs	r3, r3, #18
 8003b08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a6a      	ldr	r2, [pc, #424]	@ (8003cd8 <HAL_I2C_Init+0x274>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d802      	bhi.n	8003b38 <HAL_I2C_Init+0xd4>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3301      	adds	r3, #1
 8003b36:	e009      	b.n	8003b4c <HAL_I2C_Init+0xe8>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b3e:	fb02 f303 	mul.w	r3, r2, r3
 8003b42:	4a69      	ldr	r2, [pc, #420]	@ (8003ce8 <HAL_I2C_Init+0x284>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	495c      	ldr	r1, [pc, #368]	@ (8003cd8 <HAL_I2C_Init+0x274>)
 8003b68:	428b      	cmp	r3, r1
 8003b6a:	d819      	bhi.n	8003ba0 <HAL_I2C_Init+0x13c>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1e59      	subs	r1, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b7a:	1c59      	adds	r1, r3, #1
 8003b7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b80:	400b      	ands	r3, r1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_I2C_Init+0x138>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1e59      	subs	r1, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b94:	3301      	adds	r3, #1
 8003b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9a:	e051      	b.n	8003c40 <HAL_I2C_Init+0x1dc>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	e04f      	b.n	8003c40 <HAL_I2C_Init+0x1dc>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d111      	bne.n	8003bcc <HAL_I2C_Init+0x168>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1e58      	subs	r0, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	440b      	add	r3, r1
 8003bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	e012      	b.n	8003bf2 <HAL_I2C_Init+0x18e>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1e58      	subs	r0, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	0099      	lsls	r1, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bf0c      	ite	eq
 8003bec:	2301      	moveq	r3, #1
 8003bee:	2300      	movne	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Init+0x196>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e022      	b.n	8003c40 <HAL_I2C_Init+0x1dc>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10e      	bne.n	8003c20 <HAL_I2C_Init+0x1bc>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1e58      	subs	r0, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6859      	ldr	r1, [r3, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	440b      	add	r3, r1
 8003c10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c14:	3301      	adds	r3, #1
 8003c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c1e:	e00f      	b.n	8003c40 <HAL_I2C_Init+0x1dc>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	1e58      	subs	r0, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	0099      	lsls	r1, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c36:	3301      	adds	r3, #1
 8003c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	6809      	ldr	r1, [r1, #0]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6911      	ldr	r1, [r2, #16]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68d2      	ldr	r2, [r2, #12]
 8003c7a:	4311      	orrs	r1, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	000186a0 	.word	0x000186a0
 8003cdc:	001e847f 	.word	0x001e847f
 8003ce0:	003d08ff 	.word	0x003d08ff
 8003ce4:	431bde83 	.word	0x431bde83
 8003ce8:	10624dd3 	.word	0x10624dd3

08003cec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e128      	b.n	8003f50 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a90      	ldr	r2, [pc, #576]	@ (8003f58 <HAL_I2S_Init+0x26c>)
 8003d16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7fc fff3 	bl	8000d04 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d34:	f023 030f 	bic.w	r3, r3, #15
 8003d38:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d060      	beq.n	8003e0c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d52:	2310      	movs	r3, #16
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e001      	b.n	8003d5c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d58:	2320      	movs	r3, #32
 8003d5a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d802      	bhi.n	8003d6a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d6a:	2001      	movs	r0, #1
 8003d6c:	f001 f9c4 	bl	80050f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d70:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d7a:	d125      	bne.n	8003dc8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d010      	beq.n	8003da6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	461a      	mov	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da0:	3305      	adds	r3, #5
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	e01f      	b.n	8003de6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	461a      	mov	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	3305      	adds	r3, #5
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	e00e      	b.n	8003de6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	461a      	mov	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	3305      	adds	r3, #5
 8003de4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4a5c      	ldr	r2, [pc, #368]	@ (8003f5c <HAL_I2S_Init+0x270>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	08db      	lsrs	r3, r3, #3
 8003df0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	e003      	b.n	8003e14 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d902      	bls.n	8003e20 <HAL_I2S_Init+0x134>
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	2bff      	cmp	r3, #255	@ 0xff
 8003e1e:	d907      	bls.n	8003e30 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e24:	f043 0210 	orr.w	r2, r3, #16
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e08f      	b.n	8003f50 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	ea42 0103 	orr.w	r1, r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e4e:	f023 030f 	bic.w	r3, r3, #15
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6851      	ldr	r1, [r2, #4]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6892      	ldr	r2, [r2, #8]
 8003e5a:	4311      	orrs	r1, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68d2      	ldr	r2, [r2, #12]
 8003e60:	4311      	orrs	r1, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6992      	ldr	r2, [r2, #24]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e72:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d161      	bne.n	8003f40 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a38      	ldr	r2, [pc, #224]	@ (8003f60 <HAL_I2S_Init+0x274>)
 8003e80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a37      	ldr	r2, [pc, #220]	@ (8003f64 <HAL_I2S_Init+0x278>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <HAL_I2S_Init+0x1a4>
 8003e8c:	4b36      	ldr	r3, [pc, #216]	@ (8003f68 <HAL_I2S_Init+0x27c>)
 8003e8e:	e001      	b.n	8003e94 <HAL_I2S_Init+0x1a8>
 8003e90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	4932      	ldr	r1, [pc, #200]	@ (8003f64 <HAL_I2S_Init+0x278>)
 8003e9c:	428a      	cmp	r2, r1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_I2S_Init+0x1b8>
 8003ea0:	4a31      	ldr	r2, [pc, #196]	@ (8003f68 <HAL_I2S_Init+0x27c>)
 8003ea2:	e001      	b.n	8003ea8 <HAL_I2S_Init+0x1bc>
 8003ea4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003ea8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003eac:	f023 030f 	bic.w	r3, r3, #15
 8003eb0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2b      	ldr	r2, [pc, #172]	@ (8003f64 <HAL_I2S_Init+0x278>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d101      	bne.n	8003ec0 <HAL_I2S_Init+0x1d4>
 8003ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8003f68 <HAL_I2S_Init+0x27c>)
 8003ebe:	e001      	b.n	8003ec4 <HAL_I2S_Init+0x1d8>
 8003ec0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a25      	ldr	r2, [pc, #148]	@ (8003f64 <HAL_I2S_Init+0x278>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <HAL_I2S_Init+0x1ea>
 8003ed2:	4b25      	ldr	r3, [pc, #148]	@ (8003f68 <HAL_I2S_Init+0x27c>)
 8003ed4:	e001      	b.n	8003eda <HAL_I2S_Init+0x1ee>
 8003ed6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee6:	d003      	beq.n	8003ef0 <HAL_I2S_Init+0x204>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d103      	bne.n	8003ef8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ef0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	e001      	b.n	8003efc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f06:	4313      	orrs	r3, r2
 8003f08:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	897b      	ldrh	r3, [r7, #10]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f28:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a0d      	ldr	r2, [pc, #52]	@ (8003f64 <HAL_I2S_Init+0x278>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d101      	bne.n	8003f38 <HAL_I2S_Init+0x24c>
 8003f34:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <HAL_I2S_Init+0x27c>)
 8003f36:	e001      	b.n	8003f3c <HAL_I2S_Init+0x250>
 8003f38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f3c:	897a      	ldrh	r2, [r7, #10]
 8003f3e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	08004063 	.word	0x08004063
 8003f5c:	cccccccd 	.word	0xcccccccd
 8003f60:	08004179 	.word	0x08004179
 8003f64:	40003800 	.word	0x40003800
 8003f68:	40003400 	.word	0x40003400

08003f6c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	881a      	ldrh	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	1c9a      	adds	r2, r3, #2
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10e      	bne.n	8003ffc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff ffb8 	bl	8003f6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004016:	b292      	uxth	r2, r2
 8004018:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401e:	1c9a      	adds	r2, r3, #2
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10e      	bne.n	800405a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800404a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff ff93 	bl	8003f80 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b04      	cmp	r3, #4
 800407c:	d13a      	bne.n	80040f4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b01      	cmp	r3, #1
 8004086:	d109      	bne.n	800409c <I2S_IRQHandler+0x3a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004092:	2b40      	cmp	r3, #64	@ 0x40
 8004094:	d102      	bne.n	800409c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ffb4 	bl	8004004 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a2:	2b40      	cmp	r3, #64	@ 0x40
 80040a4:	d126      	bne.n	80040f4 <I2S_IRQHandler+0x92>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d11f      	bne.n	80040f4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e6:	f043 0202 	orr.w	r2, r3, #2
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff ff50 	bl	8003f94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d136      	bne.n	800416e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d109      	bne.n	800411e <I2S_IRQHandler+0xbc>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004114:	2b80      	cmp	r3, #128	@ 0x80
 8004116:	d102      	bne.n	800411e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ff45 	bl	8003fa8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b08      	cmp	r3, #8
 8004126:	d122      	bne.n	800416e <I2S_IRQHandler+0x10c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b20      	cmp	r3, #32
 8004134:	d11b      	bne.n	800416e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004144:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004160:	f043 0204 	orr.w	r2, r3, #4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ff13 	bl	8003f94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800416e:	bf00      	nop
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a92      	ldr	r2, [pc, #584]	@ (80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d101      	bne.n	8004196 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004192:	4b92      	ldr	r3, [pc, #584]	@ (80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004194:	e001      	b.n	800419a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004196:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a8b      	ldr	r2, [pc, #556]	@ (80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d101      	bne.n	80041b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80041b0:	4b8a      	ldr	r3, [pc, #552]	@ (80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041b2:	e001      	b.n	80041b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041c4:	d004      	beq.n	80041d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f040 8099 	bne.w	8004302 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d107      	bne.n	80041ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f925 	bl	8004434 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d107      	bne.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f9c8 	bl	8004594 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800420a:	2b40      	cmp	r3, #64	@ 0x40
 800420c:	d13a      	bne.n	8004284 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d035      	beq.n	8004284 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a6e      	ldr	r2, [pc, #440]	@ (80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004222:	4b6e      	ldr	r3, [pc, #440]	@ (80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004224:	e001      	b.n	800422a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004226:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4969      	ldr	r1, [pc, #420]	@ (80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004232:	428b      	cmp	r3, r1
 8004234:	d101      	bne.n	800423a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004236:	4b69      	ldr	r3, [pc, #420]	@ (80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004238:	e001      	b.n	800423e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800423a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800423e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004242:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004252:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	f043 0202 	orr.w	r2, r3, #2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fe88 	bl	8003f94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b08      	cmp	r3, #8
 800428c:	f040 80c3 	bne.w	8004416 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80bd 	beq.w	8004416 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a49      	ldr	r2, [pc, #292]	@ (80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042b6:	4b49      	ldr	r3, [pc, #292]	@ (80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042b8:	e001      	b.n	80042be <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4944      	ldr	r1, [pc, #272]	@ (80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042c6:	428b      	cmp	r3, r1
 80042c8:	d101      	bne.n	80042ce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042ca:	4b44      	ldr	r3, [pc, #272]	@ (80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042cc:	e001      	b.n	80042d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042d6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042d8:	2300      	movs	r3, #0
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f2:	f043 0204 	orr.w	r2, r3, #4
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff fe4a 	bl	8003f94 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004300:	e089      	b.n	8004416 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b02      	cmp	r3, #2
 800430a:	d107      	bne.n	800431c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f8be 	bl	8004498 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b01      	cmp	r3, #1
 8004324:	d107      	bne.n	8004336 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f8fd 	bl	8004530 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433c:	2b40      	cmp	r3, #64	@ 0x40
 800433e:	d12f      	bne.n	80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d02a      	beq.n	80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004358:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1e      	ldr	r2, [pc, #120]	@ (80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d101      	bne.n	8004368 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004364:	4b1d      	ldr	r3, [pc, #116]	@ (80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004366:	e001      	b.n	800436c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004368:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4919      	ldr	r1, [pc, #100]	@ (80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004374:	428b      	cmp	r3, r1
 8004376:	d101      	bne.n	800437c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004378:	4b18      	ldr	r3, [pc, #96]	@ (80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800437a:	e001      	b.n	8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800437c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004380:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004384:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f043 0202 	orr.w	r2, r3, #2
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff fdfa 	bl	8003f94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d136      	bne.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d031      	beq.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a07      	ldr	r2, [pc, #28]	@ (80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d101      	bne.n	80043c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043be:	4b07      	ldr	r3, [pc, #28]	@ (80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043c0:	e001      	b.n	80043c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4902      	ldr	r1, [pc, #8]	@ (80043d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043ce:	428b      	cmp	r3, r1
 80043d0:	d106      	bne.n	80043e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80043d2:	4b02      	ldr	r3, [pc, #8]	@ (80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043d4:	e006      	b.n	80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80043d6:	bf00      	nop
 80043d8:	40003800 	.word	0x40003800
 80043dc:	40003400 	.word	0x40003400
 80043e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043e8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	f043 0204 	orr.w	r2, r3, #4
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fdc0 	bl	8003f94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004414:	e000      	b.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004416:	bf00      	nop
}
 8004418:	bf00      	nop
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	1c99      	adds	r1, r3, #2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6251      	str	r1, [r2, #36]	@ 0x24
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d113      	bne.n	800448e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004474:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d106      	bne.n	800448e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff ffc9 	bl	8004420 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	1c99      	adds	r1, r3, #2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6251      	str	r1, [r2, #36]	@ 0x24
 80044aa:	8819      	ldrh	r1, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004528 <I2SEx_TxISR_I2SExt+0x90>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d101      	bne.n	80044ba <I2SEx_TxISR_I2SExt+0x22>
 80044b6:	4b1d      	ldr	r3, [pc, #116]	@ (800452c <I2SEx_TxISR_I2SExt+0x94>)
 80044b8:	e001      	b.n	80044be <I2SEx_TxISR_I2SExt+0x26>
 80044ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044be:	460a      	mov	r2, r1
 80044c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d121      	bne.n	800451e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a12      	ldr	r2, [pc, #72]	@ (8004528 <I2SEx_TxISR_I2SExt+0x90>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d101      	bne.n	80044e8 <I2SEx_TxISR_I2SExt+0x50>
 80044e4:	4b11      	ldr	r3, [pc, #68]	@ (800452c <I2SEx_TxISR_I2SExt+0x94>)
 80044e6:	e001      	b.n	80044ec <I2SEx_TxISR_I2SExt+0x54>
 80044e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	490d      	ldr	r1, [pc, #52]	@ (8004528 <I2SEx_TxISR_I2SExt+0x90>)
 80044f4:	428b      	cmp	r3, r1
 80044f6:	d101      	bne.n	80044fc <I2SEx_TxISR_I2SExt+0x64>
 80044f8:	4b0c      	ldr	r3, [pc, #48]	@ (800452c <I2SEx_TxISR_I2SExt+0x94>)
 80044fa:	e001      	b.n	8004500 <I2SEx_TxISR_I2SExt+0x68>
 80044fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004500:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004504:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d106      	bne.n	800451e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff ff81 	bl	8004420 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40003800 	.word	0x40003800
 800452c:	40003400 	.word	0x40003400

08004530 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68d8      	ldr	r0, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004542:	1c99      	adds	r1, r3, #2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004548:	b282      	uxth	r2, r0
 800454a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d113      	bne.n	800458c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004572:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff ff4a 	bl	8004420 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a20      	ldr	r2, [pc, #128]	@ (8004624 <I2SEx_RxISR_I2SExt+0x90>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d101      	bne.n	80045aa <I2SEx_RxISR_I2SExt+0x16>
 80045a6:	4b20      	ldr	r3, [pc, #128]	@ (8004628 <I2SEx_RxISR_I2SExt+0x94>)
 80045a8:	e001      	b.n	80045ae <I2SEx_RxISR_I2SExt+0x1a>
 80045aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045ae:	68d8      	ldr	r0, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b4:	1c99      	adds	r1, r3, #2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80045ba:	b282      	uxth	r2, r0
 80045bc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d121      	bne.n	800461a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a12      	ldr	r2, [pc, #72]	@ (8004624 <I2SEx_RxISR_I2SExt+0x90>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d101      	bne.n	80045e4 <I2SEx_RxISR_I2SExt+0x50>
 80045e0:	4b11      	ldr	r3, [pc, #68]	@ (8004628 <I2SEx_RxISR_I2SExt+0x94>)
 80045e2:	e001      	b.n	80045e8 <I2SEx_RxISR_I2SExt+0x54>
 80045e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	490d      	ldr	r1, [pc, #52]	@ (8004624 <I2SEx_RxISR_I2SExt+0x90>)
 80045f0:	428b      	cmp	r3, r1
 80045f2:	d101      	bne.n	80045f8 <I2SEx_RxISR_I2SExt+0x64>
 80045f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004628 <I2SEx_RxISR_I2SExt+0x94>)
 80045f6:	e001      	b.n	80045fc <I2SEx_RxISR_I2SExt+0x68>
 80045f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004600:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ff03 	bl	8004420 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40003800 	.word	0x40003800
 8004628:	40003400 	.word	0x40003400

0800462c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e267      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d075      	beq.n	8004736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800464a:	4b88      	ldr	r3, [pc, #544]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b04      	cmp	r3, #4
 8004654:	d00c      	beq.n	8004670 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004656:	4b85      	ldr	r3, [pc, #532]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800465e:	2b08      	cmp	r3, #8
 8004660:	d112      	bne.n	8004688 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004662:	4b82      	ldr	r3, [pc, #520]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800466a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800466e:	d10b      	bne.n	8004688 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004670:	4b7e      	ldr	r3, [pc, #504]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05b      	beq.n	8004734 <HAL_RCC_OscConfig+0x108>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d157      	bne.n	8004734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e242      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004690:	d106      	bne.n	80046a0 <HAL_RCC_OscConfig+0x74>
 8004692:	4b76      	ldr	r3, [pc, #472]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a75      	ldr	r2, [pc, #468]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	e01d      	b.n	80046dc <HAL_RCC_OscConfig+0xb0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x98>
 80046aa:	4b70      	ldr	r3, [pc, #448]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a6f      	ldr	r2, [pc, #444]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b6d      	ldr	r3, [pc, #436]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a6c      	ldr	r2, [pc, #432]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0xb0>
 80046c4:	4b69      	ldr	r3, [pc, #420]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a68      	ldr	r2, [pc, #416]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b66      	ldr	r3, [pc, #408]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a65      	ldr	r2, [pc, #404]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fc fd92 	bl	800120c <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ec:	f7fc fd8e 	bl	800120c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	@ 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e207      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	4b5b      	ldr	r3, [pc, #364]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0xc0>
 800470a:	e014      	b.n	8004736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fc fd7e 	bl	800120c <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004714:	f7fc fd7a 	bl	800120c <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	@ 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e1f3      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004726:	4b51      	ldr	r3, [pc, #324]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0xe8>
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d063      	beq.n	800480a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004742:	4b4a      	ldr	r3, [pc, #296]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474e:	4b47      	ldr	r3, [pc, #284]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004756:	2b08      	cmp	r3, #8
 8004758:	d11c      	bne.n	8004794 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800475a:	4b44      	ldr	r3, [pc, #272]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d116      	bne.n	8004794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004766:	4b41      	ldr	r3, [pc, #260]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_RCC_OscConfig+0x152>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d001      	beq.n	800477e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e1c7      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477e:	4b3b      	ldr	r3, [pc, #236]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4937      	ldr	r1, [pc, #220]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	e03a      	b.n	800480a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800479c:	4b34      	ldr	r3, [pc, #208]	@ (8004870 <HAL_RCC_OscConfig+0x244>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a2:	f7fc fd33 	bl	800120c <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047aa:	f7fc fd2f 	bl	800120c <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e1a8      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047bc:	4b2b      	ldr	r3, [pc, #172]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c8:	4b28      	ldr	r3, [pc, #160]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4925      	ldr	r1, [pc, #148]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	600b      	str	r3, [r1, #0]
 80047dc:	e015      	b.n	800480a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047de:	4b24      	ldr	r3, [pc, #144]	@ (8004870 <HAL_RCC_OscConfig+0x244>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fc fd12 	bl	800120c <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ec:	f7fc fd0e 	bl	800120c <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e187      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fe:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d036      	beq.n	8004884 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d016      	beq.n	800484c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800481e:	4b15      	ldr	r3, [pc, #84]	@ (8004874 <HAL_RCC_OscConfig+0x248>)
 8004820:	2201      	movs	r2, #1
 8004822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fc fcf2 	bl	800120c <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800482c:	f7fc fcee 	bl	800120c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e167      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483e:	4b0b      	ldr	r3, [pc, #44]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x200>
 800484a:	e01b      	b.n	8004884 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800484c:	4b09      	ldr	r3, [pc, #36]	@ (8004874 <HAL_RCC_OscConfig+0x248>)
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004852:	f7fc fcdb 	bl	800120c <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004858:	e00e      	b.n	8004878 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800485a:	f7fc fcd7 	bl	800120c <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d907      	bls.n	8004878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e150      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
 800486c:	40023800 	.word	0x40023800
 8004870:	42470000 	.word	0x42470000
 8004874:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004878:	4b88      	ldr	r3, [pc, #544]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800487a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1ea      	bne.n	800485a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8097 	beq.w	80049c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004892:	2300      	movs	r3, #0
 8004894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004896:	4b81      	ldr	r3, [pc, #516]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10f      	bne.n	80048c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	4b7d      	ldr	r3, [pc, #500]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	4a7c      	ldr	r2, [pc, #496]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80048b2:	4b7a      	ldr	r3, [pc, #488]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048be:	2301      	movs	r3, #1
 80048c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c2:	4b77      	ldr	r3, [pc, #476]	@ (8004aa0 <HAL_RCC_OscConfig+0x474>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d118      	bne.n	8004900 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ce:	4b74      	ldr	r3, [pc, #464]	@ (8004aa0 <HAL_RCC_OscConfig+0x474>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a73      	ldr	r2, [pc, #460]	@ (8004aa0 <HAL_RCC_OscConfig+0x474>)
 80048d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048da:	f7fc fc97 	bl	800120c <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e2:	f7fc fc93 	bl	800120c <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e10c      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa0 <HAL_RCC_OscConfig+0x474>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d106      	bne.n	8004916 <HAL_RCC_OscConfig+0x2ea>
 8004908:	4b64      	ldr	r3, [pc, #400]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490c:	4a63      	ldr	r2, [pc, #396]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	6713      	str	r3, [r2, #112]	@ 0x70
 8004914:	e01c      	b.n	8004950 <HAL_RCC_OscConfig+0x324>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b05      	cmp	r3, #5
 800491c:	d10c      	bne.n	8004938 <HAL_RCC_OscConfig+0x30c>
 800491e:	4b5f      	ldr	r3, [pc, #380]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004922:	4a5e      	ldr	r2, [pc, #376]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004924:	f043 0304 	orr.w	r3, r3, #4
 8004928:	6713      	str	r3, [r2, #112]	@ 0x70
 800492a:	4b5c      	ldr	r3, [pc, #368]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800492c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492e:	4a5b      	ldr	r2, [pc, #364]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	6713      	str	r3, [r2, #112]	@ 0x70
 8004936:	e00b      	b.n	8004950 <HAL_RCC_OscConfig+0x324>
 8004938:	4b58      	ldr	r3, [pc, #352]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493c:	4a57      	ldr	r2, [pc, #348]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	6713      	str	r3, [r2, #112]	@ 0x70
 8004944:	4b55      	ldr	r3, [pc, #340]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004948:	4a54      	ldr	r2, [pc, #336]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 800494a:	f023 0304 	bic.w	r3, r3, #4
 800494e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d015      	beq.n	8004984 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004958:	f7fc fc58 	bl	800120c <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495e:	e00a      	b.n	8004976 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004960:	f7fc fc54 	bl	800120c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e0cb      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004976:	4b49      	ldr	r3, [pc, #292]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0ee      	beq.n	8004960 <HAL_RCC_OscConfig+0x334>
 8004982:	e014      	b.n	80049ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004984:	f7fc fc42 	bl	800120c <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498c:	f7fc fc3e 	bl	800120c <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e0b5      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a2:	4b3e      	ldr	r3, [pc, #248]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1ee      	bne.n	800498c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d105      	bne.n	80049c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b4:	4b39      	ldr	r3, [pc, #228]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80049b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b8:	4a38      	ldr	r2, [pc, #224]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80049ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80a1 	beq.w	8004b0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ca:	4b34      	ldr	r3, [pc, #208]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d05c      	beq.n	8004a90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d141      	bne.n	8004a62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049de:	4b31      	ldr	r3, [pc, #196]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e4:	f7fc fc12 	bl	800120c <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fc fc0e 	bl	800120c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e087      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fe:	4b27      	ldr	r3, [pc, #156]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69da      	ldr	r2, [r3, #28]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	019b      	lsls	r3, r3, #6
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	3b01      	subs	r3, #1
 8004a24:	041b      	lsls	r3, r3, #16
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	491b      	ldr	r1, [pc, #108]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a34:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3a:	f7fc fbe7 	bl	800120c <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a42:	f7fc fbe3 	bl	800120c <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e05c      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a54:	4b11      	ldr	r3, [pc, #68]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCC_OscConfig+0x416>
 8004a60:	e054      	b.n	8004b0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a62:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a68:	f7fc fbd0 	bl	800120c <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a70:	f7fc fbcc 	bl	800120c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e045      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a82:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <HAL_RCC_OscConfig+0x470>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x444>
 8004a8e:	e03d      	b.n	8004b0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d107      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e038      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <HAL_RCC_OscConfig+0x4ec>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d028      	beq.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d121      	bne.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d11a      	bne.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d111      	bne.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	3b01      	subs	r3, #1
 8004af2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d107      	bne.n	8004b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40023800 	.word	0x40023800

08004b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0cc      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b30:	4b68      	ldr	r3, [pc, #416]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d90c      	bls.n	8004b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3e:	4b65      	ldr	r3, [pc, #404]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b63      	ldr	r3, [pc, #396]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0b8      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d020      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b70:	4b59      	ldr	r3, [pc, #356]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4a58      	ldr	r2, [pc, #352]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b88:	4b53      	ldr	r3, [pc, #332]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4a52      	ldr	r2, [pc, #328]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b94:	4b50      	ldr	r3, [pc, #320]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	494d      	ldr	r1, [pc, #308]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d044      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bba:	4b47      	ldr	r3, [pc, #284]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d119      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e07f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d003      	beq.n	8004bda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bda:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e06f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bea:	4b3b      	ldr	r3, [pc, #236]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e067      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bfa:	4b37      	ldr	r3, [pc, #220]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f023 0203 	bic.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4934      	ldr	r1, [pc, #208]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c0c:	f7fc fafe 	bl	800120c <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c14:	f7fc fafa 	bl	800120c <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e04f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 020c 	and.w	r2, r3, #12
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d1eb      	bne.n	8004c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b25      	ldr	r3, [pc, #148]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d20c      	bcs.n	8004c64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b22      	ldr	r3, [pc, #136]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	4b20      	ldr	r3, [pc, #128]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e032      	b.n	8004cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c70:	4b19      	ldr	r3, [pc, #100]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4916      	ldr	r1, [pc, #88]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c8e:	4b12      	ldr	r3, [pc, #72]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	490e      	ldr	r1, [pc, #56]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ca2:	f000 f821 	bl	8004ce8 <HAL_RCC_GetSysClockFreq>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	490a      	ldr	r1, [pc, #40]	@ (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004cb4:	5ccb      	ldrb	r3, [r1, r3]
 8004cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cba:	4a09      	ldr	r2, [pc, #36]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cbe:	4b09      	ldr	r3, [pc, #36]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fc fa5e 	bl	8001184 <HAL_InitTick>

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40023c00 	.word	0x40023c00
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	0800a6a8 	.word	0x0800a6a8
 8004ce0:	20000000 	.word	0x20000000
 8004ce4:	20000004 	.word	0x20000004

08004ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cec:	b094      	sub	sp, #80	@ 0x50
 8004cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d00:	4b79      	ldr	r3, [pc, #484]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 030c 	and.w	r3, r3, #12
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d00d      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0x40>
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	f200 80e1 	bhi.w	8004ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0x34>
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d003      	beq.n	8004d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d1a:	e0db      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d1c:	4b73      	ldr	r3, [pc, #460]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x204>)
 8004d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d20:	e0db      	b.n	8004eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d22:	4b73      	ldr	r3, [pc, #460]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d26:	e0d8      	b.n	8004eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d28:	4b6f      	ldr	r3, [pc, #444]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d32:	4b6d      	ldr	r3, [pc, #436]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d063      	beq.n	8004e06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	099b      	lsrs	r3, r3, #6
 8004d44:	2200      	movs	r2, #0
 8004d46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d52:	2300      	movs	r3, #0
 8004d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d5a:	4622      	mov	r2, r4
 8004d5c:	462b      	mov	r3, r5
 8004d5e:	f04f 0000 	mov.w	r0, #0
 8004d62:	f04f 0100 	mov.w	r1, #0
 8004d66:	0159      	lsls	r1, r3, #5
 8004d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d6c:	0150      	lsls	r0, r2, #5
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4621      	mov	r1, r4
 8004d74:	1a51      	subs	r1, r2, r1
 8004d76:	6139      	str	r1, [r7, #16]
 8004d78:	4629      	mov	r1, r5
 8004d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d8c:	4659      	mov	r1, fp
 8004d8e:	018b      	lsls	r3, r1, #6
 8004d90:	4651      	mov	r1, sl
 8004d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d96:	4651      	mov	r1, sl
 8004d98:	018a      	lsls	r2, r1, #6
 8004d9a:	4651      	mov	r1, sl
 8004d9c:	ebb2 0801 	subs.w	r8, r2, r1
 8004da0:	4659      	mov	r1, fp
 8004da2:	eb63 0901 	sbc.w	r9, r3, r1
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dba:	4690      	mov	r8, r2
 8004dbc:	4699      	mov	r9, r3
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	eb18 0303 	adds.w	r3, r8, r3
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	462b      	mov	r3, r5
 8004dc8:	eb49 0303 	adc.w	r3, r9, r3
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dda:	4629      	mov	r1, r5
 8004ddc:	024b      	lsls	r3, r1, #9
 8004dde:	4621      	mov	r1, r4
 8004de0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004de4:	4621      	mov	r1, r4
 8004de6:	024a      	lsls	r2, r1, #9
 8004de8:	4610      	mov	r0, r2
 8004dea:	4619      	mov	r1, r3
 8004dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dee:	2200      	movs	r2, #0
 8004df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004df4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004df8:	f7fb f9e6 	bl	80001c8 <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4613      	mov	r3, r2
 8004e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e04:	e058      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e06:	4b38      	ldr	r3, [pc, #224]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	099b      	lsrs	r3, r3, #6
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	4611      	mov	r1, r2
 8004e12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e16:	623b      	str	r3, [r7, #32]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	f04f 0000 	mov.w	r0, #0
 8004e28:	f04f 0100 	mov.w	r1, #0
 8004e2c:	0159      	lsls	r1, r3, #5
 8004e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e32:	0150      	lsls	r0, r2, #5
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4641      	mov	r1, r8
 8004e3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e3e:	4649      	mov	r1, r9
 8004e40:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e58:	ebb2 040a 	subs.w	r4, r2, sl
 8004e5c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	00eb      	lsls	r3, r5, #3
 8004e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e6e:	00e2      	lsls	r2, r4, #3
 8004e70:	4614      	mov	r4, r2
 8004e72:	461d      	mov	r5, r3
 8004e74:	4643      	mov	r3, r8
 8004e76:	18e3      	adds	r3, r4, r3
 8004e78:	603b      	str	r3, [r7, #0]
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	eb45 0303 	adc.w	r3, r5, r3
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e8e:	4629      	mov	r1, r5
 8004e90:	028b      	lsls	r3, r1, #10
 8004e92:	4621      	mov	r1, r4
 8004e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e98:	4621      	mov	r1, r4
 8004e9a:	028a      	lsls	r2, r1, #10
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	61fa      	str	r2, [r7, #28]
 8004ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eac:	f7fb f98c 	bl	80001c8 <__aeabi_uldivmod>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	0c1b      	lsrs	r3, r3, #16
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004ec8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ed2:	e002      	b.n	8004eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ed4:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <HAL_RCC_GetSysClockFreq+0x204>)
 8004ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3750      	adds	r7, #80	@ 0x50
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	00f42400 	.word	0x00f42400
 8004ef0:	007a1200 	.word	0x007a1200

08004ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef8:	4b03      	ldr	r3, [pc, #12]	@ (8004f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004efa:	681b      	ldr	r3, [r3, #0]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000000 	.word	0x20000000

08004f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f10:	f7ff fff0 	bl	8004ef4 <HAL_RCC_GetHCLKFreq>
 8004f14:	4602      	mov	r2, r0
 8004f16:	4b05      	ldr	r3, [pc, #20]	@ (8004f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	0a9b      	lsrs	r3, r3, #10
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	4903      	ldr	r1, [pc, #12]	@ (8004f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f22:	5ccb      	ldrb	r3, [r1, r3]
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	0800a6b8 	.word	0x0800a6b8

08004f34 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d105      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d035      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f5c:	4b62      	ldr	r3, [pc, #392]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f62:	f7fc f953 	bl	800120c <HAL_GetTick>
 8004f66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f6a:	f7fc f94f 	bl	800120c <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e0b0      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f7c:	4b5b      	ldr	r3, [pc, #364]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f0      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	019a      	lsls	r2, r3, #6
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	071b      	lsls	r3, r3, #28
 8004f94:	4955      	ldr	r1, [pc, #340]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f9c:	4b52      	ldr	r3, [pc, #328]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fa2:	f7fc f933 	bl	800120c <HAL_GetTick>
 8004fa6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004faa:	f7fc f92f 	bl	800120c <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e090      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0f0      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8083 	beq.w	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	4b44      	ldr	r3, [pc, #272]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	4a43      	ldr	r2, [pc, #268]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fe6:	4b41      	ldr	r3, [pc, #260]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a3e      	ldr	r2, [pc, #248]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ffc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ffe:	f7fc f905 	bl	800120c <HAL_GetTick>
 8005002:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005006:	f7fc f901 	bl	800120c <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e062      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005018:	4b35      	ldr	r3, [pc, #212]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005024:	4b31      	ldr	r3, [pc, #196]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005028:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800502c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d02f      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	429a      	cmp	r2, r3
 8005040:	d028      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005042:	4b2a      	ldr	r3, [pc, #168]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800504a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800504c:	4b29      	ldr	r3, [pc, #164]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005052:	4b28      	ldr	r3, [pc, #160]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005058:	4a24      	ldr	r2, [pc, #144]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800505e:	4b23      	ldr	r3, [pc, #140]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d114      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800506a:	f7fc f8cf 	bl	800120c <HAL_GetTick>
 800506e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005070:	e00a      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005072:	f7fc f8cb 	bl	800120c <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005080:	4293      	cmp	r3, r2
 8005082:	d901      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e02a      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005088:	4b18      	ldr	r3, [pc, #96]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0ee      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800509c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050a0:	d10d      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050a2:	4b12      	ldr	r3, [pc, #72]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80050b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b6:	490d      	ldr	r1, [pc, #52]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	608b      	str	r3, [r1, #8]
 80050bc:	e005      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050be:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	4a0a      	ldr	r2, [pc, #40]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050c4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80050c8:	6093      	str	r3, [r2, #8]
 80050ca:	4b08      	ldr	r3, [pc, #32]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d6:	4905      	ldr	r1, [pc, #20]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	42470068 	.word	0x42470068
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40007000 	.word	0x40007000
 80050f4:	42470e40 	.word	0x42470e40

080050f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d13f      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005116:	4b24      	ldr	r3, [pc, #144]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800511e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d006      	beq.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800512c:	d12f      	bne.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800512e:	4b1f      	ldr	r3, [pc, #124]	@ (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005130:	617b      	str	r3, [r7, #20]
          break;
 8005132:	e02f      	b.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005134:	4b1c      	ldr	r3, [pc, #112]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800513c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005140:	d108      	bne.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005142:	4b19      	ldr	r3, [pc, #100]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800514a:	4a19      	ldr	r2, [pc, #100]	@ (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800514c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	e007      	b.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005154:	4b14      	ldr	r3, [pc, #80]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800515c:	4a15      	ldr	r2, [pc, #84]	@ (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800515e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005162:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005164:	4b10      	ldr	r3, [pc, #64]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800516a:	099b      	lsrs	r3, r3, #6
 800516c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005178:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800517a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800517e:	0f1b      	lsrs	r3, r3, #28
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	fbb2 f3f3 	udiv	r3, r2, r3
 800518a:	617b      	str	r3, [r7, #20]
          break;
 800518c:	e002      	b.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
          break;
 8005192:	bf00      	nop
        }
      }
      break;
 8005194:	e000      	b.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005196:	bf00      	nop
    }
  }
  return frequency;
 8005198:	697b      	ldr	r3, [r7, #20]
}
 800519a:	4618      	mov	r0, r3
 800519c:	371c      	adds	r7, #28
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40023800 	.word	0x40023800
 80051ac:	00bb8000 	.word	0x00bb8000
 80051b0:	007a1200 	.word	0x007a1200
 80051b4:	00f42400 	.word	0x00f42400

080051b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e07b      	b.n	80052c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d108      	bne.n	80051e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051da:	d009      	beq.n	80051f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	61da      	str	r2, [r3, #28]
 80051e2:	e005      	b.n	80051f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fb fdfa 	bl	8000e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005226:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005274:	ea42 0103 	orr.w	r1, r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	0c1b      	lsrs	r3, r3, #16
 800528e:	f003 0104 	and.w	r1, r3, #4
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	f003 0210 	and.w	r2, r3, #16
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69da      	ldr	r2, [r3, #28]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e041      	b.n	8005360 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d106      	bne.n	80052f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fb fdcf 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2202      	movs	r2, #2
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3304      	adds	r3, #4
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f000 fe53 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e041      	b.n	80053fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f839 	bl	8005406 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f000 fe04 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d109      	bne.n	8005440 <HAL_TIM_PWM_Start+0x24>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	bf14      	ite	ne
 8005438:	2301      	movne	r3, #1
 800543a:	2300      	moveq	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e022      	b.n	8005486 <HAL_TIM_PWM_Start+0x6a>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b04      	cmp	r3, #4
 8005444:	d109      	bne.n	800545a <HAL_TIM_PWM_Start+0x3e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b01      	cmp	r3, #1
 8005450:	bf14      	ite	ne
 8005452:	2301      	movne	r3, #1
 8005454:	2300      	moveq	r3, #0
 8005456:	b2db      	uxtb	r3, r3
 8005458:	e015      	b.n	8005486 <HAL_TIM_PWM_Start+0x6a>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b08      	cmp	r3, #8
 800545e:	d109      	bne.n	8005474 <HAL_TIM_PWM_Start+0x58>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	bf14      	ite	ne
 800546c:	2301      	movne	r3, #1
 800546e:	2300      	moveq	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	e008      	b.n	8005486 <HAL_TIM_PWM_Start+0x6a>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	bf14      	ite	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2300      	moveq	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e07c      	b.n	8005588 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d104      	bne.n	800549e <HAL_TIM_PWM_Start+0x82>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800549c:	e013      	b.n	80054c6 <HAL_TIM_PWM_Start+0xaa>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Start+0x92>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ac:	e00b      	b.n	80054c6 <HAL_TIM_PWM_Start+0xaa>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d104      	bne.n	80054be <HAL_TIM_PWM_Start+0xa2>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054bc:	e003      	b.n	80054c6 <HAL_TIM_PWM_Start+0xaa>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2202      	movs	r2, #2
 80054c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2201      	movs	r2, #1
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f001 f990 	bl	80067f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005590 <HAL_TIM_PWM_Start+0x174>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <HAL_TIM_PWM_Start+0xcc>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005594 <HAL_TIM_PWM_Start+0x178>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d101      	bne.n	80054ec <HAL_TIM_PWM_Start+0xd0>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <HAL_TIM_PWM_Start+0xd2>
 80054ec:	2300      	movs	r3, #0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005500:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a22      	ldr	r2, [pc, #136]	@ (8005590 <HAL_TIM_PWM_Start+0x174>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d022      	beq.n	8005552 <HAL_TIM_PWM_Start+0x136>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005514:	d01d      	beq.n	8005552 <HAL_TIM_PWM_Start+0x136>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1f      	ldr	r2, [pc, #124]	@ (8005598 <HAL_TIM_PWM_Start+0x17c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d018      	beq.n	8005552 <HAL_TIM_PWM_Start+0x136>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1d      	ldr	r2, [pc, #116]	@ (800559c <HAL_TIM_PWM_Start+0x180>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <HAL_TIM_PWM_Start+0x136>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1c      	ldr	r2, [pc, #112]	@ (80055a0 <HAL_TIM_PWM_Start+0x184>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00e      	beq.n	8005552 <HAL_TIM_PWM_Start+0x136>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a16      	ldr	r2, [pc, #88]	@ (8005594 <HAL_TIM_PWM_Start+0x178>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d009      	beq.n	8005552 <HAL_TIM_PWM_Start+0x136>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a18      	ldr	r2, [pc, #96]	@ (80055a4 <HAL_TIM_PWM_Start+0x188>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_TIM_PWM_Start+0x136>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a16      	ldr	r2, [pc, #88]	@ (80055a8 <HAL_TIM_PWM_Start+0x18c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d111      	bne.n	8005576 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b06      	cmp	r3, #6
 8005562:	d010      	beq.n	8005586 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005574:	e007      	b.n	8005586 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0201 	orr.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40010000 	.word	0x40010000
 8005594:	40010400 	.word	0x40010400
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800
 80055a0:	40000c00 	.word	0x40000c00
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40001800 	.word	0x40001800

080055ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e041      	b.n	8005642 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f839 	bl	800564a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f000 fce2 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d104      	bne.n	800567e <HAL_TIM_IC_Start_IT+0x1e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800567a:	b2db      	uxtb	r3, r3
 800567c:	e013      	b.n	80056a6 <HAL_TIM_IC_Start_IT+0x46>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b04      	cmp	r3, #4
 8005682:	d104      	bne.n	800568e <HAL_TIM_IC_Start_IT+0x2e>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800568a:	b2db      	uxtb	r3, r3
 800568c:	e00b      	b.n	80056a6 <HAL_TIM_IC_Start_IT+0x46>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b08      	cmp	r3, #8
 8005692:	d104      	bne.n	800569e <HAL_TIM_IC_Start_IT+0x3e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800569a:	b2db      	uxtb	r3, r3
 800569c:	e003      	b.n	80056a6 <HAL_TIM_IC_Start_IT+0x46>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d104      	bne.n	80056b8 <HAL_TIM_IC_Start_IT+0x58>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	e013      	b.n	80056e0 <HAL_TIM_IC_Start_IT+0x80>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d104      	bne.n	80056c8 <HAL_TIM_IC_Start_IT+0x68>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	e00b      	b.n	80056e0 <HAL_TIM_IC_Start_IT+0x80>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b08      	cmp	r3, #8
 80056cc:	d104      	bne.n	80056d8 <HAL_TIM_IC_Start_IT+0x78>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	e003      	b.n	80056e0 <HAL_TIM_IC_Start_IT+0x80>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80056e2:	7bbb      	ldrb	r3, [r7, #14]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d102      	bne.n	80056ee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80056e8:	7b7b      	ldrb	r3, [r7, #13]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d001      	beq.n	80056f2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e0cc      	b.n	800588c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d104      	bne.n	8005702 <HAL_TIM_IC_Start_IT+0xa2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005700:	e013      	b.n	800572a <HAL_TIM_IC_Start_IT+0xca>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b04      	cmp	r3, #4
 8005706:	d104      	bne.n	8005712 <HAL_TIM_IC_Start_IT+0xb2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005710:	e00b      	b.n	800572a <HAL_TIM_IC_Start_IT+0xca>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b08      	cmp	r3, #8
 8005716:	d104      	bne.n	8005722 <HAL_TIM_IC_Start_IT+0xc2>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005720:	e003      	b.n	800572a <HAL_TIM_IC_Start_IT+0xca>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <HAL_TIM_IC_Start_IT+0xda>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005738:	e013      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x102>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b04      	cmp	r3, #4
 800573e:	d104      	bne.n	800574a <HAL_TIM_IC_Start_IT+0xea>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005748:	e00b      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x102>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b08      	cmp	r3, #8
 800574e:	d104      	bne.n	800575a <HAL_TIM_IC_Start_IT+0xfa>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005758:	e003      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x102>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b0c      	cmp	r3, #12
 8005766:	d841      	bhi.n	80057ec <HAL_TIM_IC_Start_IT+0x18c>
 8005768:	a201      	add	r2, pc, #4	@ (adr r2, 8005770 <HAL_TIM_IC_Start_IT+0x110>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	080057a5 	.word	0x080057a5
 8005774:	080057ed 	.word	0x080057ed
 8005778:	080057ed 	.word	0x080057ed
 800577c:	080057ed 	.word	0x080057ed
 8005780:	080057b7 	.word	0x080057b7
 8005784:	080057ed 	.word	0x080057ed
 8005788:	080057ed 	.word	0x080057ed
 800578c:	080057ed 	.word	0x080057ed
 8005790:	080057c9 	.word	0x080057c9
 8005794:	080057ed 	.word	0x080057ed
 8005798:	080057ed 	.word	0x080057ed
 800579c:	080057ed 	.word	0x080057ed
 80057a0:	080057db 	.word	0x080057db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0202 	orr.w	r2, r2, #2
 80057b2:	60da      	str	r2, [r3, #12]
      break;
 80057b4:	e01d      	b.n	80057f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0204 	orr.w	r2, r2, #4
 80057c4:	60da      	str	r2, [r3, #12]
      break;
 80057c6:	e014      	b.n	80057f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0208 	orr.w	r2, r2, #8
 80057d6:	60da      	str	r2, [r3, #12]
      break;
 80057d8:	e00b      	b.n	80057f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0210 	orr.w	r2, r2, #16
 80057e8:	60da      	str	r2, [r3, #12]
      break;
 80057ea:	e002      	b.n	80057f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      break;
 80057f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d148      	bne.n	800588a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2201      	movs	r2, #1
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fff7 	bl	80067f4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a22      	ldr	r2, [pc, #136]	@ (8005894 <HAL_TIM_IC_Start_IT+0x234>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d022      	beq.n	8005856 <HAL_TIM_IC_Start_IT+0x1f6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005818:	d01d      	beq.n	8005856 <HAL_TIM_IC_Start_IT+0x1f6>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1e      	ldr	r2, [pc, #120]	@ (8005898 <HAL_TIM_IC_Start_IT+0x238>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d018      	beq.n	8005856 <HAL_TIM_IC_Start_IT+0x1f6>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1c      	ldr	r2, [pc, #112]	@ (800589c <HAL_TIM_IC_Start_IT+0x23c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_TIM_IC_Start_IT+0x1f6>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1b      	ldr	r2, [pc, #108]	@ (80058a0 <HAL_TIM_IC_Start_IT+0x240>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_TIM_IC_Start_IT+0x1f6>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a19      	ldr	r2, [pc, #100]	@ (80058a4 <HAL_TIM_IC_Start_IT+0x244>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_TIM_IC_Start_IT+0x1f6>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a18      	ldr	r2, [pc, #96]	@ (80058a8 <HAL_TIM_IC_Start_IT+0x248>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_TIM_IC_Start_IT+0x1f6>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a16      	ldr	r2, [pc, #88]	@ (80058ac <HAL_TIM_IC_Start_IT+0x24c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d111      	bne.n	800587a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2b06      	cmp	r3, #6
 8005866:	d010      	beq.n	800588a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005878:	e007      	b.n	800588a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800588a:	7bfb      	ldrb	r3, [r7, #15]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40010000 	.word	0x40010000
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40010400 	.word	0x40010400
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40001800 	.word	0x40001800

080058b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d020      	beq.n	8005914 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01b      	beq.n	8005914 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0202 	mvn.w	r2, #2
 80058e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fb f930 	bl	8000b60 <HAL_TIM_IC_CaptureCallback>
 8005900:	e005      	b.n	800590e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fb38 	bl	8005f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fb3f 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	d020      	beq.n	8005960 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01b      	beq.n	8005960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0204 	mvn.w	r2, #4
 8005930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fb f90a 	bl	8000b60 <HAL_TIM_IC_CaptureCallback>
 800594c:	e005      	b.n	800595a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fb12 	bl	8005f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fb19 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d020      	beq.n	80059ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01b      	beq.n	80059ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0208 	mvn.w	r2, #8
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2204      	movs	r2, #4
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fb f8e4 	bl	8000b60 <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 faec 	bl	8005f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 faf3 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 0310 	and.w	r3, r3, #16
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d020      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01b      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0210 	mvn.w	r2, #16
 80059c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2208      	movs	r2, #8
 80059ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fb f8be 	bl	8000b60 <HAL_TIM_IC_CaptureCallback>
 80059e4:	e005      	b.n	80059f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fac6 	bl	8005f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 facd 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0201 	mvn.w	r2, #1
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 faa4 	bl	8005f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 ffd8 	bl	80069f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa9e 	bl	8005fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00c      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0220 	mvn.w	r2, #32
 8005a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 ffaa 	bl	80069dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_IC_ConfigChannel+0x1e>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e088      	b.n	8005bc0 <HAL_TIM_IC_ConfigChannel+0x130>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d11b      	bne.n	8005af4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005acc:	f000 fcce 	bl	800646c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 020c 	bic.w	r2, r2, #12
 8005ade:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6999      	ldr	r1, [r3, #24]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	619a      	str	r2, [r3, #24]
 8005af2:	e060      	b.n	8005bb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d11c      	bne.n	8005b34 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005b0a:	f000 fd52 	bl	80065b2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005b1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6999      	ldr	r1, [r3, #24]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	021a      	lsls	r2, r3, #8
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	619a      	str	r2, [r3, #24]
 8005b32:	e040      	b.n	8005bb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d11b      	bne.n	8005b72 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005b4a:	f000 fd9f 	bl	800668c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 020c 	bic.w	r2, r2, #12
 8005b5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69d9      	ldr	r1, [r3, #28]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	61da      	str	r2, [r3, #28]
 8005b70:	e021      	b.n	8005bb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b0c      	cmp	r3, #12
 8005b76:	d11c      	bne.n	8005bb2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005b88:	f000 fdbc 	bl	8006704 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	69da      	ldr	r2, [r3, #28]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005b9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69d9      	ldr	r1, [r3, #28]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	021a      	lsls	r2, r3, #8
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	61da      	str	r2, [r3, #28]
 8005bb0:	e001      	b.n	8005bb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e0ae      	b.n	8005d44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b0c      	cmp	r3, #12
 8005bf2:	f200 809f 	bhi.w	8005d34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c31 	.word	0x08005c31
 8005c00:	08005d35 	.word	0x08005d35
 8005c04:	08005d35 	.word	0x08005d35
 8005c08:	08005d35 	.word	0x08005d35
 8005c0c:	08005c71 	.word	0x08005c71
 8005c10:	08005d35 	.word	0x08005d35
 8005c14:	08005d35 	.word	0x08005d35
 8005c18:	08005d35 	.word	0x08005d35
 8005c1c:	08005cb3 	.word	0x08005cb3
 8005c20:	08005d35 	.word	0x08005d35
 8005c24:	08005d35 	.word	0x08005d35
 8005c28:	08005d35 	.word	0x08005d35
 8005c2c:	08005cf3 	.word	0x08005cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68b9      	ldr	r1, [r7, #8]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fa68 	bl	800610c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0208 	orr.w	r2, r2, #8
 8005c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0204 	bic.w	r2, r2, #4
 8005c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6999      	ldr	r1, [r3, #24]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	619a      	str	r2, [r3, #24]
      break;
 8005c6e:	e064      	b.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fab8 	bl	80061ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6999      	ldr	r1, [r3, #24]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	021a      	lsls	r2, r3, #8
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	619a      	str	r2, [r3, #24]
      break;
 8005cb0:	e043      	b.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fb0d 	bl	80062d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0208 	orr.w	r2, r2, #8
 8005ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0204 	bic.w	r2, r2, #4
 8005cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69d9      	ldr	r1, [r3, #28]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	61da      	str	r2, [r3, #28]
      break;
 8005cf0:	e023      	b.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fb61 	bl	80063c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69d9      	ldr	r1, [r3, #28]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	021a      	lsls	r2, r3, #8
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	61da      	str	r2, [r3, #28]
      break;
 8005d32:	e002      	b.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	75fb      	strb	r3, [r7, #23]
      break;
 8005d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_TIM_ConfigClockSource+0x1c>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e0b4      	b.n	8005ed2 <HAL_TIM_ConfigClockSource+0x186>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005da0:	d03e      	beq.n	8005e20 <HAL_TIM_ConfigClockSource+0xd4>
 8005da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005da6:	f200 8087 	bhi.w	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dae:	f000 8086 	beq.w	8005ebe <HAL_TIM_ConfigClockSource+0x172>
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005db6:	d87f      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005db8:	2b70      	cmp	r3, #112	@ 0x70
 8005dba:	d01a      	beq.n	8005df2 <HAL_TIM_ConfigClockSource+0xa6>
 8005dbc:	2b70      	cmp	r3, #112	@ 0x70
 8005dbe:	d87b      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc0:	2b60      	cmp	r3, #96	@ 0x60
 8005dc2:	d050      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0x11a>
 8005dc4:	2b60      	cmp	r3, #96	@ 0x60
 8005dc6:	d877      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc8:	2b50      	cmp	r3, #80	@ 0x50
 8005dca:	d03c      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0xfa>
 8005dcc:	2b50      	cmp	r3, #80	@ 0x50
 8005dce:	d873      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd0:	2b40      	cmp	r3, #64	@ 0x40
 8005dd2:	d058      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x13a>
 8005dd4:	2b40      	cmp	r3, #64	@ 0x40
 8005dd6:	d86f      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd8:	2b30      	cmp	r3, #48	@ 0x30
 8005dda:	d064      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8005ddc:	2b30      	cmp	r3, #48	@ 0x30
 8005dde:	d86b      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	d060      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8005de4:	2b20      	cmp	r3, #32
 8005de6:	d867      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d05c      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d05a      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8005df0:	e062      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e02:	f000 fcd7 	bl	80067b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	609a      	str	r2, [r3, #8]
      break;
 8005e1e:	e04f      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e30:	f000 fcc0 	bl	80067b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e42:	609a      	str	r2, [r3, #8]
      break;
 8005e44:	e03c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e52:	461a      	mov	r2, r3
 8005e54:	f000 fb7e 	bl	8006554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2150      	movs	r1, #80	@ 0x50
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fc8d 	bl	800677e <TIM_ITRx_SetConfig>
      break;
 8005e64:	e02c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e72:	461a      	mov	r2, r3
 8005e74:	f000 fbda 	bl	800662c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2160      	movs	r1, #96	@ 0x60
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fc7d 	bl	800677e <TIM_ITRx_SetConfig>
      break;
 8005e84:	e01c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e92:	461a      	mov	r2, r3
 8005e94:	f000 fb5e 	bl	8006554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2140      	movs	r1, #64	@ 0x40
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fc6d 	bl	800677e <TIM_ITRx_SetConfig>
      break;
 8005ea4:	e00c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	f000 fc64 	bl	800677e <TIM_ITRx_SetConfig>
      break;
 8005eb6:	e003      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	73fb      	strb	r3, [r7, #15]
      break;
 8005ebc:	e000      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b0c      	cmp	r3, #12
 8005eee:	d831      	bhi.n	8005f54 <HAL_TIM_ReadCapturedValue+0x78>
 8005ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef6:	bf00      	nop
 8005ef8:	08005f2d 	.word	0x08005f2d
 8005efc:	08005f55 	.word	0x08005f55
 8005f00:	08005f55 	.word	0x08005f55
 8005f04:	08005f55 	.word	0x08005f55
 8005f08:	08005f37 	.word	0x08005f37
 8005f0c:	08005f55 	.word	0x08005f55
 8005f10:	08005f55 	.word	0x08005f55
 8005f14:	08005f55 	.word	0x08005f55
 8005f18:	08005f41 	.word	0x08005f41
 8005f1c:	08005f55 	.word	0x08005f55
 8005f20:	08005f55 	.word	0x08005f55
 8005f24:	08005f55 	.word	0x08005f55
 8005f28:	08005f4b 	.word	0x08005f4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f32:	60fb      	str	r3, [r7, #12]

      break;
 8005f34:	e00f      	b.n	8005f56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	60fb      	str	r3, [r7, #12]

      break;
 8005f3e:	e00a      	b.n	8005f56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f46:	60fb      	str	r3, [r7, #12]

      break;
 8005f48:	e005      	b.n	8005f56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f50:	60fb      	str	r3, [r7, #12]

      break;
 8005f52:	e000      	b.n	8005f56 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005f54:	bf00      	nop
  }

  return tmpreg;
 8005f56:	68fb      	ldr	r3, [r7, #12]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a46      	ldr	r2, [pc, #280]	@ (80060e0 <TIM_Base_SetConfig+0x12c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d013      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd2:	d00f      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a43      	ldr	r2, [pc, #268]	@ (80060e4 <TIM_Base_SetConfig+0x130>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00b      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a42      	ldr	r2, [pc, #264]	@ (80060e8 <TIM_Base_SetConfig+0x134>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d007      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a41      	ldr	r2, [pc, #260]	@ (80060ec <TIM_Base_SetConfig+0x138>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a40      	ldr	r2, [pc, #256]	@ (80060f0 <TIM_Base_SetConfig+0x13c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d108      	bne.n	8006006 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a35      	ldr	r2, [pc, #212]	@ (80060e0 <TIM_Base_SetConfig+0x12c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d02b      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006014:	d027      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a32      	ldr	r2, [pc, #200]	@ (80060e4 <TIM_Base_SetConfig+0x130>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d023      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a31      	ldr	r2, [pc, #196]	@ (80060e8 <TIM_Base_SetConfig+0x134>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d01f      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a30      	ldr	r2, [pc, #192]	@ (80060ec <TIM_Base_SetConfig+0x138>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d01b      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2f      	ldr	r2, [pc, #188]	@ (80060f0 <TIM_Base_SetConfig+0x13c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d017      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2e      	ldr	r2, [pc, #184]	@ (80060f4 <TIM_Base_SetConfig+0x140>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d013      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2d      	ldr	r2, [pc, #180]	@ (80060f8 <TIM_Base_SetConfig+0x144>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00f      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2c      	ldr	r2, [pc, #176]	@ (80060fc <TIM_Base_SetConfig+0x148>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00b      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2b      	ldr	r2, [pc, #172]	@ (8006100 <TIM_Base_SetConfig+0x14c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d007      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2a      	ldr	r2, [pc, #168]	@ (8006104 <TIM_Base_SetConfig+0x150>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d003      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a29      	ldr	r2, [pc, #164]	@ (8006108 <TIM_Base_SetConfig+0x154>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d108      	bne.n	8006078 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800606c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4313      	orrs	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a10      	ldr	r2, [pc, #64]	@ (80060e0 <TIM_Base_SetConfig+0x12c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_Base_SetConfig+0xf8>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a12      	ldr	r2, [pc, #72]	@ (80060f0 <TIM_Base_SetConfig+0x13c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d103      	bne.n	80060b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d105      	bne.n	80060d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	f023 0201 	bic.w	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	611a      	str	r2, [r3, #16]
  }
}
 80060d2:	bf00      	nop
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	40010000 	.word	0x40010000
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40000800 	.word	0x40000800
 80060ec:	40000c00 	.word	0x40000c00
 80060f0:	40010400 	.word	0x40010400
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40014400 	.word	0x40014400
 80060fc:	40014800 	.word	0x40014800
 8006100:	40001800 	.word	0x40001800
 8006104:	40001c00 	.word	0x40001c00
 8006108:	40002000 	.word	0x40002000

0800610c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	f023 0201 	bic.w	r2, r3, #1
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800613a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0303 	bic.w	r3, r3, #3
 8006142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f023 0302 	bic.w	r3, r3, #2
 8006154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a20      	ldr	r2, [pc, #128]	@ (80061e4 <TIM_OC1_SetConfig+0xd8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_OC1_SetConfig+0x64>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a1f      	ldr	r2, [pc, #124]	@ (80061e8 <TIM_OC1_SetConfig+0xdc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d10c      	bne.n	800618a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f023 0308 	bic.w	r3, r3, #8
 8006176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f023 0304 	bic.w	r3, r3, #4
 8006188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a15      	ldr	r2, [pc, #84]	@ (80061e4 <TIM_OC1_SetConfig+0xd8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d003      	beq.n	800619a <TIM_OC1_SetConfig+0x8e>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a14      	ldr	r2, [pc, #80]	@ (80061e8 <TIM_OC1_SetConfig+0xdc>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d111      	bne.n	80061be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	621a      	str	r2, [r3, #32]
}
 80061d8:	bf00      	nop
 80061da:	371c      	adds	r7, #28
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40010400 	.word	0x40010400

080061ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	f023 0210 	bic.w	r2, r3, #16
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800621a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f023 0320 	bic.w	r3, r3, #32
 8006236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a22      	ldr	r2, [pc, #136]	@ (80062d0 <TIM_OC2_SetConfig+0xe4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_OC2_SetConfig+0x68>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a21      	ldr	r2, [pc, #132]	@ (80062d4 <TIM_OC2_SetConfig+0xe8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d10d      	bne.n	8006270 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800625a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800626e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a17      	ldr	r2, [pc, #92]	@ (80062d0 <TIM_OC2_SetConfig+0xe4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_OC2_SetConfig+0x94>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a16      	ldr	r2, [pc, #88]	@ (80062d4 <TIM_OC2_SetConfig+0xe8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d113      	bne.n	80062a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006286:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800628e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40010000 	.word	0x40010000
 80062d4:	40010400 	.word	0x40010400

080062d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0303 	bic.w	r3, r3, #3
 800630e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a21      	ldr	r2, [pc, #132]	@ (80063b8 <TIM_OC3_SetConfig+0xe0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d003      	beq.n	800633e <TIM_OC3_SetConfig+0x66>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a20      	ldr	r2, [pc, #128]	@ (80063bc <TIM_OC3_SetConfig+0xe4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d10d      	bne.n	800635a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a16      	ldr	r2, [pc, #88]	@ (80063b8 <TIM_OC3_SetConfig+0xe0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d003      	beq.n	800636a <TIM_OC3_SetConfig+0x92>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a15      	ldr	r2, [pc, #84]	@ (80063bc <TIM_OC3_SetConfig+0xe4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d113      	bne.n	8006392 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	621a      	str	r2, [r3, #32]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	40010000 	.word	0x40010000
 80063bc:	40010400 	.word	0x40010400

080063c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800640a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	031b      	lsls	r3, r3, #12
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a12      	ldr	r2, [pc, #72]	@ (8006464 <TIM_OC4_SetConfig+0xa4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d003      	beq.n	8006428 <TIM_OC4_SetConfig+0x68>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a11      	ldr	r2, [pc, #68]	@ (8006468 <TIM_OC4_SetConfig+0xa8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d109      	bne.n	800643c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800642e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	019b      	lsls	r3, r3, #6
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40010000 	.word	0x40010000
 8006468:	40010400 	.word	0x40010400

0800646c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	f023 0201 	bic.w	r2, r3, #1
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4a28      	ldr	r2, [pc, #160]	@ (8006538 <TIM_TI1_SetConfig+0xcc>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d01b      	beq.n	80064d2 <TIM_TI1_SetConfig+0x66>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a0:	d017      	beq.n	80064d2 <TIM_TI1_SetConfig+0x66>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4a25      	ldr	r2, [pc, #148]	@ (800653c <TIM_TI1_SetConfig+0xd0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d013      	beq.n	80064d2 <TIM_TI1_SetConfig+0x66>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4a24      	ldr	r2, [pc, #144]	@ (8006540 <TIM_TI1_SetConfig+0xd4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00f      	beq.n	80064d2 <TIM_TI1_SetConfig+0x66>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4a23      	ldr	r2, [pc, #140]	@ (8006544 <TIM_TI1_SetConfig+0xd8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00b      	beq.n	80064d2 <TIM_TI1_SetConfig+0x66>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4a22      	ldr	r2, [pc, #136]	@ (8006548 <TIM_TI1_SetConfig+0xdc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d007      	beq.n	80064d2 <TIM_TI1_SetConfig+0x66>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a21      	ldr	r2, [pc, #132]	@ (800654c <TIM_TI1_SetConfig+0xe0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_TI1_SetConfig+0x66>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4a20      	ldr	r2, [pc, #128]	@ (8006550 <TIM_TI1_SetConfig+0xe4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d101      	bne.n	80064d6 <TIM_TI1_SetConfig+0x6a>
 80064d2:	2301      	movs	r3, #1
 80064d4:	e000      	b.n	80064d8 <TIM_TI1_SetConfig+0x6c>
 80064d6:	2300      	movs	r3, #0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d008      	beq.n	80064ee <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f023 0303 	bic.w	r3, r3, #3
 80064e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	e003      	b.n	80064f6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	b2db      	uxtb	r3, r3
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f023 030a 	bic.w	r3, r3, #10
 8006510:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f003 030a 	and.w	r3, r3, #10
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	621a      	str	r2, [r3, #32]
}
 800652a:	bf00      	nop
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40010000 	.word	0x40010000
 800653c:	40000400 	.word	0x40000400
 8006540:	40000800 	.word	0x40000800
 8006544:	40000c00 	.word	0x40000c00
 8006548:	40010400 	.word	0x40010400
 800654c:	40014000 	.word	0x40014000
 8006550:	40001800 	.word	0x40001800

08006554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f023 0201 	bic.w	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800657e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f023 030a 	bic.w	r3, r3, #10
 8006590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	621a      	str	r2, [r3, #32]
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b087      	sub	sp, #28
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	607a      	str	r2, [r7, #4]
 80065be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f023 0210 	bic.w	r2, r3, #16
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	031b      	lsls	r3, r3, #12
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006604:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	621a      	str	r2, [r3, #32]
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	f023 0210 	bic.w	r2, r3, #16
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	031b      	lsls	r3, r3, #12
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006668:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	621a      	str	r2, [r3, #32]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f023 0303 	bic.w	r3, r3, #3
 80066b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4313      	orrs	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80066dc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	621a      	str	r2, [r3, #32]
}
 80066f8:	bf00      	nop
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006730:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006742:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	031b      	lsls	r3, r3, #12
 8006748:	b29b      	uxth	r3, r3
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006756:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	031b      	lsls	r3, r3, #12
 800675c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800677e:	b480      	push	{r7}
 8006780:	b085      	sub	sp, #20
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	f043 0307 	orr.w	r3, r3, #7
 80067a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	609a      	str	r2, [r3, #8]
}
 80067a8:	bf00      	nop
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	021a      	lsls	r2, r3, #8
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4313      	orrs	r3, r2
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	609a      	str	r2, [r3, #8]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	2201      	movs	r2, #1
 8006808:	fa02 f303 	lsl.w	r3, r2, r3
 800680c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1a      	ldr	r2, [r3, #32]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	43db      	mvns	r3, r3
 8006816:	401a      	ands	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a1a      	ldr	r2, [r3, #32]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	fa01 f303 	lsl.w	r3, r1, r3
 800682c:	431a      	orrs	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	621a      	str	r2, [r3, #32]
}
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
	...

08006840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006854:	2302      	movs	r3, #2
 8006856:	e05a      	b.n	800690e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800687e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a21      	ldr	r2, [pc, #132]	@ (800691c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d022      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a4:	d01d      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d018      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d013      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1a      	ldr	r2, [pc, #104]	@ (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00e      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a18      	ldr	r2, [pc, #96]	@ (800692c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d009      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a17      	ldr	r2, [pc, #92]	@ (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d004      	beq.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a15      	ldr	r2, [pc, #84]	@ (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d10c      	bne.n	80068fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	40010000 	.word	0x40010000
 8006920:	40000400 	.word	0x40000400
 8006924:	40000800 	.word	0x40000800
 8006928:	40000c00 	.word	0x40000c00
 800692c:	40010400 	.word	0x40010400
 8006930:	40014000 	.word	0x40014000
 8006934:	40001800 	.word	0x40001800

08006938 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800694c:	2b01      	cmp	r3, #1
 800694e:	d101      	bne.n	8006954 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006950:	2302      	movs	r3, #2
 8006952:	e03d      	b.n	80069d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a04:	b084      	sub	sp, #16
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	f107 001c 	add.w	r0, r7, #28
 8006a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d123      	bne.n	8006a66 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d105      	bne.n	8006a5a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f9dc 	bl	8006e18 <USB_CoreReset>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]
 8006a64:	e01b      	b.n	8006a9e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f9d0 	bl	8006e18 <USB_CoreReset>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d106      	bne.n	8006a92 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a90:	e005      	b.n	8006a9e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a9e:	7fbb      	ldrb	r3, [r7, #30]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d10b      	bne.n	8006abc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f043 0206 	orr.w	r2, r3, #6
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f043 0220 	orr.w	r2, r3, #32
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ac8:	b004      	add	sp, #16
 8006aca:	4770      	bx	lr

08006acc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f043 0201 	orr.w	r2, r3, #1
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f023 0201 	bic.w	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b2c:	78fb      	ldrb	r3, [r7, #3]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d115      	bne.n	8006b5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b3e:	200a      	movs	r0, #10
 8006b40:	f7fa fb70 	bl	8001224 <HAL_Delay>
      ms += 10U;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	330a      	adds	r3, #10
 8006b48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f956 	bl	8006dfc <USB_GetMode>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d01e      	beq.n	8006b94 <USB_SetCurrentMode+0x84>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b5a:	d9f0      	bls.n	8006b3e <USB_SetCurrentMode+0x2e>
 8006b5c:	e01a      	b.n	8006b94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d115      	bne.n	8006b90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b70:	200a      	movs	r0, #10
 8006b72:	f7fa fb57 	bl	8001224 <HAL_Delay>
      ms += 10U;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	330a      	adds	r3, #10
 8006b7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f93d 	bl	8006dfc <USB_GetMode>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <USB_SetCurrentMode+0x84>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b8c:	d9f0      	bls.n	8006b70 <USB_SetCurrentMode+0x60>
 8006b8e:	e001      	b.n	8006b94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e005      	b.n	8006ba0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2bc8      	cmp	r3, #200	@ 0xc8
 8006b98:	d101      	bne.n	8006b9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e000      	b.n	8006ba0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bc2:	d901      	bls.n	8006bc8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e01b      	b.n	8006c00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	daf2      	bge.n	8006bb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	019b      	lsls	r3, r3, #6
 8006bd8:	f043 0220 	orr.w	r2, r3, #32
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3301      	adds	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bec:	d901      	bls.n	8006bf2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e006      	b.n	8006c00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d0f0      	beq.n	8006be0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c24:	d901      	bls.n	8006c2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e018      	b.n	8006c5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	daf2      	bge.n	8006c18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2210      	movs	r2, #16
 8006c3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c48:	d901      	bls.n	8006c4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e006      	b.n	8006c5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0310 	and.w	r3, r3, #16
 8006c56:	2b10      	cmp	r3, #16
 8006c58:	d0f0      	beq.n	8006c3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b089      	sub	sp, #36	@ 0x24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4611      	mov	r1, r2
 8006c74:	461a      	mov	r2, r3
 8006c76:	460b      	mov	r3, r1
 8006c78:	71fb      	strb	r3, [r7, #7]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d123      	bne.n	8006cd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c8e:	88bb      	ldrh	r3, [r7, #4]
 8006c90:	3303      	adds	r3, #3
 8006c92:	089b      	lsrs	r3, r3, #2
 8006c94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c96:	2300      	movs	r3, #0
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	e018      	b.n	8006cce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	031a      	lsls	r2, r3, #12
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ca8:	461a      	mov	r2, r3
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	61bb      	str	r3, [r7, #24]
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d3e2      	bcc.n	8006c9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3724      	adds	r7, #36	@ 0x24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b08b      	sub	sp, #44	@ 0x2c
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006cfa:	88fb      	ldrh	r3, [r7, #6]
 8006cfc:	089b      	lsrs	r3, r3, #2
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	f003 0303 	and.w	r3, r3, #3
 8006d08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	623b      	str	r3, [r7, #32]
 8006d0e:	e014      	b.n	8006d3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	3301      	adds	r3, #1
 8006d20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d24:	3301      	adds	r3, #1
 8006d26:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d30:	3301      	adds	r3, #1
 8006d32:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	3301      	adds	r3, #1
 8006d38:	623b      	str	r3, [r7, #32]
 8006d3a:	6a3a      	ldr	r2, [r7, #32]
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d3e6      	bcc.n	8006d10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d42:	8bfb      	ldrh	r3, [r7, #30]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01e      	beq.n	8006d86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d52:	461a      	mov	r2, r3
 8006d54:	f107 0310 	add.w	r3, r7, #16
 8006d58:	6812      	ldr	r2, [r2, #0]
 8006d5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	701a      	strb	r2, [r3, #0]
      i++;
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	3301      	adds	r3, #1
 8006d72:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	3301      	adds	r3, #1
 8006d78:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006d7a:	8bfb      	ldrh	r3, [r7, #30]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d80:	8bfb      	ldrh	r3, [r7, #30]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1ea      	bne.n	8006d5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	372c      	adds	r7, #44	@ 0x2c
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4013      	ands	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006dac:	68fb      	ldr	r3, [r7, #12]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b085      	sub	sp, #20
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006dda:	78fb      	ldrb	r3, [r7, #3]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	4013      	ands	r3, r2
 8006dec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006dee:	68bb      	ldr	r3, [r7, #8]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	f003 0301 	and.w	r3, r3, #1
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e30:	d901      	bls.n	8006e36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e01b      	b.n	8006e6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	daf2      	bge.n	8006e24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f043 0201 	orr.w	r2, r3, #1
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3301      	adds	r3, #1
 8006e52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e5a:	d901      	bls.n	8006e60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e006      	b.n	8006e6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d0f0      	beq.n	8006e4e <USB_CoreReset+0x36>

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
	...

08006e7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b086      	sub	sp, #24
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006e8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ebe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d119      	bne.n	8006f06 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d10a      	bne.n	8006ef0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ee8:	f043 0304 	orr.w	r3, r3, #4
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	e014      	b.n	8006f1a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006efe:	f023 0304 	bic.w	r3, r3, #4
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	e009      	b.n	8006f1a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006f14:	f023 0304 	bic.w	r3, r3, #4
 8006f18:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f1a:	2110      	movs	r1, #16
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff fe43 	bl	8006ba8 <USB_FlushTxFifo>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff fe6d 	bl	8006c0c <USB_FlushRxFifo>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	e015      	b.n	8006f6e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f04f 33ff 	mov.w	r3, #4294967295
 8006f54:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f62:	461a      	mov	r2, r3
 8006f64:	2300      	movs	r3, #0
 8006f66:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	613b      	str	r3, [r7, #16]
 8006f6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f72:	461a      	mov	r2, r3
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d3e3      	bcc.n	8006f42 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f04f 32ff 	mov.w	r2, #4294967295
 8006f86:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a18      	ldr	r2, [pc, #96]	@ (8006fec <USB_HostInit+0x170>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d10b      	bne.n	8006fa8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f96:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a15      	ldr	r2, [pc, #84]	@ (8006ff0 <USB_HostInit+0x174>)
 8006f9c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a14      	ldr	r2, [pc, #80]	@ (8006ff4 <USB_HostInit+0x178>)
 8006fa2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006fa6:	e009      	b.n	8006fbc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2280      	movs	r2, #128	@ 0x80
 8006fac:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a11      	ldr	r2, [pc, #68]	@ (8006ff8 <USB_HostInit+0x17c>)
 8006fb2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a11      	ldr	r2, [pc, #68]	@ (8006ffc <USB_HostInit+0x180>)
 8006fb8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d105      	bne.n	8006fd0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	f043 0210 	orr.w	r2, r3, #16
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699a      	ldr	r2, [r3, #24]
 8006fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8007000 <USB_HostInit+0x184>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fe8:	b004      	add	sp, #16
 8006fea:	4770      	bx	lr
 8006fec:	40040000 	.word	0x40040000
 8006ff0:	01000200 	.word	0x01000200
 8006ff4:	00e00300 	.word	0x00e00300
 8006ff8:	00600080 	.word	0x00600080
 8006ffc:	004000e0 	.word	0x004000e0
 8007000:	a3200008 	.word	0xa3200008

08007004 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007022:	f023 0303 	bic.w	r3, r3, #3
 8007026:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	68f9      	ldr	r1, [r7, #12]
 8007038:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800703c:	4313      	orrs	r3, r2
 800703e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d107      	bne.n	8007056 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800704c:	461a      	mov	r2, r3
 800704e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007052:	6053      	str	r3, [r2, #4]
 8007054:	e00c      	b.n	8007070 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007056:	78fb      	ldrb	r3, [r7, #3]
 8007058:	2b02      	cmp	r3, #2
 800705a:	d107      	bne.n	800706c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007062:	461a      	mov	r2, r3
 8007064:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007068:	6053      	str	r3, [r2, #4]
 800706a:	e001      	b.n	8007070 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e000      	b.n	8007072 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800709e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80070a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070ac:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80070ae:	2064      	movs	r0, #100	@ 0x64
 80070b0:	f7fa f8b8 	bl	8001224 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80070bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070c0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80070c2:	200a      	movs	r0, #10
 80070c4:	f7fa f8ae 	bl	8001224 <HAL_Delay>

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80070f6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d109      	bne.n	8007116 <USB_DriveVbus+0x44>
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d106      	bne.n	8007116 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007110:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007114:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800711c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007120:	d109      	bne.n	8007136 <USB_DriveVbus+0x64>
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d106      	bne.n	8007136 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007130:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007134:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	0c5b      	lsrs	r3, r3, #17
 8007162:	f003 0303 	and.w	r3, r3, #3
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	b29b      	uxth	r3, r3
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	4608      	mov	r0, r1
 800719e:	4611      	mov	r1, r2
 80071a0:	461a      	mov	r2, r3
 80071a2:	4603      	mov	r3, r0
 80071a4:	70fb      	strb	r3, [r7, #3]
 80071a6:	460b      	mov	r3, r1
 80071a8:	70bb      	strb	r3, [r7, #2]
 80071aa:	4613      	mov	r3, r2
 80071ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80071b6:	78fb      	ldrb	r3, [r7, #3]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071c2:	461a      	mov	r2, r3
 80071c4:	f04f 33ff 	mov.w	r3, #4294967295
 80071c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80071ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d87c      	bhi.n	80072cc <USB_HC_Init+0x138>
 80071d2:	a201      	add	r2, pc, #4	@ (adr r2, 80071d8 <USB_HC_Init+0x44>)
 80071d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d8:	080071e9 	.word	0x080071e9
 80071dc:	0800728f 	.word	0x0800728f
 80071e0:	080071e9 	.word	0x080071e9
 80071e4:	08007251 	.word	0x08007251
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071f4:	461a      	mov	r2, r3
 80071f6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80071fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80071fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007200:	2b00      	cmp	r3, #0
 8007202:	da10      	bge.n	8007226 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	4413      	add	r3, r2
 800720c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	78fa      	ldrb	r2, [r7, #3]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	440a      	add	r2, r1
 800721a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800721e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007222:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007224:	e055      	b.n	80072d2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a6f      	ldr	r2, [pc, #444]	@ (80073e8 <USB_HC_Init+0x254>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d151      	bne.n	80072d2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800722e:	78fb      	ldrb	r3, [r7, #3]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	4413      	add	r3, r2
 8007236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	78fa      	ldrb	r2, [r7, #3]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	440a      	add	r2, r1
 8007244:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007248:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800724c:	60d3      	str	r3, [r2, #12]
      break;
 800724e:	e040      	b.n	80072d2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	4413      	add	r3, r2
 8007258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800725c:	461a      	mov	r2, r3
 800725e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007262:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007264:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007268:	2b00      	cmp	r3, #0
 800726a:	da34      	bge.n	80072d6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	4413      	add	r3, r2
 8007274:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	78fa      	ldrb	r2, [r7, #3]
 800727c:	0151      	lsls	r1, r2, #5
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	440a      	add	r2, r1
 8007282:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800728a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800728c:	e023      	b.n	80072d6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	4413      	add	r3, r2
 8007296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800729a:	461a      	mov	r2, r3
 800729c:	f240 2325 	movw	r3, #549	@ 0x225
 80072a0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80072a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	da17      	bge.n	80072da <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80072aa:	78fb      	ldrb	r3, [r7, #3]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	78fa      	ldrb	r2, [r7, #3]
 80072ba:	0151      	lsls	r1, r2, #5
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	440a      	add	r2, r1
 80072c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072c4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80072c8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80072ca:	e006      	b.n	80072da <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	77fb      	strb	r3, [r7, #31]
      break;
 80072d0:	e004      	b.n	80072dc <USB_HC_Init+0x148>
      break;
 80072d2:	bf00      	nop
 80072d4:	e002      	b.n	80072dc <USB_HC_Init+0x148>
      break;
 80072d6:	bf00      	nop
 80072d8:	e000      	b.n	80072dc <USB_HC_Init+0x148>
      break;
 80072da:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80072dc:	78fb      	ldrb	r3, [r7, #3]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072e8:	461a      	mov	r2, r3
 80072ea:	2300      	movs	r3, #0
 80072ec:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80072ee:	78fb      	ldrb	r3, [r7, #3]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	78fa      	ldrb	r2, [r7, #3]
 80072fe:	0151      	lsls	r1, r2, #5
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	440a      	add	r2, r1
 8007304:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007308:	f043 0302 	orr.w	r3, r3, #2
 800730c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	78fb      	ldrb	r3, [r7, #3]
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	2101      	movs	r1, #1
 800731e:	fa01 f303 	lsl.w	r3, r1, r3
 8007322:	6939      	ldr	r1, [r7, #16]
 8007324:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007328:	4313      	orrs	r3, r2
 800732a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007338:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800733c:	2b00      	cmp	r3, #0
 800733e:	da03      	bge.n	8007348 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007340:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	e001      	b.n	800734c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff fef9 	bl	8007144 <USB_GetHostSpeed>
 8007352:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007354:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007358:	2b02      	cmp	r3, #2
 800735a:	d106      	bne.n	800736a <USB_HC_Init+0x1d6>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b02      	cmp	r3, #2
 8007360:	d003      	beq.n	800736a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007362:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	e001      	b.n	800736e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800736e:	787b      	ldrb	r3, [r7, #1]
 8007370:	059b      	lsls	r3, r3, #22
 8007372:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007376:	78bb      	ldrb	r3, [r7, #2]
 8007378:	02db      	lsls	r3, r3, #11
 800737a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800737e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007380:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007384:	049b      	lsls	r3, r3, #18
 8007386:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800738a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800738c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800738e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007392:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	431a      	orrs	r2, r3
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800739c:	78fa      	ldrb	r2, [r7, #3]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80073a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073ac:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80073ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d003      	beq.n	80073be <USB_HC_Init+0x22a>
 80073b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d10f      	bne.n	80073de <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	78fa      	ldrb	r2, [r7, #3]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80073dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80073de:	7ffb      	ldrb	r3, [r7, #31]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3720      	adds	r7, #32
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	40040000 	.word	0x40040000

080073ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08c      	sub	sp, #48	@ 0x30
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	4613      	mov	r3, r2
 80073f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	785b      	ldrb	r3, [r3, #1]
 8007402:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007404:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007408:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4a5d      	ldr	r2, [pc, #372]	@ (8007584 <USB_HC_StartXfer+0x198>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d12f      	bne.n	8007472 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007412:	79fb      	ldrb	r3, [r7, #7]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d11c      	bne.n	8007452 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	7c9b      	ldrb	r3, [r3, #18]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <USB_HC_StartXfer+0x3c>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	7c9b      	ldrb	r3, [r3, #18]
 8007424:	2b02      	cmp	r3, #2
 8007426:	d124      	bne.n	8007472 <USB_HC_StartXfer+0x86>
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	799b      	ldrb	r3, [r3, #6]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d120      	bne.n	8007472 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	4413      	add	r3, r2
 8007438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	0151      	lsls	r1, r2, #5
 8007442:	6a3a      	ldr	r2, [r7, #32]
 8007444:	440a      	add	r2, r1
 8007446:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800744a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744e:	60d3      	str	r3, [r2, #12]
 8007450:	e00f      	b.n	8007472 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	791b      	ldrb	r3, [r3, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10b      	bne.n	8007472 <USB_HC_StartXfer+0x86>
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	795b      	ldrb	r3, [r3, #5]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d107      	bne.n	8007472 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	4619      	mov	r1, r3
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 fb6b 	bl	8007b44 <USB_DoPing>
        return HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	e232      	b.n	80078d8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	799b      	ldrb	r3, [r3, #6]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d158      	bne.n	800752c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800747a:	2301      	movs	r3, #1
 800747c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	78db      	ldrb	r3, [r3, #3]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007486:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	8a92      	ldrh	r2, [r2, #20]
 800748c:	fb03 f202 	mul.w	r2, r3, r2
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	61da      	str	r2, [r3, #28]
 8007494:	e07c      	b.n	8007590 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	7c9b      	ldrb	r3, [r3, #18]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d130      	bne.n	8007500 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	2bbc      	cmp	r3, #188	@ 0xbc
 80074a4:	d918      	bls.n	80074d8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	8a9b      	ldrh	r3, [r3, #20]
 80074aa:	461a      	mov	r2, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	69da      	ldr	r2, [r3, #28]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d003      	beq.n	80074c8 <USB_HC_StartXfer+0xdc>
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d103      	bne.n	80074d0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2202      	movs	r2, #2
 80074cc:	60da      	str	r2, [r3, #12]
 80074ce:	e05f      	b.n	8007590 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2201      	movs	r2, #1
 80074d4:	60da      	str	r2, [r3, #12]
 80074d6:	e05b      	b.n	8007590 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	6a1a      	ldr	r2, [r3, #32]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d007      	beq.n	80074f8 <USB_HC_StartXfer+0x10c>
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d003      	beq.n	80074f8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2204      	movs	r2, #4
 80074f4:	60da      	str	r2, [r3, #12]
 80074f6:	e04b      	b.n	8007590 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2203      	movs	r2, #3
 80074fc:	60da      	str	r2, [r3, #12]
 80074fe:	e047      	b.n	8007590 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007500:	79fb      	ldrb	r3, [r7, #7]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d10d      	bne.n	8007522 <USB_HC_StartXfer+0x136>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	8a92      	ldrh	r2, [r2, #20]
 800750e:	4293      	cmp	r3, r2
 8007510:	d907      	bls.n	8007522 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007512:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	8a92      	ldrh	r2, [r2, #20]
 8007518:	fb03 f202 	mul.w	r2, r3, r2
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	61da      	str	r2, [r3, #28]
 8007520:	e036      	b.n	8007590 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6a1a      	ldr	r2, [r3, #32]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	61da      	str	r2, [r3, #28]
 800752a:	e031      	b.n	8007590 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d018      	beq.n	8007566 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	8a92      	ldrh	r2, [r2, #20]
 800753c:	4413      	add	r3, r2
 800753e:	3b01      	subs	r3, #1
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	8a92      	ldrh	r2, [r2, #20]
 8007544:	fbb3 f3f2 	udiv	r3, r3, r2
 8007548:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800754a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800754c:	8b7b      	ldrh	r3, [r7, #26]
 800754e:	429a      	cmp	r2, r3
 8007550:	d90b      	bls.n	800756a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007552:	8b7b      	ldrh	r3, [r7, #26]
 8007554:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007556:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	8a92      	ldrh	r2, [r2, #20]
 800755c:	fb03 f202 	mul.w	r2, r3, r2
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	61da      	str	r2, [r3, #28]
 8007564:	e001      	b.n	800756a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007566:	2301      	movs	r3, #1
 8007568:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	78db      	ldrb	r3, [r3, #3]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00a      	beq.n	8007588 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007572:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	8a92      	ldrh	r2, [r2, #20]
 8007578:	fb03 f202 	mul.w	r2, r3, r2
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	61da      	str	r2, [r3, #28]
 8007580:	e006      	b.n	8007590 <USB_HC_StartXfer+0x1a4>
 8007582:	bf00      	nop
 8007584:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	6a1a      	ldr	r2, [r3, #32]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007598:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800759a:	04d9      	lsls	r1, r3, #19
 800759c:	4ba3      	ldr	r3, [pc, #652]	@ (800782c <USB_HC_StartXfer+0x440>)
 800759e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075a0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	7d9b      	ldrb	r3, [r3, #22]
 80075a6:	075b      	lsls	r3, r3, #29
 80075a8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075ac:	69f9      	ldr	r1, [r7, #28]
 80075ae:	0148      	lsls	r0, r1, #5
 80075b0:	6a39      	ldr	r1, [r7, #32]
 80075b2:	4401      	add	r1, r0
 80075b4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075b8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075ba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80075bc:	79fb      	ldrb	r3, [r7, #7]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d009      	beq.n	80075d6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6999      	ldr	r1, [r3, #24]
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075d2:	460a      	mov	r2, r1
 80075d4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bf0c      	ite	eq
 80075e6:	2301      	moveq	r3, #1
 80075e8:	2300      	movne	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	0151      	lsls	r1, r2, #5
 8007600:	6a3a      	ldr	r2, [r7, #32]
 8007602:	440a      	add	r2, r1
 8007604:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007608:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800760c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	4413      	add	r3, r2
 8007616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	7e7b      	ldrb	r3, [r7, #25]
 800761e:	075b      	lsls	r3, r3, #29
 8007620:	69f9      	ldr	r1, [r7, #28]
 8007622:	0148      	lsls	r0, r1, #5
 8007624:	6a39      	ldr	r1, [r7, #32]
 8007626:	4401      	add	r1, r0
 8007628:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800762c:	4313      	orrs	r3, r2
 800762e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	799b      	ldrb	r3, [r3, #6]
 8007634:	2b01      	cmp	r3, #1
 8007636:	f040 80c3 	bne.w	80077c0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	7c5b      	ldrb	r3, [r3, #17]
 800763e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007644:	4313      	orrs	r3, r2
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	0151      	lsls	r1, r2, #5
 800764a:	6a3a      	ldr	r2, [r7, #32]
 800764c:	440a      	add	r2, r1
 800764e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007652:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007656:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	4413      	add	r3, r2
 8007660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	0151      	lsls	r1, r2, #5
 800766a:	6a3a      	ldr	r2, [r7, #32]
 800766c:	440a      	add	r2, r1
 800766e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007672:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007676:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	79db      	ldrb	r3, [r3, #7]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d123      	bne.n	80076c8 <USB_HC_StartXfer+0x2dc>
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	78db      	ldrb	r3, [r3, #3]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d11f      	bne.n	80076c8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	4413      	add	r3, r2
 8007690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	69fa      	ldr	r2, [r7, #28]
 8007698:	0151      	lsls	r1, r2, #5
 800769a:	6a3a      	ldr	r2, [r7, #32]
 800769c:	440a      	add	r2, r1
 800769e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076a6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	6a3a      	ldr	r2, [r7, #32]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076c6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	7c9b      	ldrb	r3, [r3, #18]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d003      	beq.n	80076d8 <USB_HC_StartXfer+0x2ec>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	7c9b      	ldrb	r3, [r3, #18]
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d117      	bne.n	8007708 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d113      	bne.n	8007708 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	78db      	ldrb	r3, [r3, #3]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d10f      	bne.n	8007708 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	0151      	lsls	r1, r2, #5
 80076fa:	6a3a      	ldr	r2, [r7, #32]
 80076fc:	440a      	add	r2, r1
 80076fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007706:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	7c9b      	ldrb	r3, [r3, #18]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d162      	bne.n	80077d6 <USB_HC_StartXfer+0x3ea>
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	78db      	ldrb	r3, [r3, #3]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d15e      	bne.n	80077d6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	3b01      	subs	r3, #1
 800771e:	2b03      	cmp	r3, #3
 8007720:	d858      	bhi.n	80077d4 <USB_HC_StartXfer+0x3e8>
 8007722:	a201      	add	r2, pc, #4	@ (adr r2, 8007728 <USB_HC_StartXfer+0x33c>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	08007739 	.word	0x08007739
 800772c:	0800775b 	.word	0x0800775b
 8007730:	0800777d 	.word	0x0800777d
 8007734:	0800779f 	.word	0x0800779f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	4413      	add	r3, r2
 8007740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	0151      	lsls	r1, r2, #5
 800774a:	6a3a      	ldr	r2, [r7, #32]
 800774c:	440a      	add	r2, r1
 800774e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007756:	6053      	str	r3, [r2, #4]
          break;
 8007758:	e03d      	b.n	80077d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	4413      	add	r3, r2
 8007762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	69fa      	ldr	r2, [r7, #28]
 800776a:	0151      	lsls	r1, r2, #5
 800776c:	6a3a      	ldr	r2, [r7, #32]
 800776e:	440a      	add	r2, r1
 8007770:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007774:	f043 030e 	orr.w	r3, r3, #14
 8007778:	6053      	str	r3, [r2, #4]
          break;
 800777a:	e02c      	b.n	80077d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	4413      	add	r3, r2
 8007784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	6a3a      	ldr	r2, [r7, #32]
 8007790:	440a      	add	r2, r1
 8007792:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800779a:	6053      	str	r3, [r2, #4]
          break;
 800779c:	e01b      	b.n	80077d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	69fa      	ldr	r2, [r7, #28]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	6a3a      	ldr	r2, [r7, #32]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077bc:	6053      	str	r3, [r2, #4]
          break;
 80077be:	e00a      	b.n	80077d6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077cc:	461a      	mov	r2, r3
 80077ce:	2300      	movs	r3, #0
 80077d0:	6053      	str	r3, [r2, #4]
 80077d2:	e000      	b.n	80077d6 <USB_HC_StartXfer+0x3ea>
          break;
 80077d4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80077ec:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	78db      	ldrb	r3, [r3, #3]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d004      	beq.n	8007800 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077fc:	613b      	str	r3, [r7, #16]
 80077fe:	e003      	b.n	8007808 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007806:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800780e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	4413      	add	r3, r2
 8007818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800781c:	461a      	mov	r2, r3
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	e055      	b.n	80078d8 <USB_HC_StartXfer+0x4ec>
 800782c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	78db      	ldrb	r3, [r3, #3]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d14e      	bne.n	80078d6 <USB_HC_StartXfer+0x4ea>
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d04a      	beq.n	80078d6 <USB_HC_StartXfer+0x4ea>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	79db      	ldrb	r3, [r3, #7]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d146      	bne.n	80078d6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	7c9b      	ldrb	r3, [r3, #18]
 800784c:	2b03      	cmp	r3, #3
 800784e:	d831      	bhi.n	80078b4 <USB_HC_StartXfer+0x4c8>
 8007850:	a201      	add	r2, pc, #4	@ (adr r2, 8007858 <USB_HC_StartXfer+0x46c>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	08007869 	.word	0x08007869
 800785c:	0800788d 	.word	0x0800788d
 8007860:	08007869 	.word	0x08007869
 8007864:	0800788d 	.word	0x0800788d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	3303      	adds	r3, #3
 800786e:	089b      	lsrs	r3, r3, #2
 8007870:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007872:	8afa      	ldrh	r2, [r7, #22]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007878:	b29b      	uxth	r3, r3
 800787a:	429a      	cmp	r2, r3
 800787c:	d91c      	bls.n	80078b8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f043 0220 	orr.w	r2, r3, #32
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	619a      	str	r2, [r3, #24]
        }
        break;
 800788a:	e015      	b.n	80078b8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	3303      	adds	r3, #3
 8007892:	089b      	lsrs	r3, r3, #2
 8007894:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007896:	8afa      	ldrh	r2, [r7, #22]
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d90a      	bls.n	80078bc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80078b2:	e003      	b.n	80078bc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80078b4:	bf00      	nop
 80078b6:	e002      	b.n	80078be <USB_HC_StartXfer+0x4d2>
        break;
 80078b8:	bf00      	nop
 80078ba:	e000      	b.n	80078be <USB_HC_StartXfer+0x4d2>
        break;
 80078bc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6999      	ldr	r1, [r3, #24]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	785a      	ldrb	r2, [r3, #1]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2000      	movs	r0, #0
 80078ce:	9000      	str	r0, [sp, #0]
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7ff f9c9 	bl	8006c68 <USB_WritePacket>
  }

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3728      	adds	r7, #40	@ 0x28
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	b29b      	uxth	r3, r3
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007902:	b480      	push	{r7}
 8007904:	b089      	sub	sp, #36	@ 0x24
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007912:	78fb      	ldrb	r3, [r7, #3]
 8007914:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	4413      	add	r3, r2
 8007922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	0c9b      	lsrs	r3, r3, #18
 800792a:	f003 0303 	and.w	r3, r3, #3
 800792e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	4413      	add	r3, r2
 8007938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	0fdb      	lsrs	r3, r3, #31
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	4413      	add	r3, r2
 800794e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	0fdb      	lsrs	r3, r3, #31
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b20      	cmp	r3, #32
 8007966:	d10d      	bne.n	8007984 <USB_HC_Halt+0x82>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <USB_HC_Halt+0x82>
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d005      	beq.n	8007980 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d002      	beq.n	8007980 <USB_HC_Halt+0x7e>
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b03      	cmp	r3, #3
 800797e:	d101      	bne.n	8007984 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	e0d8      	b.n	8007b36 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <USB_HC_Halt+0x8e>
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d173      	bne.n	8007a78 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	4413      	add	r3, r2
 8007998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	0151      	lsls	r1, r2, #5
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	440a      	add	r2, r1
 80079a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d14a      	bne.n	8007a52 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d133      	bne.n	8007a30 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	0151      	lsls	r1, r2, #5
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	440a      	add	r2, r1
 80079de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079e6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	0151      	lsls	r1, r2, #5
 80079fa:	69fa      	ldr	r2, [r7, #28]
 80079fc:	440a      	add	r2, r1
 80079fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a06:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a14:	d82e      	bhi.n	8007a74 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a2c:	d0ec      	beq.n	8007a08 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a2e:	e081      	b.n	8007b34 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a4e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a50:	e070      	b.n	8007b34 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	0151      	lsls	r1, r2, #5
 8007a64:	69fa      	ldr	r2, [r7, #28]
 8007a66:	440a      	add	r2, r1
 8007a68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a70:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a72:	e05f      	b.n	8007b34 <USB_HC_Halt+0x232>
            break;
 8007a74:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a76:	e05d      	b.n	8007b34 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a96:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d133      	bne.n	8007b10 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	69fa      	ldr	r2, [r7, #28]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ac2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ac6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	0151      	lsls	r1, r2, #5
 8007ada:	69fa      	ldr	r2, [r7, #28]
 8007adc:	440a      	add	r2, r1
 8007ade:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ae2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ae6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3301      	adds	r3, #1
 8007aec:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007af4:	d81d      	bhi.n	8007b32 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b0c:	d0ec      	beq.n	8007ae8 <USB_HC_Halt+0x1e6>
 8007b0e:	e011      	b.n	8007b34 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	0151      	lsls	r1, r2, #5
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	440a      	add	r2, r1
 8007b26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	e000      	b.n	8007b34 <USB_HC_Halt+0x232>
          break;
 8007b32:	bf00      	nop
    }
  }

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3724      	adds	r7, #36	@ 0x24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
	...

08007b44 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	04da      	lsls	r2, r3, #19
 8007b60:	4b15      	ldr	r3, [pc, #84]	@ (8007bb8 <USB_DoPing+0x74>)
 8007b62:	4013      	ands	r3, r2
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	0151      	lsls	r1, r2, #5
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	440a      	add	r2, r1
 8007b6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b74:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	015a      	lsls	r2, r3, #5
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b8c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b94:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	1ff80000 	.word	0x1ff80000

08007bbc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b088      	sub	sp, #32
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f7fe ff8c 	bl	8006aee <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bd6:	2110      	movs	r1, #16
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7fe ffe5 	bl	8006ba8 <USB_FlushTxFifo>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7ff f80f 	bl	8006c0c <USB_FlushRxFifo>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61bb      	str	r3, [r7, #24]
 8007bfc:	e01f      	b.n	8007c3e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c14:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c24:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c32:	461a      	mov	r2, r3
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	61bb      	str	r3, [r7, #24]
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b0f      	cmp	r3, #15
 8007c42:	d9dc      	bls.n	8007bfe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007c44:	2300      	movs	r3, #0
 8007c46:	61bb      	str	r3, [r7, #24]
 8007c48:	e034      	b.n	8007cb4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c60:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c70:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c7e:	461a      	mov	r2, r3
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3301      	adds	r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c90:	d80c      	bhi.n	8007cac <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ca8:	d0ec      	beq.n	8007c84 <USB_StopHost+0xc8>
 8007caa:	e000      	b.n	8007cae <USB_StopHost+0xf2>
        break;
 8007cac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	2b0f      	cmp	r3, #15
 8007cb8:	d9c7      	bls.n	8007c4a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f04f 32ff 	mov.w	r2, #4294967295
 8007cce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7fe fefb 	bl	8006acc <USB_EnableGlobalInt>

  return ret;
 8007cd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3720      	adds	r7, #32
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007ce0:	b590      	push	{r4, r7, lr}
 8007ce2:	b089      	sub	sp, #36	@ 0x24
 8007ce4:	af04      	add	r7, sp, #16
 8007ce6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007ce8:	2301      	movs	r3, #1
 8007cea:	2202      	movs	r2, #2
 8007cec:	2102      	movs	r1, #2
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fc85 	bl	80085fe <USBH_FindInterface>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
 8007cfa:	2bff      	cmp	r3, #255	@ 0xff
 8007cfc:	d002      	beq.n	8007d04 <USBH_CDC_InterfaceInit+0x24>
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d901      	bls.n	8007d08 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007d04:	2302      	movs	r3, #2
 8007d06:	e13d      	b.n	8007f84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fc5a 	bl	80085c6 <USBH_SelectInterface>
 8007d12:	4603      	mov	r3, r0
 8007d14:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e131      	b.n	8007f84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007d26:	2050      	movs	r0, #80	@ 0x50
 8007d28:	f002 fb64 	bl	800a3f4 <malloc>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007d40:	2302      	movs	r3, #2
 8007d42:	e11f      	b.n	8007f84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007d44:	2250      	movs	r2, #80	@ 0x50
 8007d46:	2100      	movs	r1, #0
 8007d48:	68b8      	ldr	r0, [r7, #8]
 8007d4a:	f002 fc11 	bl	800a570 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	211a      	movs	r1, #26
 8007d54:	fb01 f303 	mul.w	r3, r1, r3
 8007d58:	4413      	add	r3, r2
 8007d5a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	b25b      	sxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	da15      	bge.n	8007d92 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	211a      	movs	r1, #26
 8007d6c:	fb01 f303 	mul.w	r3, r1, r3
 8007d70:	4413      	add	r3, r2
 8007d72:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007d76:	781a      	ldrb	r2, [r3, #0]
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	211a      	movs	r1, #26
 8007d82:	fb01 f303 	mul.w	r3, r1, r3
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007d8c:	881a      	ldrh	r2, [r3, #0]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 ffbe 	bl	8009d1a <USBH_AllocPipe>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	461a      	mov	r2, r3
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	7819      	ldrb	r1, [r3, #0]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	7858      	ldrb	r0, [r3, #1]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	8952      	ldrh	r2, [r2, #10]
 8007dbe:	9202      	str	r2, [sp, #8]
 8007dc0:	2203      	movs	r2, #3
 8007dc2:	9201      	str	r2, [sp, #4]
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	4623      	mov	r3, r4
 8007dc8:	4602      	mov	r2, r0
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 ff76 	bl	8009cbc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f002 fa85 	bl	800a2e8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007dde:	2300      	movs	r3, #0
 8007de0:	2200      	movs	r2, #0
 8007de2:	210a      	movs	r1, #10
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fc0a 	bl	80085fe <USBH_FindInterface>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	2bff      	cmp	r3, #255	@ 0xff
 8007df2:	d002      	beq.n	8007dfa <USBH_CDC_InterfaceInit+0x11a>
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d901      	bls.n	8007dfe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	e0c2      	b.n	8007f84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	211a      	movs	r1, #26
 8007e04:	fb01 f303 	mul.w	r3, r1, r3
 8007e08:	4413      	add	r3, r2
 8007e0a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	b25b      	sxtb	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	da16      	bge.n	8007e44 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	211a      	movs	r1, #26
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	4413      	add	r3, r2
 8007e22:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e26:	781a      	ldrb	r2, [r3, #0]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	211a      	movs	r1, #26
 8007e32:	fb01 f303 	mul.w	r3, r1, r3
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007e3c:	881a      	ldrh	r2, [r3, #0]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	835a      	strh	r2, [r3, #26]
 8007e42:	e015      	b.n	8007e70 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	211a      	movs	r1, #26
 8007e4a:	fb01 f303 	mul.w	r3, r1, r3
 8007e4e:	4413      	add	r3, r2
 8007e50:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e54:	781a      	ldrb	r2, [r3, #0]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	211a      	movs	r1, #26
 8007e60:	fb01 f303 	mul.w	r3, r1, r3
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007e6a:	881a      	ldrh	r2, [r3, #0]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	211a      	movs	r1, #26
 8007e76:	fb01 f303 	mul.w	r3, r1, r3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	b25b      	sxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	da16      	bge.n	8007eb6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	211a      	movs	r1, #26
 8007e8e:	fb01 f303 	mul.w	r3, r1, r3
 8007e92:	4413      	add	r3, r2
 8007e94:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007e98:	781a      	ldrb	r2, [r3, #0]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	211a      	movs	r1, #26
 8007ea4:	fb01 f303 	mul.w	r3, r1, r3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007eae:	881a      	ldrh	r2, [r3, #0]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	835a      	strh	r2, [r3, #26]
 8007eb4:	e015      	b.n	8007ee2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	211a      	movs	r1, #26
 8007ebc:	fb01 f303 	mul.w	r3, r1, r3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007ec6:	781a      	ldrb	r2, [r3, #0]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	211a      	movs	r1, #26
 8007ed2:	fb01 f303 	mul.w	r3, r1, r3
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007edc:	881a      	ldrh	r2, [r3, #0]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	7b9b      	ldrb	r3, [r3, #14]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 ff16 	bl	8009d1a <USBH_AllocPipe>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	7bdb      	ldrb	r3, [r3, #15]
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 ff0c 	bl	8009d1a <USBH_AllocPipe>
 8007f02:	4603      	mov	r3, r0
 8007f04:	461a      	mov	r2, r3
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	7b59      	ldrb	r1, [r3, #13]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	7b98      	ldrb	r0, [r3, #14]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	8b12      	ldrh	r2, [r2, #24]
 8007f22:	9202      	str	r2, [sp, #8]
 8007f24:	2202      	movs	r2, #2
 8007f26:	9201      	str	r2, [sp, #4]
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	4623      	mov	r3, r4
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 fec4 	bl	8009cbc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	7b19      	ldrb	r1, [r3, #12]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	7bd8      	ldrb	r0, [r3, #15]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	8b52      	ldrh	r2, [r2, #26]
 8007f4c:	9202      	str	r2, [sp, #8]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	9201      	str	r2, [sp, #4]
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	4623      	mov	r3, r4
 8007f56:	4602      	mov	r2, r0
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 feaf 	bl	8009cbc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	7b5b      	ldrb	r3, [r3, #13]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f002 f9ba 	bl	800a2e8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	7b1b      	ldrb	r3, [r3, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f002 f9b3 	bl	800a2e8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd90      	pop	{r4, r7, pc}

08007f8c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f9a:	69db      	ldr	r3, [r3, #28]
 8007f9c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00e      	beq.n	8007fc4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 fea4 	bl	8009cfa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 fecf 	bl	8009d5c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	7b1b      	ldrb	r3, [r3, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00e      	beq.n	8007fea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	7b1b      	ldrb	r3, [r3, #12]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f001 fe91 	bl	8009cfa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	7b1b      	ldrb	r3, [r3, #12]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 febc 	bl	8009d5c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	7b5b      	ldrb	r3, [r3, #13]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00e      	beq.n	8008010 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	7b5b      	ldrb	r3, [r3, #13]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 fe7e 	bl	8009cfa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	7b5b      	ldrb	r3, [r3, #13]
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 fea9 	bl	8009d5c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	4618      	mov	r0, r3
 8008026:	f002 f9ed 	bl	800a404 <free>
    phost->pActiveClass->pData = 0U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008030:	2200      	movs	r2, #0
 8008032:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3340      	adds	r3, #64	@ 0x40
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f8b1 	bl	80081be <GetLineCoding>
 800805c:	4603      	mov	r3, r0
 800805e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008060:	7afb      	ldrb	r3, [r7, #11]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d105      	bne.n	8008072 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800806c:	2102      	movs	r1, #2
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008072:	7afb      	ldrb	r3, [r7, #11]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008084:	2301      	movs	r3, #1
 8008086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800809c:	2b04      	cmp	r3, #4
 800809e:	d877      	bhi.n	8008190 <USBH_CDC_Process+0x114>
 80080a0:	a201      	add	r2, pc, #4	@ (adr r2, 80080a8 <USBH_CDC_Process+0x2c>)
 80080a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a6:	bf00      	nop
 80080a8:	080080bd 	.word	0x080080bd
 80080ac:	080080c3 	.word	0x080080c3
 80080b0:	080080f3 	.word	0x080080f3
 80080b4:	08008167 	.word	0x08008167
 80080b8:	08008175 	.word	0x08008175
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]
      break;
 80080c0:	e06d      	b.n	800819e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f897 	bl	80081fc <SetLineCoding>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80080e0:	e058      	b.n	8008194 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d055      	beq.n	8008194 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2204      	movs	r2, #4
 80080ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80080f0:	e050      	b.n	8008194 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	3340      	adds	r3, #64	@ 0x40
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f860 	bl	80081be <GetLineCoding>
 80080fe:	4603      	mov	r3, r0
 8008100:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d126      	bne.n	8008156 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800811a:	791b      	ldrb	r3, [r3, #4]
 800811c:	429a      	cmp	r2, r3
 800811e:	d13b      	bne.n	8008198 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800812a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800812c:	429a      	cmp	r2, r3
 800812e:	d133      	bne.n	8008198 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800813a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800813c:	429a      	cmp	r2, r3
 800813e:	d12b      	bne.n	8008198 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008148:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800814a:	429a      	cmp	r2, r3
 800814c:	d124      	bne.n	8008198 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f958 	bl	8008404 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008154:	e020      	b.n	8008198 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d01d      	beq.n	8008198 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2204      	movs	r2, #4
 8008160:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008164:	e018      	b.n	8008198 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f867 	bl	800823a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f8da 	bl	8008326 <CDC_ProcessReception>
      break;
 8008172:	e014      	b.n	800819e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008174:	2100      	movs	r1, #0
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f001 f81a 	bl	80091b0 <USBH_ClrFeature>
 800817c:	4603      	mov	r3, r0
 800817e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10a      	bne.n	800819c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800818e:	e005      	b.n	800819c <USBH_CDC_Process+0x120>

    default:
      break;
 8008190:	bf00      	nop
 8008192:	e004      	b.n	800819e <USBH_CDC_Process+0x122>
      break;
 8008194:	bf00      	nop
 8008196:	e002      	b.n	800819e <USBH_CDC_Process+0x122>
      break;
 8008198:	bf00      	nop
 800819a:	e000      	b.n	800819e <USBH_CDC_Process+0x122>
      break;
 800819c:	bf00      	nop

  }

  return status;
 800819e:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	22a1      	movs	r2, #161	@ 0xa1
 80081cc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2221      	movs	r2, #33	@ 0x21
 80081d2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2207      	movs	r2, #7
 80081e4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2207      	movs	r2, #7
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 fb14 	bl	800981a <USBH_CtlReq>
 80081f2:	4603      	mov	r3, r0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2221      	movs	r2, #33	@ 0x21
 800820a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2220      	movs	r2, #32
 8008210:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2207      	movs	r2, #7
 8008222:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2207      	movs	r2, #7
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f001 faf5 	bl	800981a <USBH_CtlReq>
 8008230:	4603      	mov	r3, r0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b086      	sub	sp, #24
 800823e:	af02      	add	r7, sp, #8
 8008240:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800824c:	2300      	movs	r3, #0
 800824e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008256:	2b01      	cmp	r3, #1
 8008258:	d002      	beq.n	8008260 <CDC_ProcessTransmission+0x26>
 800825a:	2b02      	cmp	r3, #2
 800825c:	d023      	beq.n	80082a6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800825e:	e05e      	b.n	800831e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	8b12      	ldrh	r2, [r2, #24]
 8008268:	4293      	cmp	r3, r2
 800826a:	d90b      	bls.n	8008284 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	69d9      	ldr	r1, [r3, #28]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	8b1a      	ldrh	r2, [r3, #24]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	7b5b      	ldrb	r3, [r3, #13]
 8008278:	2001      	movs	r0, #1
 800827a:	9000      	str	r0, [sp, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 fcda 	bl	8009c36 <USBH_BulkSendData>
 8008282:	e00b      	b.n	800829c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800828c:	b29a      	uxth	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	7b5b      	ldrb	r3, [r3, #13]
 8008292:	2001      	movs	r0, #1
 8008294:	9000      	str	r0, [sp, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 fccd 	bl	8009c36 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80082a4:	e03b      	b.n	800831e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	7b5b      	ldrb	r3, [r3, #13]
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f001 fff1 	bl	800a294 <USBH_LL_GetURBState>
 80082b2:	4603      	mov	r3, r0
 80082b4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80082b6:	7afb      	ldrb	r3, [r7, #11]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d128      	bne.n	800830e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	8b12      	ldrh	r2, [r2, #24]
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d90e      	bls.n	80082e6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	8b12      	ldrh	r2, [r2, #24]
 80082d0:	1a9a      	subs	r2, r3, r2
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	8b12      	ldrh	r2, [r2, #24]
 80082de:	441a      	add	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	61da      	str	r2, [r3, #28]
 80082e4:	e002      	b.n	80082ec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d004      	beq.n	80082fe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80082fc:	e00e      	b.n	800831c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f868 	bl	80083dc <USBH_CDC_TransmitCallback>
      break;
 800830c:	e006      	b.n	800831c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800830e:	7afb      	ldrb	r3, [r7, #11]
 8008310:	2b02      	cmp	r3, #2
 8008312:	d103      	bne.n	800831c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800831c:	bf00      	nop
  }
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b086      	sub	sp, #24
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008338:	2300      	movs	r3, #0
 800833a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008342:	2b03      	cmp	r3, #3
 8008344:	d002      	beq.n	800834c <CDC_ProcessReception+0x26>
 8008346:	2b04      	cmp	r3, #4
 8008348:	d00e      	beq.n	8008368 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800834a:	e043      	b.n	80083d4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	6a19      	ldr	r1, [r3, #32]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	8b5a      	ldrh	r2, [r3, #26]
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	7b1b      	ldrb	r3, [r3, #12]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 fc91 	bl	8009c80 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2204      	movs	r2, #4
 8008362:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008366:	e035      	b.n	80083d4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	7b1b      	ldrb	r3, [r3, #12]
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f001 ff90 	bl	800a294 <USBH_LL_GetURBState>
 8008374:	4603      	mov	r3, r0
 8008376:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008378:	7cfb      	ldrb	r3, [r7, #19]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d129      	bne.n	80083d2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	7b1b      	ldrb	r3, [r3, #12]
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f001 fef3 	bl	800a170 <USBH_LL_GetLastXferSize>
 800838a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	429a      	cmp	r2, r3
 8008394:	d016      	beq.n	80083c4 <CDC_ProcessReception+0x9e>
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	8b5b      	ldrh	r3, [r3, #26]
 800839a:	461a      	mov	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4293      	cmp	r3, r2
 80083a0:	d110      	bne.n	80083c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	1ad2      	subs	r2, r2, r3
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	6a1a      	ldr	r2, [r3, #32]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	441a      	add	r2, r3
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2203      	movs	r2, #3
 80083be:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80083c2:	e006      	b.n	80083d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f80f 	bl	80083f0 <USBH_CDC_ReceiveCallback>
      break;
 80083d2:	bf00      	nop
  }
}
 80083d4:	bf00      	nop
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d101      	bne.n	8008430 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800842c:	2302      	movs	r3, #2
 800842e:	e029      	b.n	8008484 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	79fa      	ldrb	r2, [r7, #7]
 8008434:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 f81f 	bl	800848c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f001 fdc3 	bl	800a008 <USBH_LL_Init>

  return USBH_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008498:	2300      	movs	r3, #0
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	e009      	b.n	80084b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	33e0      	adds	r3, #224	@ 0xe0
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	2200      	movs	r2, #0
 80084aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3301      	adds	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b0f      	cmp	r3, #15
 80084b6:	d9f2      	bls.n	800849e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	e009      	b.n	80084d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80084c8:	2200      	movs	r2, #0
 80084ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3301      	adds	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084d8:	d3f1      	bcc.n	80084be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2240      	movs	r2, #64	@ 0x40
 80084fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	331c      	adds	r3, #28
 800852a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800852e:	2100      	movs	r1, #0
 8008530:	4618      	mov	r0, r3
 8008532:	f002 f81d 	bl	800a570 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800853c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008540:	2100      	movs	r1, #0
 8008542:	4618      	mov	r0, r3
 8008544:	f002 f814 	bl	800a570 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800854e:	2212      	movs	r2, #18
 8008550:	2100      	movs	r1, #0
 8008552:	4618      	mov	r0, r3
 8008554:	f002 f80c 	bl	800a570 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800855e:	223e      	movs	r2, #62	@ 0x3e
 8008560:	2100      	movs	r1, #0
 8008562:	4618      	mov	r0, r3
 8008564:	f002 f804 	bl	800a570 <memset>

  return USBH_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d016      	beq.n	80085b4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10e      	bne.n	80085ae <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008596:	1c59      	adds	r1, r3, #1
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	33de      	adds	r3, #222	@ 0xde
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]
 80085ac:	e004      	b.n	80085b8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80085ae:	2302      	movs	r3, #2
 80085b0:	73fb      	strb	r3, [r7, #15]
 80085b2:	e001      	b.n	80085b8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80085b4:	2302      	movs	r3, #2
 80085b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b085      	sub	sp, #20
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	460b      	mov	r3, r1
 80085d0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80085dc:	78fa      	ldrb	r2, [r7, #3]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d204      	bcs.n	80085ec <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	78fa      	ldrb	r2, [r7, #3]
 80085e6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80085ea:	e001      	b.n	80085f0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80085ec:	2302      	movs	r3, #2
 80085ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80085fe:	b480      	push	{r7}
 8008600:	b087      	sub	sp, #28
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	4608      	mov	r0, r1
 8008608:	4611      	mov	r1, r2
 800860a:	461a      	mov	r2, r3
 800860c:	4603      	mov	r3, r0
 800860e:	70fb      	strb	r3, [r7, #3]
 8008610:	460b      	mov	r3, r1
 8008612:	70bb      	strb	r3, [r7, #2]
 8008614:	4613      	mov	r3, r2
 8008616:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800861c:	2300      	movs	r3, #0
 800861e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008626:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008628:	e025      	b.n	8008676 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	221a      	movs	r2, #26
 800862e:	fb02 f303 	mul.w	r3, r2, r3
 8008632:	3308      	adds	r3, #8
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	4413      	add	r3, r2
 8008638:	3302      	adds	r3, #2
 800863a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	795b      	ldrb	r3, [r3, #5]
 8008640:	78fa      	ldrb	r2, [r7, #3]
 8008642:	429a      	cmp	r2, r3
 8008644:	d002      	beq.n	800864c <USBH_FindInterface+0x4e>
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	2bff      	cmp	r3, #255	@ 0xff
 800864a:	d111      	bne.n	8008670 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008650:	78ba      	ldrb	r2, [r7, #2]
 8008652:	429a      	cmp	r2, r3
 8008654:	d002      	beq.n	800865c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008656:	78bb      	ldrb	r3, [r7, #2]
 8008658:	2bff      	cmp	r3, #255	@ 0xff
 800865a:	d109      	bne.n	8008670 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008660:	787a      	ldrb	r2, [r7, #1]
 8008662:	429a      	cmp	r2, r3
 8008664:	d002      	beq.n	800866c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008666:	787b      	ldrb	r3, [r7, #1]
 8008668:	2bff      	cmp	r3, #255	@ 0xff
 800866a:	d101      	bne.n	8008670 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	e006      	b.n	800867e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008670:	7dfb      	ldrb	r3, [r7, #23]
 8008672:	3301      	adds	r3, #1
 8008674:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d9d6      	bls.n	800862a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800867c:	23ff      	movs	r3, #255	@ 0xff
}
 800867e:	4618      	mov	r0, r3
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 fcf4 	bl	800a080 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008698:	2101      	movs	r1, #1
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 fe0d 	bl	800a2ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af04      	add	r7, sp, #16
 80086b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80086b4:	2302      	movs	r3, #2
 80086b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d102      	bne.n	80086ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2203      	movs	r2, #3
 80086cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b0b      	cmp	r3, #11
 80086d6:	f200 81bb 	bhi.w	8008a50 <USBH_Process+0x3a4>
 80086da:	a201      	add	r2, pc, #4	@ (adr r2, 80086e0 <USBH_Process+0x34>)
 80086dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e0:	08008711 	.word	0x08008711
 80086e4:	08008743 	.word	0x08008743
 80086e8:	080087ab 	.word	0x080087ab
 80086ec:	080089eb 	.word	0x080089eb
 80086f0:	08008a51 	.word	0x08008a51
 80086f4:	0800884b 	.word	0x0800884b
 80086f8:	08008991 	.word	0x08008991
 80086fc:	08008881 	.word	0x08008881
 8008700:	080088a1 	.word	0x080088a1
 8008704:	080088bf 	.word	0x080088bf
 8008708:	08008903 	.word	0x08008903
 800870c:	080089d3 	.word	0x080089d3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 819b 	beq.w	8008a54 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008724:	20c8      	movs	r0, #200	@ 0xc8
 8008726:	f001 fe12 	bl	800a34e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f001 fd05 	bl	800a13a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008740:	e188      	b.n	8008a54 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008748:	2b01      	cmp	r3, #1
 800874a:	d107      	bne.n	800875c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800875a:	e18a      	b.n	8008a72 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008762:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008766:	d914      	bls.n	8008792 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800876e:	3301      	adds	r3, #1
 8008770:	b2da      	uxtb	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800877e:	2b03      	cmp	r3, #3
 8008780:	d903      	bls.n	800878a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	220d      	movs	r2, #13
 8008786:	701a      	strb	r2, [r3, #0]
      break;
 8008788:	e173      	b.n	8008a72 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	701a      	strb	r2, [r3, #0]
      break;
 8008790:	e16f      	b.n	8008a72 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008798:	f103 020a 	add.w	r2, r3, #10
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80087a2:	200a      	movs	r0, #10
 80087a4:	f001 fdd3 	bl	800a34e <USBH_Delay>
      break;
 80087a8:	e163      	b.n	8008a72 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087ba:	2104      	movs	r1, #4
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80087c0:	2064      	movs	r0, #100	@ 0x64
 80087c2:	f001 fdc4 	bl	800a34e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 fc90 	bl	800a0ec <USBH_LL_GetSpeed>
 80087cc:	4603      	mov	r3, r0
 80087ce:	461a      	mov	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2205      	movs	r2, #5
 80087da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80087dc:	2100      	movs	r1, #0
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 fa9b 	bl	8009d1a <USBH_AllocPipe>
 80087e4:	4603      	mov	r3, r0
 80087e6:	461a      	mov	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80087ec:	2180      	movs	r1, #128	@ 0x80
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 fa93 	bl	8009d1a <USBH_AllocPipe>
 80087f4:	4603      	mov	r3, r0
 80087f6:	461a      	mov	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	7919      	ldrb	r1, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008810:	9202      	str	r2, [sp, #8]
 8008812:	2200      	movs	r2, #0
 8008814:	9201      	str	r2, [sp, #4]
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	4603      	mov	r3, r0
 800881a:	2280      	movs	r2, #128	@ 0x80
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 fa4d 	bl	8009cbc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	7959      	ldrb	r1, [r3, #5]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008836:	9202      	str	r2, [sp, #8]
 8008838:	2200      	movs	r2, #0
 800883a:	9201      	str	r2, [sp, #4]
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	4603      	mov	r3, r0
 8008840:	2200      	movs	r2, #0
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f001 fa3a 	bl	8009cbc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008848:	e113      	b.n	8008a72 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f916 	bl	8008a7c <USBH_HandleEnum>
 8008850:	4603      	mov	r3, r0
 8008852:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	f040 80fd 	bne.w	8008a58 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800886c:	2b01      	cmp	r3, #1
 800886e:	d103      	bne.n	8008878 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2208      	movs	r2, #8
 8008874:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008876:	e0ef      	b.n	8008a58 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2207      	movs	r2, #7
 800887c:	701a      	strb	r2, [r3, #0]
      break;
 800887e:	e0eb      	b.n	8008a58 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 80e8 	beq.w	8008a5c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008892:	2101      	movs	r1, #1
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2208      	movs	r2, #8
 800889c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800889e:	e0dd      	b.n	8008a5c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fc3a 	bl	8009122 <USBH_SetCfg>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f040 80d5 	bne.w	8008a60 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2209      	movs	r2, #9
 80088ba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088bc:	e0d0      	b.n	8008a60 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80088c4:	f003 0320 	and.w	r3, r3, #32
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d016      	beq.n	80088fa <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80088cc:	2101      	movs	r1, #1
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fc4a 	bl	8009168 <USBH_SetFeature>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d103      	bne.n	80088e8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	220a      	movs	r2, #10
 80088e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088e6:	e0bd      	b.n	8008a64 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	f040 80b9 	bne.w	8008a64 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	220a      	movs	r2, #10
 80088f6:	701a      	strb	r2, [r3, #0]
      break;
 80088f8:	e0b4      	b.n	8008a64 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	220a      	movs	r2, #10
 80088fe:	701a      	strb	r2, [r3, #0]
      break;
 8008900:	e0b0      	b.n	8008a64 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 80ad 	beq.w	8008a68 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]
 800891a:	e016      	b.n	800894a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800891c:	7bfa      	ldrb	r2, [r7, #15]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	32de      	adds	r2, #222	@ 0xde
 8008922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008926:	791a      	ldrb	r2, [r3, #4]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800892e:	429a      	cmp	r2, r3
 8008930:	d108      	bne.n	8008944 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008932:	7bfa      	ldrb	r2, [r7, #15]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	32de      	adds	r2, #222	@ 0xde
 8008938:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008942:	e005      	b.n	8008950 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	3301      	adds	r3, #1
 8008948:	73fb      	strb	r3, [r7, #15]
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0e5      	beq.n	800891c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008956:	2b00      	cmp	r3, #0
 8008958:	d016      	beq.n	8008988 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	4798      	blx	r3
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d109      	bne.n	8008980 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2206      	movs	r2, #6
 8008970:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008978:	2103      	movs	r1, #3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800897e:	e073      	b.n	8008a68 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	220d      	movs	r2, #13
 8008984:	701a      	strb	r2, [r3, #0]
      break;
 8008986:	e06f      	b.n	8008a68 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	220d      	movs	r2, #13
 800898c:	701a      	strb	r2, [r3, #0]
      break;
 800898e:	e06b      	b.n	8008a68 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008996:	2b00      	cmp	r3, #0
 8008998:	d017      	beq.n	80089ca <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	4798      	blx	r3
 80089a6:	4603      	mov	r3, r0
 80089a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80089aa:	7bbb      	ldrb	r3, [r7, #14]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d103      	bne.n	80089ba <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	220b      	movs	r2, #11
 80089b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089b8:	e058      	b.n	8008a6c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d154      	bne.n	8008a6c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	220d      	movs	r2, #13
 80089c6:	701a      	strb	r2, [r3, #0]
      break;
 80089c8:	e050      	b.n	8008a6c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	220d      	movs	r2, #13
 80089ce:	701a      	strb	r2, [r3, #0]
      break;
 80089d0:	e04c      	b.n	8008a6c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d049      	beq.n	8008a70 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	4798      	blx	r3
      }
      break;
 80089e8:	e042      	b.n	8008a70 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff fd4a 	bl	800848c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a26:	2105      	movs	r1, #5
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d107      	bne.n	8008a48 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff fe22 	bl	800868a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a46:	e014      	b.n	8008a72 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 fb19 	bl	800a080 <USBH_LL_Start>
      break;
 8008a4e:	e010      	b.n	8008a72 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008a50:	bf00      	nop
 8008a52:	e00e      	b.n	8008a72 <USBH_Process+0x3c6>
      break;
 8008a54:	bf00      	nop
 8008a56:	e00c      	b.n	8008a72 <USBH_Process+0x3c6>
      break;
 8008a58:	bf00      	nop
 8008a5a:	e00a      	b.n	8008a72 <USBH_Process+0x3c6>
    break;
 8008a5c:	bf00      	nop
 8008a5e:	e008      	b.n	8008a72 <USBH_Process+0x3c6>
      break;
 8008a60:	bf00      	nop
 8008a62:	e006      	b.n	8008a72 <USBH_Process+0x3c6>
      break;
 8008a64:	bf00      	nop
 8008a66:	e004      	b.n	8008a72 <USBH_Process+0x3c6>
      break;
 8008a68:	bf00      	nop
 8008a6a:	e002      	b.n	8008a72 <USBH_Process+0x3c6>
      break;
 8008a6c:	bf00      	nop
 8008a6e:	e000      	b.n	8008a72 <USBH_Process+0x3c6>
      break;
 8008a70:	bf00      	nop
  }
  return USBH_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b088      	sub	sp, #32
 8008a80:	af04      	add	r7, sp, #16
 8008a82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008a84:	2301      	movs	r3, #1
 8008a86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	785b      	ldrb	r3, [r3, #1]
 8008a90:	2b07      	cmp	r3, #7
 8008a92:	f200 81bd 	bhi.w	8008e10 <USBH_HandleEnum+0x394>
 8008a96:	a201      	add	r2, pc, #4	@ (adr r2, 8008a9c <USBH_HandleEnum+0x20>)
 8008a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9c:	08008abd 	.word	0x08008abd
 8008aa0:	08008b77 	.word	0x08008b77
 8008aa4:	08008be1 	.word	0x08008be1
 8008aa8:	08008c6b 	.word	0x08008c6b
 8008aac:	08008cd5 	.word	0x08008cd5
 8008ab0:	08008d45 	.word	0x08008d45
 8008ab4:	08008d8b 	.word	0x08008d8b
 8008ab8:	08008dd1 	.word	0x08008dd1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008abc:	2108      	movs	r1, #8
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fa4c 	bl	8008f5c <USBH_Get_DevDesc>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d12e      	bne.n	8008b2c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	7919      	ldrb	r1, [r3, #4]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008af2:	9202      	str	r2, [sp, #8]
 8008af4:	2200      	movs	r2, #0
 8008af6:	9201      	str	r2, [sp, #4]
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	4603      	mov	r3, r0
 8008afc:	2280      	movs	r2, #128	@ 0x80
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 f8dc 	bl	8009cbc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	7959      	ldrb	r1, [r3, #5]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b18:	9202      	str	r2, [sp, #8]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	9201      	str	r2, [sp, #4]
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	4603      	mov	r3, r0
 8008b22:	2200      	movs	r2, #0
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f001 f8c9 	bl	8009cbc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008b2a:	e173      	b.n	8008e14 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	f040 8170 	bne.w	8008e14 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b4a:	2b03      	cmp	r3, #3
 8008b4c:	d903      	bls.n	8008b56 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	220d      	movs	r2, #13
 8008b52:	701a      	strb	r2, [r3, #0]
      break;
 8008b54:	e15e      	b.n	8008e14 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	795b      	ldrb	r3, [r3, #5]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 f8fd 	bl	8009d5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	791b      	ldrb	r3, [r3, #4]
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f001 f8f7 	bl	8009d5c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	701a      	strb	r2, [r3, #0]
      break;
 8008b74:	e14e      	b.n	8008e14 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008b76:	2112      	movs	r1, #18
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f9ef 	bl	8008f5c <USBH_Get_DevDesc>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d103      	bne.n	8008b90 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b8e:	e143      	b.n	8008e18 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	f040 8140 	bne.w	8008e18 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d903      	bls.n	8008bba <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	220d      	movs	r2, #13
 8008bb6:	701a      	strb	r2, [r3, #0]
      break;
 8008bb8:	e12e      	b.n	8008e18 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	795b      	ldrb	r3, [r3, #5]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 f8cb 	bl	8009d5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	791b      	ldrb	r3, [r3, #4]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f001 f8c5 	bl	8009d5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	701a      	strb	r2, [r3, #0]
      break;
 8008bde:	e11b      	b.n	8008e18 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008be0:	2101      	movs	r1, #1
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fa79 	bl	80090da <USBH_SetAddress>
 8008be8:	4603      	mov	r3, r0
 8008bea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d130      	bne.n	8008c54 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008bf2:	2002      	movs	r0, #2
 8008bf4:	f001 fbab 	bl	800a34e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2203      	movs	r2, #3
 8008c04:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	7919      	ldrb	r1, [r3, #4]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008c1a:	9202      	str	r2, [sp, #8]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	9201      	str	r2, [sp, #4]
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	4603      	mov	r3, r0
 8008c24:	2280      	movs	r2, #128	@ 0x80
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f001 f848 	bl	8009cbc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	7959      	ldrb	r1, [r3, #5]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c40:	9202      	str	r2, [sp, #8]
 8008c42:	2200      	movs	r2, #0
 8008c44:	9201      	str	r2, [sp, #4]
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f001 f835 	bl	8009cbc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c52:	e0e3      	b.n	8008e1c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	f040 80e0 	bne.w	8008e1c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	220d      	movs	r2, #13
 8008c60:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	705a      	strb	r2, [r3, #1]
      break;
 8008c68:	e0d8      	b.n	8008e1c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008c6a:	2109      	movs	r1, #9
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f9a1 	bl	8008fb4 <USBH_Get_CfgDesc>
 8008c72:	4603      	mov	r3, r0
 8008c74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d103      	bne.n	8008c84 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2204      	movs	r2, #4
 8008c80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c82:	e0cd      	b.n	8008e20 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c84:	7bbb      	ldrb	r3, [r7, #14]
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	f040 80ca 	bne.w	8008e20 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c92:	3301      	adds	r3, #1
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d903      	bls.n	8008cae <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	220d      	movs	r2, #13
 8008caa:	701a      	strb	r2, [r3, #0]
      break;
 8008cac:	e0b8      	b.n	8008e20 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	795b      	ldrb	r3, [r3, #5]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f001 f851 	bl	8009d5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	791b      	ldrb	r3, [r3, #4]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f001 f84b 	bl	8009d5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	701a      	strb	r2, [r3, #0]
      break;
 8008cd2:	e0a5      	b.n	8008e20 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f969 	bl	8008fb4 <USBH_Get_CfgDesc>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d103      	bne.n	8008cf4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2205      	movs	r2, #5
 8008cf0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008cf2:	e097      	b.n	8008e24 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	f040 8094 	bne.w	8008e24 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d02:	3301      	adds	r3, #1
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d903      	bls.n	8008d1e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	220d      	movs	r2, #13
 8008d1a:	701a      	strb	r2, [r3, #0]
      break;
 8008d1c:	e082      	b.n	8008e24 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	795b      	ldrb	r3, [r3, #5]
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 f819 	bl	8009d5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	791b      	ldrb	r3, [r3, #4]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f001 f813 	bl	8009d5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	701a      	strb	r2, [r3, #0]
      break;
 8008d42:	e06f      	b.n	8008e24 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d019      	beq.n	8008d82 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d5a:	23ff      	movs	r3, #255	@ 0xff
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f953 	bl	8009008 <USBH_Get_StringDesc>
 8008d62:	4603      	mov	r3, r0
 8008d64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d103      	bne.n	8008d74 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2206      	movs	r2, #6
 8008d70:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d72:	e059      	b.n	8008e28 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d156      	bne.n	8008e28 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2206      	movs	r2, #6
 8008d7e:	705a      	strb	r2, [r3, #1]
      break;
 8008d80:	e052      	b.n	8008e28 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2206      	movs	r2, #6
 8008d86:	705a      	strb	r2, [r3, #1]
      break;
 8008d88:	e04e      	b.n	8008e28 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d019      	beq.n	8008dc8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008da0:	23ff      	movs	r3, #255	@ 0xff
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f930 	bl	8009008 <USBH_Get_StringDesc>
 8008da8:	4603      	mov	r3, r0
 8008daa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d103      	bne.n	8008dba <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2207      	movs	r2, #7
 8008db6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008db8:	e038      	b.n	8008e2c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	d135      	bne.n	8008e2c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2207      	movs	r2, #7
 8008dc4:	705a      	strb	r2, [r3, #1]
      break;
 8008dc6:	e031      	b.n	8008e2c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2207      	movs	r2, #7
 8008dcc:	705a      	strb	r2, [r3, #1]
      break;
 8008dce:	e02d      	b.n	8008e2c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d017      	beq.n	8008e0a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008de6:	23ff      	movs	r3, #255	@ 0xff
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f90d 	bl	8009008 <USBH_Get_StringDesc>
 8008dee:	4603      	mov	r3, r0
 8008df0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008dfc:	e018      	b.n	8008e30 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d115      	bne.n	8008e30 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	73fb      	strb	r3, [r7, #15]
      break;
 8008e08:	e012      	b.n	8008e30 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e0e:	e00f      	b.n	8008e30 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008e10:	bf00      	nop
 8008e12:	e00e      	b.n	8008e32 <USBH_HandleEnum+0x3b6>
      break;
 8008e14:	bf00      	nop
 8008e16:	e00c      	b.n	8008e32 <USBH_HandleEnum+0x3b6>
      break;
 8008e18:	bf00      	nop
 8008e1a:	e00a      	b.n	8008e32 <USBH_HandleEnum+0x3b6>
      break;
 8008e1c:	bf00      	nop
 8008e1e:	e008      	b.n	8008e32 <USBH_HandleEnum+0x3b6>
      break;
 8008e20:	bf00      	nop
 8008e22:	e006      	b.n	8008e32 <USBH_HandleEnum+0x3b6>
      break;
 8008e24:	bf00      	nop
 8008e26:	e004      	b.n	8008e32 <USBH_HandleEnum+0x3b6>
      break;
 8008e28:	bf00      	nop
 8008e2a:	e002      	b.n	8008e32 <USBH_HandleEnum+0x3b6>
      break;
 8008e2c:	bf00      	nop
 8008e2e:	e000      	b.n	8008e32 <USBH_HandleEnum+0x3b6>
      break;
 8008e30:	bf00      	nop
  }
  return Status;
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008e4e:	bf00      	nop
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e68:	1c5a      	adds	r2, r3, #1
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f804 	bl	8008e7e <USBH_HandleSof>
}
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b0b      	cmp	r3, #11
 8008e8e:	d10a      	bne.n	8008ea6 <USBH_HandleSof+0x28>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d005      	beq.n	8008ea6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	4798      	blx	r3
  }
}
 8008ea6:	bf00      	nop
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008ebe:	bf00      	nop
}
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b083      	sub	sp, #12
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008eda:	bf00      	nop
}
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 f8be 	bl	800a0b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	791b      	ldrb	r3, [r3, #4]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 ff0b 	bl	8009d5c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	795b      	ldrb	r3, [r3, #5]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 ff05 	bl	8009d5c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af02      	add	r7, sp, #8
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008f68:	887b      	ldrh	r3, [r7, #2]
 8008f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6e:	d901      	bls.n	8008f74 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e01b      	b.n	8008fac <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008f7a:	887b      	ldrh	r3, [r7, #2]
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f84:	2100      	movs	r1, #0
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f872 	bl	8009070 <USBH_GetDescriptor>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d109      	bne.n	8008faa <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008f9c:	887a      	ldrh	r2, [r7, #2]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f929 	bl	80091f8 <USBH_ParseDevDesc>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b086      	sub	sp, #24
 8008fb8:	af02      	add	r7, sp, #8
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	331c      	adds	r3, #28
 8008fc4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008fc6:	887b      	ldrh	r3, [r7, #2]
 8008fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fcc:	d901      	bls.n	8008fd2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e016      	b.n	8009000 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008fd2:	887b      	ldrh	r3, [r7, #2]
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fdc:	2100      	movs	r1, #0
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f846 	bl	8009070 <USBH_GetDescriptor>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d107      	bne.n	8008ffe <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008fee:	887b      	ldrh	r3, [r7, #2]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	68b9      	ldr	r1, [r7, #8]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f9af 	bl	8009358 <USBH_ParseCfgDesc>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af02      	add	r7, sp, #8
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	607a      	str	r2, [r7, #4]
 8009012:	461a      	mov	r2, r3
 8009014:	460b      	mov	r3, r1
 8009016:	72fb      	strb	r3, [r7, #11]
 8009018:	4613      	mov	r3, r2
 800901a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800901c:	893b      	ldrh	r3, [r7, #8]
 800901e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009022:	d802      	bhi.n	800902a <USBH_Get_StringDesc+0x22>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d101      	bne.n	800902e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800902a:	2303      	movs	r3, #3
 800902c:	e01c      	b.n	8009068 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800902e:	7afb      	ldrb	r3, [r7, #11]
 8009030:	b29b      	uxth	r3, r3
 8009032:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009036:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800903e:	893b      	ldrh	r3, [r7, #8]
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	460b      	mov	r3, r1
 8009044:	2100      	movs	r1, #0
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f000 f812 	bl	8009070 <USBH_GetDescriptor>
 800904c:	4603      	mov	r3, r0
 800904e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d107      	bne.n	8009066 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800905c:	893a      	ldrh	r2, [r7, #8]
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	4618      	mov	r0, r3
 8009062:	f000 fb8d 	bl	8009780 <USBH_ParseStringDesc>
  }

  return status;
 8009066:	7dfb      	ldrb	r3, [r7, #23]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	607b      	str	r3, [r7, #4]
 800907a:	460b      	mov	r3, r1
 800907c:	72fb      	strb	r3, [r7, #11]
 800907e:	4613      	mov	r3, r2
 8009080:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	789b      	ldrb	r3, [r3, #2]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d11c      	bne.n	80090c4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800908a:	7afb      	ldrb	r3, [r7, #11]
 800908c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009090:	b2da      	uxtb	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2206      	movs	r2, #6
 800909a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	893a      	ldrh	r2, [r7, #8]
 80090a0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80090a2:	893b      	ldrh	r3, [r7, #8]
 80090a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80090a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090ac:	d104      	bne.n	80090b8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f240 4209 	movw	r2, #1033	@ 0x409
 80090b4:	829a      	strh	r2, [r3, #20]
 80090b6:	e002      	b.n	80090be <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	8b3a      	ldrh	r2, [r7, #24]
 80090c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80090c4:	8b3b      	ldrh	r3, [r7, #24]
 80090c6:	461a      	mov	r2, r3
 80090c8:	6879      	ldr	r1, [r7, #4]
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f000 fba5 	bl	800981a <USBH_CtlReq>
 80090d0:	4603      	mov	r3, r0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	789b      	ldrb	r3, [r3, #2]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d10f      	bne.n	800910e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2205      	movs	r2, #5
 80090f8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80090fa:	78fb      	ldrb	r3, [r7, #3]
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800910e:	2200      	movs	r2, #0
 8009110:	2100      	movs	r1, #0
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fb81 	bl	800981a <USBH_CtlReq>
 8009118:	4603      	mov	r3, r0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	460b      	mov	r3, r1
 800912c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	789b      	ldrb	r3, [r3, #2]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d10e      	bne.n	8009154 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2209      	movs	r2, #9
 8009140:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	887a      	ldrh	r2, [r7, #2]
 8009146:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009154:	2200      	movs	r2, #0
 8009156:	2100      	movs	r1, #0
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fb5e 	bl	800981a <USBH_CtlReq>
 800915e:	4603      	mov	r3, r0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	789b      	ldrb	r3, [r3, #2]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d10f      	bne.n	800919c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2203      	movs	r2, #3
 8009186:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009188:	78fb      	ldrb	r3, [r7, #3]
 800918a:	b29a      	uxth	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800919c:	2200      	movs	r2, #0
 800919e:	2100      	movs	r1, #0
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fb3a 	bl	800981a <USBH_CtlReq>
 80091a6:	4603      	mov	r3, r0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	460b      	mov	r3, r1
 80091ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	789b      	ldrb	r3, [r3, #2]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d10f      	bne.n	80091e4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80091d6:	78fb      	ldrb	r3, [r7, #3]
 80091d8:	b29a      	uxth	r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80091e4:	2200      	movs	r2, #0
 80091e6:	2100      	movs	r1, #0
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fb16 	bl	800981a <USBH_CtlReq>
 80091ee:	4603      	mov	r3, r0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	4613      	mov	r3, r2
 8009204:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800920c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009218:	2302      	movs	r3, #2
 800921a:	e094      	b.n	8009346 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	781a      	ldrb	r2, [r3, #0]
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	785a      	ldrb	r2, [r3, #1]
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	3302      	adds	r3, #2
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	3303      	adds	r3, #3
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	021b      	lsls	r3, r3, #8
 800923c:	b29b      	uxth	r3, r3
 800923e:	4313      	orrs	r3, r2
 8009240:	b29a      	uxth	r2, r3
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	791a      	ldrb	r2, [r3, #4]
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	795a      	ldrb	r2, [r3, #5]
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	799a      	ldrb	r2, [r3, #6]
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	79da      	ldrb	r2, [r3, #7]
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800926c:	2b00      	cmp	r3, #0
 800926e:	d004      	beq.n	800927a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009276:	2b01      	cmp	r3, #1
 8009278:	d11b      	bne.n	80092b2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	79db      	ldrb	r3, [r3, #7]
 800927e:	2b20      	cmp	r3, #32
 8009280:	dc0f      	bgt.n	80092a2 <USBH_ParseDevDesc+0xaa>
 8009282:	2b08      	cmp	r3, #8
 8009284:	db0f      	blt.n	80092a6 <USBH_ParseDevDesc+0xae>
 8009286:	3b08      	subs	r3, #8
 8009288:	4a32      	ldr	r2, [pc, #200]	@ (8009354 <USBH_ParseDevDesc+0x15c>)
 800928a:	fa22 f303 	lsr.w	r3, r2, r3
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b00      	cmp	r3, #0
 8009294:	bf14      	ite	ne
 8009296:	2301      	movne	r3, #1
 8009298:	2300      	moveq	r3, #0
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	d106      	bne.n	80092ae <USBH_ParseDevDesc+0xb6>
 80092a0:	e001      	b.n	80092a6 <USBH_ParseDevDesc+0xae>
 80092a2:	2b40      	cmp	r3, #64	@ 0x40
 80092a4:	d003      	beq.n	80092ae <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	2208      	movs	r2, #8
 80092aa:	71da      	strb	r2, [r3, #7]
        break;
 80092ac:	e000      	b.n	80092b0 <USBH_ParseDevDesc+0xb8>
        break;
 80092ae:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80092b0:	e00e      	b.n	80092d0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d107      	bne.n	80092cc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	79db      	ldrb	r3, [r3, #7]
 80092c0:	2b08      	cmp	r3, #8
 80092c2:	d005      	beq.n	80092d0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	2208      	movs	r2, #8
 80092c8:	71da      	strb	r2, [r3, #7]
 80092ca:	e001      	b.n	80092d0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80092cc:	2303      	movs	r3, #3
 80092ce:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80092d0:	88fb      	ldrh	r3, [r7, #6]
 80092d2:	2b08      	cmp	r3, #8
 80092d4:	d936      	bls.n	8009344 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	3308      	adds	r3, #8
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	461a      	mov	r2, r3
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	3309      	adds	r3, #9
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	021b      	lsls	r3, r3, #8
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	4313      	orrs	r3, r2
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	330a      	adds	r3, #10
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	330b      	adds	r3, #11
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	021b      	lsls	r3, r3, #8
 8009300:	b29b      	uxth	r3, r3
 8009302:	4313      	orrs	r3, r2
 8009304:	b29a      	uxth	r2, r3
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	330c      	adds	r3, #12
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	461a      	mov	r2, r3
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	330d      	adds	r3, #13
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	021b      	lsls	r3, r3, #8
 800931a:	b29b      	uxth	r3, r3
 800931c:	4313      	orrs	r3, r2
 800931e:	b29a      	uxth	r2, r3
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	7b9a      	ldrb	r2, [r3, #14]
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	7bda      	ldrb	r2, [r3, #15]
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	7c1a      	ldrb	r2, [r3, #16]
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	7c5a      	ldrb	r2, [r3, #17]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009344:	7dfb      	ldrb	r3, [r7, #23]
}
 8009346:	4618      	mov	r0, r3
 8009348:	371c      	adds	r7, #28
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	01000101 	.word	0x01000101

08009358 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08c      	sub	sp, #48	@ 0x30
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	4613      	mov	r3, r2
 8009364:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800936c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009374:	2300      	movs	r3, #0
 8009376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800937a:	2300      	movs	r3, #0
 800937c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009386:	2302      	movs	r3, #2
 8009388:	e0da      	b.n	8009540 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800938e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b09      	cmp	r3, #9
 8009394:	d002      	beq.n	800939c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009398:	2209      	movs	r2, #9
 800939a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	781a      	ldrb	r2, [r3, #0]
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	785a      	ldrb	r2, [r3, #1]
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	3302      	adds	r3, #2
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	3303      	adds	r3, #3
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	021b      	lsls	r3, r3, #8
 80093bc:	b29b      	uxth	r3, r3
 80093be:	4313      	orrs	r3, r2
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093c6:	bf28      	it	cs
 80093c8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	791a      	ldrb	r2, [r3, #4]
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	795a      	ldrb	r2, [r3, #5]
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	799a      	ldrb	r2, [r3, #6]
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	79da      	ldrb	r2, [r3, #7]
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	7a1a      	ldrb	r2, [r3, #8]
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80093fa:	88fb      	ldrh	r3, [r7, #6]
 80093fc:	2b09      	cmp	r3, #9
 80093fe:	f240 809d 	bls.w	800953c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009402:	2309      	movs	r3, #9
 8009404:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009406:	2300      	movs	r3, #0
 8009408:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800940a:	e081      	b.n	8009510 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800940c:	f107 0316 	add.w	r3, r7, #22
 8009410:	4619      	mov	r1, r3
 8009412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009414:	f000 f9e7 	bl	80097e6 <USBH_GetNextDesc>
 8009418:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800941a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800941c:	785b      	ldrb	r3, [r3, #1]
 800941e:	2b04      	cmp	r3, #4
 8009420:	d176      	bne.n	8009510 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	2b09      	cmp	r3, #9
 8009428:	d002      	beq.n	8009430 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800942a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942c:	2209      	movs	r2, #9
 800942e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009434:	221a      	movs	r2, #26
 8009436:	fb02 f303 	mul.w	r3, r2, r3
 800943a:	3308      	adds	r3, #8
 800943c:	6a3a      	ldr	r2, [r7, #32]
 800943e:	4413      	add	r3, r2
 8009440:	3302      	adds	r3, #2
 8009442:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009444:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009446:	69f8      	ldr	r0, [r7, #28]
 8009448:	f000 f87e 	bl	8009548 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009452:	2300      	movs	r3, #0
 8009454:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009456:	e043      	b.n	80094e0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009458:	f107 0316 	add.w	r3, r7, #22
 800945c:	4619      	mov	r1, r3
 800945e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009460:	f000 f9c1 	bl	80097e6 <USBH_GetNextDesc>
 8009464:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009468:	785b      	ldrb	r3, [r3, #1]
 800946a:	2b05      	cmp	r3, #5
 800946c:	d138      	bne.n	80094e0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	795b      	ldrb	r3, [r3, #5]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d113      	bne.n	800949e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800947a:	2b02      	cmp	r3, #2
 800947c:	d003      	beq.n	8009486 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	799b      	ldrb	r3, [r3, #6]
 8009482:	2b03      	cmp	r3, #3
 8009484:	d10b      	bne.n	800949e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	79db      	ldrb	r3, [r3, #7]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10b      	bne.n	80094a6 <USBH_ParseCfgDesc+0x14e>
 800948e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	2b09      	cmp	r3, #9
 8009494:	d007      	beq.n	80094a6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009498:	2209      	movs	r2, #9
 800949a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800949c:	e003      	b.n	80094a6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800949e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a0:	2207      	movs	r2, #7
 80094a2:	701a      	strb	r2, [r3, #0]
 80094a4:	e000      	b.n	80094a8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80094a6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80094a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094ac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80094b0:	3201      	adds	r2, #1
 80094b2:	00d2      	lsls	r2, r2, #3
 80094b4:	211a      	movs	r1, #26
 80094b6:	fb01 f303 	mul.w	r3, r1, r3
 80094ba:	4413      	add	r3, r2
 80094bc:	3308      	adds	r3, #8
 80094be:	6a3a      	ldr	r2, [r7, #32]
 80094c0:	4413      	add	r3, r2
 80094c2:	3304      	adds	r3, #4
 80094c4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80094c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094c8:	69b9      	ldr	r1, [r7, #24]
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 f870 	bl	80095b0 <USBH_ParseEPDesc>
 80094d0:	4603      	mov	r3, r0
 80094d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80094d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094da:	3301      	adds	r3, #1
 80094dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	791b      	ldrb	r3, [r3, #4]
 80094e4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d204      	bcs.n	80094f6 <USBH_ParseCfgDesc+0x19e>
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	885a      	ldrh	r2, [r3, #2]
 80094f0:	8afb      	ldrh	r3, [r7, #22]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d8b0      	bhi.n	8009458 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	791b      	ldrb	r3, [r3, #4]
 80094fa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80094fe:	429a      	cmp	r2, r3
 8009500:	d201      	bcs.n	8009506 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009502:	2303      	movs	r3, #3
 8009504:	e01c      	b.n	8009540 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009506:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800950a:	3301      	adds	r3, #1
 800950c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009514:	2b01      	cmp	r3, #1
 8009516:	d805      	bhi.n	8009524 <USBH_ParseCfgDesc+0x1cc>
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	885a      	ldrh	r2, [r3, #2]
 800951c:	8afb      	ldrh	r3, [r7, #22]
 800951e:	429a      	cmp	r2, r3
 8009520:	f63f af74 	bhi.w	800940c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	791b      	ldrb	r3, [r3, #4]
 8009528:	2b02      	cmp	r3, #2
 800952a:	bf28      	it	cs
 800952c:	2302      	movcs	r3, #2
 800952e:	b2db      	uxtb	r3, r3
 8009530:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009534:	429a      	cmp	r2, r3
 8009536:	d201      	bcs.n	800953c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009538:	2303      	movs	r3, #3
 800953a:	e001      	b.n	8009540 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800953c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009540:	4618      	mov	r0, r3
 8009542:	3730      	adds	r7, #48	@ 0x30
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	781a      	ldrb	r2, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	785a      	ldrb	r2, [r3, #1]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	789a      	ldrb	r2, [r3, #2]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	78da      	ldrb	r2, [r3, #3]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	3304      	adds	r3, #4
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	2b02      	cmp	r3, #2
 800957a:	bf28      	it	cs
 800957c:	2302      	movcs	r3, #2
 800957e:	b2da      	uxtb	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	795a      	ldrb	r2, [r3, #5]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	799a      	ldrb	r2, [r3, #6]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	79da      	ldrb	r2, [r3, #7]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	7a1a      	ldrb	r2, [r3, #8]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	721a      	strb	r2, [r3, #8]
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	781a      	ldrb	r2, [r3, #0]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	785a      	ldrb	r2, [r3, #1]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	789a      	ldrb	r2, [r3, #2]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	78da      	ldrb	r2, [r3, #3]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3304      	adds	r3, #4
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3305      	adds	r3, #5
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	021b      	lsls	r3, r3, #8
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	4313      	orrs	r3, r2
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	799a      	ldrb	r2, [r3, #6]
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	889b      	ldrh	r3, [r3, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d009      	beq.n	800961e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800960e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009612:	d804      	bhi.n	800961e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800961c:	d901      	bls.n	8009622 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800961e:	2303      	movs	r3, #3
 8009620:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009628:	2b00      	cmp	r3, #0
 800962a:	d136      	bne.n	800969a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	78db      	ldrb	r3, [r3, #3]
 8009630:	f003 0303 	and.w	r3, r3, #3
 8009634:	2b02      	cmp	r3, #2
 8009636:	d108      	bne.n	800964a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	889b      	ldrh	r3, [r3, #4]
 800963c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009640:	f240 8097 	bls.w	8009772 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009644:	2303      	movs	r3, #3
 8009646:	75fb      	strb	r3, [r7, #23]
 8009648:	e093      	b.n	8009772 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	78db      	ldrb	r3, [r3, #3]
 800964e:	f003 0303 	and.w	r3, r3, #3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d107      	bne.n	8009666 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	889b      	ldrh	r3, [r3, #4]
 800965a:	2b40      	cmp	r3, #64	@ 0x40
 800965c:	f240 8089 	bls.w	8009772 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009660:	2303      	movs	r3, #3
 8009662:	75fb      	strb	r3, [r7, #23]
 8009664:	e085      	b.n	8009772 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	78db      	ldrb	r3, [r3, #3]
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	2b01      	cmp	r3, #1
 8009670:	d005      	beq.n	800967e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	78db      	ldrb	r3, [r3, #3]
 8009676:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800967a:	2b03      	cmp	r3, #3
 800967c:	d10a      	bne.n	8009694 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	799b      	ldrb	r3, [r3, #6]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <USBH_ParseEPDesc+0xde>
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	799b      	ldrb	r3, [r3, #6]
 800968a:	2b10      	cmp	r3, #16
 800968c:	d970      	bls.n	8009770 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800968e:	2303      	movs	r3, #3
 8009690:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009692:	e06d      	b.n	8009770 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009694:	2303      	movs	r3, #3
 8009696:	75fb      	strb	r3, [r7, #23]
 8009698:	e06b      	b.n	8009772 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d13c      	bne.n	800971e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	78db      	ldrb	r3, [r3, #3]
 80096a8:	f003 0303 	and.w	r3, r3, #3
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d005      	beq.n	80096bc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	78db      	ldrb	r3, [r3, #3]
 80096b4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d106      	bne.n	80096ca <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	889b      	ldrh	r3, [r3, #4]
 80096c0:	2b40      	cmp	r3, #64	@ 0x40
 80096c2:	d956      	bls.n	8009772 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80096c4:	2303      	movs	r3, #3
 80096c6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80096c8:	e053      	b.n	8009772 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	78db      	ldrb	r3, [r3, #3]
 80096ce:	f003 0303 	and.w	r3, r3, #3
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d10e      	bne.n	80096f4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	799b      	ldrb	r3, [r3, #6]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d007      	beq.n	80096ee <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80096e2:	2b10      	cmp	r3, #16
 80096e4:	d803      	bhi.n	80096ee <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80096ea:	2b40      	cmp	r3, #64	@ 0x40
 80096ec:	d941      	bls.n	8009772 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80096ee:	2303      	movs	r3, #3
 80096f0:	75fb      	strb	r3, [r7, #23]
 80096f2:	e03e      	b.n	8009772 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	78db      	ldrb	r3, [r3, #3]
 80096f8:	f003 0303 	and.w	r3, r3, #3
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	d10b      	bne.n	8009718 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	799b      	ldrb	r3, [r3, #6]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d004      	beq.n	8009712 <USBH_ParseEPDesc+0x162>
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	889b      	ldrh	r3, [r3, #4]
 800970c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009710:	d32f      	bcc.n	8009772 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009712:	2303      	movs	r3, #3
 8009714:	75fb      	strb	r3, [r7, #23]
 8009716:	e02c      	b.n	8009772 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009718:	2303      	movs	r3, #3
 800971a:	75fb      	strb	r3, [r7, #23]
 800971c:	e029      	b.n	8009772 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009724:	2b02      	cmp	r3, #2
 8009726:	d120      	bne.n	800976a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	78db      	ldrb	r3, [r3, #3]
 800972c:	f003 0303 	and.w	r3, r3, #3
 8009730:	2b00      	cmp	r3, #0
 8009732:	d106      	bne.n	8009742 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	889b      	ldrh	r3, [r3, #4]
 8009738:	2b08      	cmp	r3, #8
 800973a:	d01a      	beq.n	8009772 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800973c:	2303      	movs	r3, #3
 800973e:	75fb      	strb	r3, [r7, #23]
 8009740:	e017      	b.n	8009772 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	78db      	ldrb	r3, [r3, #3]
 8009746:	f003 0303 	and.w	r3, r3, #3
 800974a:	2b03      	cmp	r3, #3
 800974c:	d10a      	bne.n	8009764 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	799b      	ldrb	r3, [r3, #6]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <USBH_ParseEPDesc+0x1ae>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	889b      	ldrh	r3, [r3, #4]
 800975a:	2b08      	cmp	r3, #8
 800975c:	d909      	bls.n	8009772 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800975e:	2303      	movs	r3, #3
 8009760:	75fb      	strb	r3, [r7, #23]
 8009762:	e006      	b.n	8009772 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009764:	2303      	movs	r3, #3
 8009766:	75fb      	strb	r3, [r7, #23]
 8009768:	e003      	b.n	8009772 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800976a:	2303      	movs	r3, #3
 800976c:	75fb      	strb	r3, [r7, #23]
 800976e:	e000      	b.n	8009772 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009770:	bf00      	nop
  }

  return status;
 8009772:	7dfb      	ldrb	r3, [r7, #23]
}
 8009774:	4618      	mov	r0, r3
 8009776:	371c      	adds	r7, #28
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	4613      	mov	r3, r2
 800978c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3301      	adds	r3, #1
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b03      	cmp	r3, #3
 8009796:	d120      	bne.n	80097da <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	1e9a      	subs	r2, r3, #2
 800979e:	88fb      	ldrh	r3, [r7, #6]
 80097a0:	4293      	cmp	r3, r2
 80097a2:	bf28      	it	cs
 80097a4:	4613      	movcs	r3, r2
 80097a6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3302      	adds	r3, #2
 80097ac:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80097ae:	2300      	movs	r3, #0
 80097b0:	82fb      	strh	r3, [r7, #22]
 80097b2:	e00b      	b.n	80097cc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80097b4:	8afb      	ldrh	r3, [r7, #22]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	4413      	add	r3, r2
 80097ba:	781a      	ldrb	r2, [r3, #0]
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	701a      	strb	r2, [r3, #0]
      pdest++;
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	3301      	adds	r3, #1
 80097c4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80097c6:	8afb      	ldrh	r3, [r7, #22]
 80097c8:	3302      	adds	r3, #2
 80097ca:	82fb      	strh	r3, [r7, #22]
 80097cc:	8afa      	ldrh	r2, [r7, #22]
 80097ce:	8abb      	ldrh	r3, [r7, #20]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d3ef      	bcc.n	80097b4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	2200      	movs	r2, #0
 80097d8:	701a      	strb	r2, [r3, #0]
  }
}
 80097da:	bf00      	nop
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b085      	sub	sp, #20
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	881b      	ldrh	r3, [r3, #0]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	7812      	ldrb	r2, [r2, #0]
 80097f8:	4413      	add	r3, r2
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4413      	add	r3, r2
 800980a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800980c:	68fb      	ldr	r3, [r7, #12]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b086      	sub	sp, #24
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	4613      	mov	r3, r2
 8009826:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009828:	2301      	movs	r3, #1
 800982a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	789b      	ldrb	r3, [r3, #2]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d002      	beq.n	800983a <USBH_CtlReq+0x20>
 8009834:	2b02      	cmp	r3, #2
 8009836:	d00f      	beq.n	8009858 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009838:	e027      	b.n	800988a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	88fa      	ldrh	r2, [r7, #6]
 8009844:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2201      	movs	r2, #1
 800984a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2202      	movs	r2, #2
 8009850:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009852:	2301      	movs	r3, #1
 8009854:	75fb      	strb	r3, [r7, #23]
      break;
 8009856:	e018      	b.n	800988a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f000 f81b 	bl	8009894 <USBH_HandleControl>
 800985e:	4603      	mov	r3, r0
 8009860:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009862:	7dfb      	ldrb	r3, [r7, #23]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <USBH_CtlReq+0x54>
 8009868:	7dfb      	ldrb	r3, [r7, #23]
 800986a:	2b03      	cmp	r3, #3
 800986c:	d106      	bne.n	800987c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2201      	movs	r2, #1
 8009872:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	761a      	strb	r2, [r3, #24]
      break;
 800987a:	e005      	b.n	8009888 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800987c:	7dfb      	ldrb	r3, [r7, #23]
 800987e:	2b02      	cmp	r3, #2
 8009880:	d102      	bne.n	8009888 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2201      	movs	r2, #1
 8009886:	709a      	strb	r2, [r3, #2]
      break;
 8009888:	bf00      	nop
  }
  return status;
 800988a:	7dfb      	ldrb	r3, [r7, #23]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af02      	add	r7, sp, #8
 800989a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800989c:	2301      	movs	r3, #1
 800989e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80098a0:	2300      	movs	r3, #0
 80098a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	7e1b      	ldrb	r3, [r3, #24]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	2b0a      	cmp	r3, #10
 80098ac:	f200 8156 	bhi.w	8009b5c <USBH_HandleControl+0x2c8>
 80098b0:	a201      	add	r2, pc, #4	@ (adr r2, 80098b8 <USBH_HandleControl+0x24>)
 80098b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b6:	bf00      	nop
 80098b8:	080098e5 	.word	0x080098e5
 80098bc:	080098ff 	.word	0x080098ff
 80098c0:	08009969 	.word	0x08009969
 80098c4:	0800998f 	.word	0x0800998f
 80098c8:	080099c7 	.word	0x080099c7
 80098cc:	080099f1 	.word	0x080099f1
 80098d0:	08009a43 	.word	0x08009a43
 80098d4:	08009a65 	.word	0x08009a65
 80098d8:	08009aa1 	.word	0x08009aa1
 80098dc:	08009ac7 	.word	0x08009ac7
 80098e0:	08009b05 	.word	0x08009b05
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f103 0110 	add.w	r1, r3, #16
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	795b      	ldrb	r3, [r3, #5]
 80098ee:	461a      	mov	r2, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f943 	bl	8009b7c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2202      	movs	r2, #2
 80098fa:	761a      	strb	r2, [r3, #24]
      break;
 80098fc:	e139      	b.n	8009b72 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	795b      	ldrb	r3, [r3, #5]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fcc5 	bl	800a294 <USBH_LL_GetURBState>
 800990a:	4603      	mov	r3, r0
 800990c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d11e      	bne.n	8009952 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	7c1b      	ldrb	r3, [r3, #16]
 8009918:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800991c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	8adb      	ldrh	r3, [r3, #22]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009926:	7b7b      	ldrb	r3, [r7, #13]
 8009928:	2b80      	cmp	r3, #128	@ 0x80
 800992a:	d103      	bne.n	8009934 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2203      	movs	r2, #3
 8009930:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009932:	e115      	b.n	8009b60 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2205      	movs	r2, #5
 8009938:	761a      	strb	r2, [r3, #24]
      break;
 800993a:	e111      	b.n	8009b60 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800993c:	7b7b      	ldrb	r3, [r7, #13]
 800993e:	2b80      	cmp	r3, #128	@ 0x80
 8009940:	d103      	bne.n	800994a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2209      	movs	r2, #9
 8009946:	761a      	strb	r2, [r3, #24]
      break;
 8009948:	e10a      	b.n	8009b60 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2207      	movs	r2, #7
 800994e:	761a      	strb	r2, [r3, #24]
      break;
 8009950:	e106      	b.n	8009b60 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	2b04      	cmp	r3, #4
 8009956:	d003      	beq.n	8009960 <USBH_HandleControl+0xcc>
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	2b02      	cmp	r3, #2
 800995c:	f040 8100 	bne.w	8009b60 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	220b      	movs	r2, #11
 8009964:	761a      	strb	r2, [r3, #24]
      break;
 8009966:	e0fb      	b.n	8009b60 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800996e:	b29a      	uxth	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6899      	ldr	r1, [r3, #8]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	899a      	ldrh	r2, [r3, #12]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	791b      	ldrb	r3, [r3, #4]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f93a 	bl	8009bfa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2204      	movs	r2, #4
 800998a:	761a      	strb	r2, [r3, #24]
      break;
 800998c:	e0f1      	b.n	8009b72 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	791b      	ldrb	r3, [r3, #4]
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fc7d 	bl	800a294 <USBH_LL_GetURBState>
 800999a:	4603      	mov	r3, r0
 800999c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800999e:	7bbb      	ldrb	r3, [r7, #14]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d102      	bne.n	80099aa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2209      	movs	r2, #9
 80099a8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80099aa:	7bbb      	ldrb	r3, [r7, #14]
 80099ac:	2b05      	cmp	r3, #5
 80099ae:	d102      	bne.n	80099b6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80099b0:	2303      	movs	r3, #3
 80099b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099b4:	e0d6      	b.n	8009b64 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80099b6:	7bbb      	ldrb	r3, [r7, #14]
 80099b8:	2b04      	cmp	r3, #4
 80099ba:	f040 80d3 	bne.w	8009b64 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	220b      	movs	r2, #11
 80099c2:	761a      	strb	r2, [r3, #24]
      break;
 80099c4:	e0ce      	b.n	8009b64 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6899      	ldr	r1, [r3, #8]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	899a      	ldrh	r2, [r3, #12]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	795b      	ldrb	r3, [r3, #5]
 80099d2:	2001      	movs	r0, #1
 80099d4:	9000      	str	r0, [sp, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f8ea 	bl	8009bb0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2206      	movs	r2, #6
 80099ec:	761a      	strb	r2, [r3, #24]
      break;
 80099ee:	e0c0      	b.n	8009b72 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	795b      	ldrb	r3, [r3, #5]
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fc4c 	bl	800a294 <USBH_LL_GetURBState>
 80099fc:	4603      	mov	r3, r0
 80099fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d103      	bne.n	8009a0e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2207      	movs	r2, #7
 8009a0a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a0c:	e0ac      	b.n	8009b68 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	2b05      	cmp	r3, #5
 8009a12:	d105      	bne.n	8009a20 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	220c      	movs	r2, #12
 8009a18:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a1e:	e0a3      	b.n	8009b68 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d103      	bne.n	8009a2e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2205      	movs	r2, #5
 8009a2a:	761a      	strb	r2, [r3, #24]
      break;
 8009a2c:	e09c      	b.n	8009b68 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009a2e:	7bbb      	ldrb	r3, [r7, #14]
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	f040 8099 	bne.w	8009b68 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	220b      	movs	r2, #11
 8009a3a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a40:	e092      	b.n	8009b68 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	791b      	ldrb	r3, [r3, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	2100      	movs	r1, #0
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f8d5 	bl	8009bfa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2208      	movs	r2, #8
 8009a60:	761a      	strb	r2, [r3, #24]

      break;
 8009a62:	e086      	b.n	8009b72 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	791b      	ldrb	r3, [r3, #4]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fc12 	bl	800a294 <USBH_LL_GetURBState>
 8009a70:	4603      	mov	r3, r0
 8009a72:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d105      	bne.n	8009a86 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	220d      	movs	r2, #13
 8009a7e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a84:	e072      	b.n	8009b6c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
 8009a88:	2b04      	cmp	r3, #4
 8009a8a:	d103      	bne.n	8009a94 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	220b      	movs	r2, #11
 8009a90:	761a      	strb	r2, [r3, #24]
      break;
 8009a92:	e06b      	b.n	8009b6c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	2b05      	cmp	r3, #5
 8009a98:	d168      	bne.n	8009b6c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a9e:	e065      	b.n	8009b6c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	795b      	ldrb	r3, [r3, #5]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	9200      	str	r2, [sp, #0]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	2100      	movs	r1, #0
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f87f 	bl	8009bb0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	220a      	movs	r2, #10
 8009ac2:	761a      	strb	r2, [r3, #24]
      break;
 8009ac4:	e055      	b.n	8009b72 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	795b      	ldrb	r3, [r3, #5]
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fbe1 	bl	800a294 <USBH_LL_GetURBState>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d105      	bne.n	8009ae8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	220d      	movs	r2, #13
 8009ae4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ae6:	e043      	b.n	8009b70 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ae8:	7bbb      	ldrb	r3, [r7, #14]
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d103      	bne.n	8009af6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2209      	movs	r2, #9
 8009af2:	761a      	strb	r2, [r3, #24]
      break;
 8009af4:	e03c      	b.n	8009b70 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	2b04      	cmp	r3, #4
 8009afa:	d139      	bne.n	8009b70 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	220b      	movs	r2, #11
 8009b00:	761a      	strb	r2, [r3, #24]
      break;
 8009b02:	e035      	b.n	8009b70 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	7e5b      	ldrb	r3, [r3, #25]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	765a      	strb	r2, [r3, #25]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	7e5b      	ldrb	r3, [r3, #25]
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d806      	bhi.n	8009b26 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009b24:	e025      	b.n	8009b72 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b2c:	2106      	movs	r1, #6
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	795b      	ldrb	r3, [r3, #5]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f90c 	bl	8009d5c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	791b      	ldrb	r3, [r3, #4]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f906 	bl	8009d5c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009b56:	2302      	movs	r3, #2
 8009b58:	73fb      	strb	r3, [r7, #15]
      break;
 8009b5a:	e00a      	b.n	8009b72 <USBH_HandleControl+0x2de>

    default:
      break;
 8009b5c:	bf00      	nop
 8009b5e:	e008      	b.n	8009b72 <USBH_HandleControl+0x2de>
      break;
 8009b60:	bf00      	nop
 8009b62:	e006      	b.n	8009b72 <USBH_HandleControl+0x2de>
      break;
 8009b64:	bf00      	nop
 8009b66:	e004      	b.n	8009b72 <USBH_HandleControl+0x2de>
      break;
 8009b68:	bf00      	nop
 8009b6a:	e002      	b.n	8009b72 <USBH_HandleControl+0x2de>
      break;
 8009b6c:	bf00      	nop
 8009b6e:	e000      	b.n	8009b72 <USBH_HandleControl+0x2de>
      break;
 8009b70:	bf00      	nop
  }

  return status;
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af04      	add	r7, sp, #16
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	4613      	mov	r3, r2
 8009b88:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b8a:	79f9      	ldrb	r1, [r7, #7]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	9303      	str	r3, [sp, #12]
 8009b90:	2308      	movs	r3, #8
 8009b92:	9302      	str	r3, [sp, #8]
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	9301      	str	r3, [sp, #4]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f000 fb46 	bl	800a232 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b088      	sub	sp, #32
 8009bb4:	af04      	add	r7, sp, #16
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	4611      	mov	r1, r2
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	80fb      	strh	r3, [r7, #6]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bd4:	7979      	ldrb	r1, [r7, #5]
 8009bd6:	7e3b      	ldrb	r3, [r7, #24]
 8009bd8:	9303      	str	r3, [sp, #12]
 8009bda:	88fb      	ldrh	r3, [r7, #6]
 8009bdc:	9302      	str	r3, [sp, #8]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	2301      	movs	r3, #1
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	2300      	movs	r3, #0
 8009be8:	2200      	movs	r2, #0
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f000 fb21 	bl	800a232 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b088      	sub	sp, #32
 8009bfe:	af04      	add	r7, sp, #16
 8009c00:	60f8      	str	r0, [r7, #12]
 8009c02:	60b9      	str	r1, [r7, #8]
 8009c04:	4611      	mov	r1, r2
 8009c06:	461a      	mov	r2, r3
 8009c08:	460b      	mov	r3, r1
 8009c0a:	80fb      	strh	r3, [r7, #6]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c10:	7979      	ldrb	r1, [r7, #5]
 8009c12:	2300      	movs	r3, #0
 8009c14:	9303      	str	r3, [sp, #12]
 8009c16:	88fb      	ldrh	r3, [r7, #6]
 8009c18:	9302      	str	r3, [sp, #8]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	9301      	str	r3, [sp, #4]
 8009c1e:	2301      	movs	r3, #1
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	2300      	movs	r3, #0
 8009c24:	2201      	movs	r2, #1
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f000 fb03 	bl	800a232 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009c2c:	2300      	movs	r3, #0

}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b088      	sub	sp, #32
 8009c3a:	af04      	add	r7, sp, #16
 8009c3c:	60f8      	str	r0, [r7, #12]
 8009c3e:	60b9      	str	r1, [r7, #8]
 8009c40:	4611      	mov	r1, r2
 8009c42:	461a      	mov	r2, r3
 8009c44:	460b      	mov	r3, r1
 8009c46:	80fb      	strh	r3, [r7, #6]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009c56:	2300      	movs	r3, #0
 8009c58:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c5a:	7979      	ldrb	r1, [r7, #5]
 8009c5c:	7e3b      	ldrb	r3, [r7, #24]
 8009c5e:	9303      	str	r3, [sp, #12]
 8009c60:	88fb      	ldrh	r3, [r7, #6]
 8009c62:	9302      	str	r3, [sp, #8]
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	2301      	movs	r3, #1
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	2200      	movs	r2, #0
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 fade 	bl	800a232 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af04      	add	r7, sp, #16
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	460b      	mov	r3, r1
 8009c90:	80fb      	strh	r3, [r7, #6]
 8009c92:	4613      	mov	r3, r2
 8009c94:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c96:	7979      	ldrb	r1, [r7, #5]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9303      	str	r3, [sp, #12]
 8009c9c:	88fb      	ldrh	r3, [r7, #6]
 8009c9e:	9302      	str	r3, [sp, #8]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	9301      	str	r3, [sp, #4]
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	2302      	movs	r3, #2
 8009caa:	2201      	movs	r2, #1
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 fac0 	bl	800a232 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af04      	add	r7, sp, #16
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	4608      	mov	r0, r1
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	461a      	mov	r2, r3
 8009cca:	4603      	mov	r3, r0
 8009ccc:	70fb      	strb	r3, [r7, #3]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	70bb      	strb	r3, [r7, #2]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009cd6:	7878      	ldrb	r0, [r7, #1]
 8009cd8:	78ba      	ldrb	r2, [r7, #2]
 8009cda:	78f9      	ldrb	r1, [r7, #3]
 8009cdc:	8b3b      	ldrh	r3, [r7, #24]
 8009cde:	9302      	str	r3, [sp, #8]
 8009ce0:	7d3b      	ldrb	r3, [r7, #20]
 8009ce2:	9301      	str	r3, [sp, #4]
 8009ce4:	7c3b      	ldrb	r3, [r7, #16]
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	4603      	mov	r3, r0
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fa53 	bl	800a196 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b082      	sub	sp, #8
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	460b      	mov	r3, r1
 8009d04:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009d06:	78fb      	ldrb	r3, [r7, #3]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fa72 	bl	800a1f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f836 	bl	8009d98 <USBH_GetFreePipe>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009d30:	89fb      	ldrh	r3, [r7, #14]
 8009d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d00a      	beq.n	8009d50 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009d3a:	78fa      	ldrb	r2, [r7, #3]
 8009d3c:	89fb      	ldrh	r3, [r7, #14]
 8009d3e:	f003 030f 	and.w	r3, r3, #15
 8009d42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d46:	6879      	ldr	r1, [r7, #4]
 8009d48:	33e0      	adds	r3, #224	@ 0xe0
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	440b      	add	r3, r1
 8009d4e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009d50:	89fb      	ldrh	r3, [r7, #14]
 8009d52:	b2db      	uxtb	r3, r3
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009d68:	78fb      	ldrb	r3, [r7, #3]
 8009d6a:	2b0f      	cmp	r3, #15
 8009d6c:	d80d      	bhi.n	8009d8a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009d6e:	78fb      	ldrb	r3, [r7, #3]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	33e0      	adds	r3, #224	@ 0xe0
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	4413      	add	r3, r2
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009d80:	6879      	ldr	r1, [r7, #4]
 8009d82:	33e0      	adds	r3, #224	@ 0xe0
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	440b      	add	r3, r1
 8009d88:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009da0:	2300      	movs	r3, #0
 8009da2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009da4:	2300      	movs	r3, #0
 8009da6:	73fb      	strb	r3, [r7, #15]
 8009da8:	e00f      	b.n	8009dca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	33e0      	adds	r3, #224	@ 0xe0
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d102      	bne.n	8009dc4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	e007      	b.n	8009dd4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	73fb      	strb	r3, [r7, #15]
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	2b0f      	cmp	r3, #15
 8009dce:	d9ec      	bls.n	8009daa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009dd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009de4:	2201      	movs	r2, #1
 8009de6:	490e      	ldr	r1, [pc, #56]	@ (8009e20 <MX_USB_HOST_Init+0x40>)
 8009de8:	480e      	ldr	r0, [pc, #56]	@ (8009e24 <MX_USB_HOST_Init+0x44>)
 8009dea:	f7fe fb15 	bl	8008418 <USBH_Init>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d001      	beq.n	8009df8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009df4:	f7f6 ff10 	bl	8000c18 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009df8:	490b      	ldr	r1, [pc, #44]	@ (8009e28 <MX_USB_HOST_Init+0x48>)
 8009dfa:	480a      	ldr	r0, [pc, #40]	@ (8009e24 <MX_USB_HOST_Init+0x44>)
 8009dfc:	f7fe fbb9 	bl	8008572 <USBH_RegisterClass>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009e06:	f7f6 ff07 	bl	8000c18 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009e0a:	4806      	ldr	r0, [pc, #24]	@ (8009e24 <MX_USB_HOST_Init+0x44>)
 8009e0c:	f7fe fc3d 	bl	800868a <USBH_Start>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009e16:	f7f6 feff 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009e1a:	bf00      	nop
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	08009e41 	.word	0x08009e41
 8009e24:	20000234 	.word	0x20000234
 8009e28:	2000000c 	.word	0x2000000c

08009e2c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009e30:	4802      	ldr	r0, [pc, #8]	@ (8009e3c <MX_USB_HOST_Process+0x10>)
 8009e32:	f7fe fc3b 	bl	80086ac <USBH_Process>
}
 8009e36:	bf00      	nop
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20000234 	.word	0x20000234

08009e40 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009e4c:	78fb      	ldrb	r3, [r7, #3]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	2b04      	cmp	r3, #4
 8009e52:	d819      	bhi.n	8009e88 <USBH_UserProcess+0x48>
 8009e54:	a201      	add	r2, pc, #4	@ (adr r2, 8009e5c <USBH_UserProcess+0x1c>)
 8009e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5a:	bf00      	nop
 8009e5c:	08009e89 	.word	0x08009e89
 8009e60:	08009e79 	.word	0x08009e79
 8009e64:	08009e89 	.word	0x08009e89
 8009e68:	08009e81 	.word	0x08009e81
 8009e6c:	08009e71 	.word	0x08009e71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009e70:	4b09      	ldr	r3, [pc, #36]	@ (8009e98 <USBH_UserProcess+0x58>)
 8009e72:	2203      	movs	r2, #3
 8009e74:	701a      	strb	r2, [r3, #0]
  break;
 8009e76:	e008      	b.n	8009e8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009e78:	4b07      	ldr	r3, [pc, #28]	@ (8009e98 <USBH_UserProcess+0x58>)
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	701a      	strb	r2, [r3, #0]
  break;
 8009e7e:	e004      	b.n	8009e8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009e80:	4b05      	ldr	r3, [pc, #20]	@ (8009e98 <USBH_UserProcess+0x58>)
 8009e82:	2201      	movs	r2, #1
 8009e84:	701a      	strb	r2, [r3, #0]
  break;
 8009e86:	e000      	b.n	8009e8a <USBH_UserProcess+0x4a>

  default:
  break;
 8009e88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009e8a:	bf00      	nop
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	2000060c 	.word	0x2000060c

08009e9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08a      	sub	sp, #40	@ 0x28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ea4:	f107 0314 	add.w	r3, r7, #20
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	605a      	str	r2, [r3, #4]
 8009eae:	609a      	str	r2, [r3, #8]
 8009eb0:	60da      	str	r2, [r3, #12]
 8009eb2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ebc:	d147      	bne.n	8009f4e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	613b      	str	r3, [r7, #16]
 8009ec2:	4b25      	ldr	r3, [pc, #148]	@ (8009f58 <HAL_HCD_MspInit+0xbc>)
 8009ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ec6:	4a24      	ldr	r2, [pc, #144]	@ (8009f58 <HAL_HCD_MspInit+0xbc>)
 8009ec8:	f043 0301 	orr.w	r3, r3, #1
 8009ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ece:	4b22      	ldr	r3, [pc, #136]	@ (8009f58 <HAL_HCD_MspInit+0xbc>)
 8009ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	613b      	str	r3, [r7, #16]
 8009ed8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009eda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009ee8:	f107 0314 	add.w	r3, r7, #20
 8009eec:	4619      	mov	r1, r3
 8009eee:	481b      	ldr	r0, [pc, #108]	@ (8009f5c <HAL_HCD_MspInit+0xc0>)
 8009ef0:	f7f7 face 	bl	8001490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009ef4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009efa:	2302      	movs	r3, #2
 8009efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009efe:	2300      	movs	r3, #0
 8009f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f02:	2300      	movs	r3, #0
 8009f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f06:	230a      	movs	r3, #10
 8009f08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f0a:	f107 0314 	add.w	r3, r7, #20
 8009f0e:	4619      	mov	r1, r3
 8009f10:	4812      	ldr	r0, [pc, #72]	@ (8009f5c <HAL_HCD_MspInit+0xc0>)
 8009f12:	f7f7 fabd 	bl	8001490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f16:	4b10      	ldr	r3, [pc, #64]	@ (8009f58 <HAL_HCD_MspInit+0xbc>)
 8009f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f1a:	4a0f      	ldr	r2, [pc, #60]	@ (8009f58 <HAL_HCD_MspInit+0xbc>)
 8009f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f20:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f22:	2300      	movs	r3, #0
 8009f24:	60fb      	str	r3, [r7, #12]
 8009f26:	4b0c      	ldr	r3, [pc, #48]	@ (8009f58 <HAL_HCD_MspInit+0xbc>)
 8009f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8009f58 <HAL_HCD_MspInit+0xbc>)
 8009f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8009f32:	4b09      	ldr	r3, [pc, #36]	@ (8009f58 <HAL_HCD_MspInit+0xbc>)
 8009f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f3e:	2200      	movs	r2, #0
 8009f40:	2100      	movs	r1, #0
 8009f42:	2043      	movs	r0, #67	@ 0x43
 8009f44:	f7f7 fa6d 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f48:	2043      	movs	r0, #67	@ 0x43
 8009f4a:	f7f7 fa86 	bl	800145a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f4e:	bf00      	nop
 8009f50:	3728      	adds	r7, #40	@ 0x28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	40023800 	.word	0x40023800
 8009f5c:	40020000 	.word	0x40020000

08009f60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe ff73 	bl	8008e5a <USBH_LL_IncTimer>
}
 8009f74:	bf00      	nop
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe ffab 	bl	8008ee6 <USBH_LL_Connect>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fe ffb4 	bl	8008f14 <USBH_LL_Disconnect>
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fe ff65 	bl	8008eae <USBH_LL_PortEnabled>
}
 8009fe4:	bf00      	nop
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fe ff65 	bl	8008eca <USBH_LL_PortDisabled>
}
 800a000:	bf00      	nop
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a016:	2b01      	cmp	r3, #1
 800a018:	d12a      	bne.n	800a070 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a01a:	4a18      	ldr	r2, [pc, #96]	@ (800a07c <USBH_LL_Init+0x74>)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a15      	ldr	r2, [pc, #84]	@ (800a07c <USBH_LL_Init+0x74>)
 800a026:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a02a:	4b14      	ldr	r3, [pc, #80]	@ (800a07c <USBH_LL_Init+0x74>)
 800a02c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a030:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a032:	4b12      	ldr	r3, [pc, #72]	@ (800a07c <USBH_LL_Init+0x74>)
 800a034:	2208      	movs	r2, #8
 800a036:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a038:	4b10      	ldr	r3, [pc, #64]	@ (800a07c <USBH_LL_Init+0x74>)
 800a03a:	2201      	movs	r2, #1
 800a03c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a03e:	4b0f      	ldr	r3, [pc, #60]	@ (800a07c <USBH_LL_Init+0x74>)
 800a040:	2200      	movs	r2, #0
 800a042:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a044:	4b0d      	ldr	r3, [pc, #52]	@ (800a07c <USBH_LL_Init+0x74>)
 800a046:	2202      	movs	r2, #2
 800a048:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a04a:	4b0c      	ldr	r3, [pc, #48]	@ (800a07c <USBH_LL_Init+0x74>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a050:	480a      	ldr	r0, [pc, #40]	@ (800a07c <USBH_LL_Init+0x74>)
 800a052:	f7f7 fbd2 	bl	80017fa <HAL_HCD_Init>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a05c:	f7f6 fddc 	bl	8000c18 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a060:	4806      	ldr	r0, [pc, #24]	@ (800a07c <USBH_LL_Init+0x74>)
 800a062:	f7f8 f833 	bl	80020cc <HAL_HCD_GetCurrentFrame>
 800a066:	4603      	mov	r3, r0
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7fe fee6 	bl	8008e3c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20000610 	.word	0x20000610

0800a080 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a096:	4618      	mov	r0, r3
 800a098:	f7f7 ffa0 	bl	8001fdc <HAL_HCD_Start>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 f95e 	bl	800a364 <USBH_Get_USB_Status>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7f7 ffa8 	bl	8002022 <HAL_HCD_Stop>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f000 f943 	bl	800a364 <USBH_Get_USB_Status>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7f7 fff2 	bl	80020e8 <HAL_HCD_GetCurrentSpeed>
 800a104:	4603      	mov	r3, r0
 800a106:	2b02      	cmp	r3, #2
 800a108:	d00c      	beq.n	800a124 <USBH_LL_GetSpeed+0x38>
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d80d      	bhi.n	800a12a <USBH_LL_GetSpeed+0x3e>
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d002      	beq.n	800a118 <USBH_LL_GetSpeed+0x2c>
 800a112:	2b01      	cmp	r3, #1
 800a114:	d003      	beq.n	800a11e <USBH_LL_GetSpeed+0x32>
 800a116:	e008      	b.n	800a12a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a118:	2300      	movs	r3, #0
 800a11a:	73fb      	strb	r3, [r7, #15]
    break;
 800a11c:	e008      	b.n	800a130 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a11e:	2301      	movs	r3, #1
 800a120:	73fb      	strb	r3, [r7, #15]
    break;
 800a122:	e005      	b.n	800a130 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a124:	2302      	movs	r3, #2
 800a126:	73fb      	strb	r3, [r7, #15]
    break;
 800a128:	e002      	b.n	800a130 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a12a:	2301      	movs	r3, #1
 800a12c:	73fb      	strb	r3, [r7, #15]
    break;
 800a12e:	bf00      	nop
  }
  return  speed;
 800a130:	7bfb      	ldrb	r3, [r7, #15]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b084      	sub	sp, #16
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a146:	2300      	movs	r3, #0
 800a148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a150:	4618      	mov	r0, r3
 800a152:	f7f7 ff83 	bl	800205c <HAL_HCD_ResetPort>
 800a156:	4603      	mov	r3, r0
 800a158:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 f901 	bl	800a364 <USBH_Get_USB_Status>
 800a162:	4603      	mov	r3, r0
 800a164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a166:	7bbb      	ldrb	r3, [r7, #14]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	460b      	mov	r3, r1
 800a17a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a182:	78fa      	ldrb	r2, [r7, #3]
 800a184:	4611      	mov	r1, r2
 800a186:	4618      	mov	r0, r3
 800a188:	f7f7 ff8b 	bl	80020a2 <HAL_HCD_HC_GetXferCount>
 800a18c:	4603      	mov	r3, r0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a196:	b590      	push	{r4, r7, lr}
 800a198:	b089      	sub	sp, #36	@ 0x24
 800a19a:	af04      	add	r7, sp, #16
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	4608      	mov	r0, r1
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	70fb      	strb	r3, [r7, #3]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	70bb      	strb	r3, [r7, #2]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a1be:	787c      	ldrb	r4, [r7, #1]
 800a1c0:	78ba      	ldrb	r2, [r7, #2]
 800a1c2:	78f9      	ldrb	r1, [r7, #3]
 800a1c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a1c6:	9302      	str	r3, [sp, #8]
 800a1c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	4623      	mov	r3, r4
 800a1d6:	f7f7 fb77 	bl	80018c8 <HAL_HCD_HC_Init>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 f8bf 	bl	800a364 <USBH_Get_USB_Status>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd90      	pop	{r4, r7, pc}

0800a1f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a20e:	78fa      	ldrb	r2, [r7, #3]
 800a210:	4611      	mov	r1, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f7f7 fc10 	bl	8001a38 <HAL_HCD_HC_Halt>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 f8a0 	bl	800a364 <USBH_Get_USB_Status>
 800a224:	4603      	mov	r3, r0
 800a226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a228:	7bbb      	ldrb	r3, [r7, #14]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a232:	b590      	push	{r4, r7, lr}
 800a234:	b089      	sub	sp, #36	@ 0x24
 800a236:	af04      	add	r7, sp, #16
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	4608      	mov	r0, r1
 800a23c:	4611      	mov	r1, r2
 800a23e:	461a      	mov	r2, r3
 800a240:	4603      	mov	r3, r0
 800a242:	70fb      	strb	r3, [r7, #3]
 800a244:	460b      	mov	r3, r1
 800a246:	70bb      	strb	r3, [r7, #2]
 800a248:	4613      	mov	r3, r2
 800a24a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a25a:	787c      	ldrb	r4, [r7, #1]
 800a25c:	78ba      	ldrb	r2, [r7, #2]
 800a25e:	78f9      	ldrb	r1, [r7, #3]
 800a260:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a264:	9303      	str	r3, [sp, #12]
 800a266:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a268:	9302      	str	r3, [sp, #8]
 800a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	4623      	mov	r3, r4
 800a276:	f7f7 fc03 	bl	8001a80 <HAL_HCD_HC_SubmitRequest>
 800a27a:	4603      	mov	r3, r0
 800a27c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
 800a280:	4618      	mov	r0, r3
 800a282:	f000 f86f 	bl	800a364 <USBH_Get_USB_Status>
 800a286:	4603      	mov	r3, r0
 800a288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a28a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	bd90      	pop	{r4, r7, pc}

0800a294 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	460b      	mov	r3, r1
 800a29e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2a6:	78fa      	ldrb	r2, [r7, #3]
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7f7 fee4 	bl	8002078 <HAL_HCD_HC_GetURBState>
 800a2b0:	4603      	mov	r3, r0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b082      	sub	sp, #8
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d103      	bne.n	800a2d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a2d0:	78fb      	ldrb	r3, [r7, #3]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f000 f872 	bl	800a3bc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a2d8:	20c8      	movs	r0, #200	@ 0xc8
 800a2da:	f7f6 ffa3 	bl	8001224 <HAL_Delay>
  return USBH_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	70fb      	strb	r3, [r7, #3]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a300:	78fa      	ldrb	r2, [r7, #3]
 800a302:	68f9      	ldr	r1, [r7, #12]
 800a304:	4613      	mov	r3, r2
 800a306:	011b      	lsls	r3, r3, #4
 800a308:	1a9b      	subs	r3, r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	440b      	add	r3, r1
 800a30e:	3317      	adds	r3, #23
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00a      	beq.n	800a32c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a316:	78fa      	ldrb	r2, [r7, #3]
 800a318:	68f9      	ldr	r1, [r7, #12]
 800a31a:	4613      	mov	r3, r2
 800a31c:	011b      	lsls	r3, r3, #4
 800a31e:	1a9b      	subs	r3, r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	440b      	add	r3, r1
 800a324:	333c      	adds	r3, #60	@ 0x3c
 800a326:	78ba      	ldrb	r2, [r7, #2]
 800a328:	701a      	strb	r2, [r3, #0]
 800a32a:	e009      	b.n	800a340 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a32c:	78fa      	ldrb	r2, [r7, #3]
 800a32e:	68f9      	ldr	r1, [r7, #12]
 800a330:	4613      	mov	r3, r2
 800a332:	011b      	lsls	r3, r3, #4
 800a334:	1a9b      	subs	r3, r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	440b      	add	r3, r1
 800a33a:	333d      	adds	r3, #61	@ 0x3d
 800a33c:	78ba      	ldrb	r2, [r7, #2]
 800a33e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b082      	sub	sp, #8
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7f6 ff64 	bl	8001224 <HAL_Delay>
}
 800a35c:	bf00      	nop
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	4603      	mov	r3, r0
 800a36c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a36e:	2300      	movs	r3, #0
 800a370:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a372:	79fb      	ldrb	r3, [r7, #7]
 800a374:	2b03      	cmp	r3, #3
 800a376:	d817      	bhi.n	800a3a8 <USBH_Get_USB_Status+0x44>
 800a378:	a201      	add	r2, pc, #4	@ (adr r2, 800a380 <USBH_Get_USB_Status+0x1c>)
 800a37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37e:	bf00      	nop
 800a380:	0800a391 	.word	0x0800a391
 800a384:	0800a397 	.word	0x0800a397
 800a388:	0800a39d 	.word	0x0800a39d
 800a38c:	0800a3a3 	.word	0x0800a3a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	73fb      	strb	r3, [r7, #15]
    break;
 800a394:	e00b      	b.n	800a3ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a396:	2302      	movs	r3, #2
 800a398:	73fb      	strb	r3, [r7, #15]
    break;
 800a39a:	e008      	b.n	800a3ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a39c:	2301      	movs	r3, #1
 800a39e:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a0:	e005      	b.n	800a3ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a6:	e002      	b.n	800a3ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ac:	bf00      	nop
  }
  return usb_status;
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a3c6:	79fb      	ldrb	r3, [r7, #7]
 800a3c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a3ca:	79fb      	ldrb	r3, [r7, #7]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d102      	bne.n	800a3d6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	73fb      	strb	r3, [r7, #15]
 800a3d4:	e001      	b.n	800a3da <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a3da:	7bfb      	ldrb	r3, [r7, #15]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	2101      	movs	r1, #1
 800a3e0:	4803      	ldr	r0, [pc, #12]	@ (800a3f0 <MX_DriverVbusFS+0x34>)
 800a3e2:	f7f7 f9f1 	bl	80017c8 <HAL_GPIO_WritePin>
}
 800a3e6:	bf00      	nop
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	40020800 	.word	0x40020800

0800a3f4 <malloc>:
 800a3f4:	4b02      	ldr	r3, [pc, #8]	@ (800a400 <malloc+0xc>)
 800a3f6:	4601      	mov	r1, r0
 800a3f8:	6818      	ldr	r0, [r3, #0]
 800a3fa:	f000 b82d 	b.w	800a458 <_malloc_r>
 800a3fe:	bf00      	nop
 800a400:	2000002c 	.word	0x2000002c

0800a404 <free>:
 800a404:	4b02      	ldr	r3, [pc, #8]	@ (800a410 <free+0xc>)
 800a406:	4601      	mov	r1, r0
 800a408:	6818      	ldr	r0, [r3, #0]
 800a40a:	f000 b8f5 	b.w	800a5f8 <_free_r>
 800a40e:	bf00      	nop
 800a410:	2000002c 	.word	0x2000002c

0800a414 <sbrk_aligned>:
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	4e0f      	ldr	r6, [pc, #60]	@ (800a454 <sbrk_aligned+0x40>)
 800a418:	460c      	mov	r4, r1
 800a41a:	6831      	ldr	r1, [r6, #0]
 800a41c:	4605      	mov	r5, r0
 800a41e:	b911      	cbnz	r1, 800a426 <sbrk_aligned+0x12>
 800a420:	f000 f8ae 	bl	800a580 <_sbrk_r>
 800a424:	6030      	str	r0, [r6, #0]
 800a426:	4621      	mov	r1, r4
 800a428:	4628      	mov	r0, r5
 800a42a:	f000 f8a9 	bl	800a580 <_sbrk_r>
 800a42e:	1c43      	adds	r3, r0, #1
 800a430:	d103      	bne.n	800a43a <sbrk_aligned+0x26>
 800a432:	f04f 34ff 	mov.w	r4, #4294967295
 800a436:	4620      	mov	r0, r4
 800a438:	bd70      	pop	{r4, r5, r6, pc}
 800a43a:	1cc4      	adds	r4, r0, #3
 800a43c:	f024 0403 	bic.w	r4, r4, #3
 800a440:	42a0      	cmp	r0, r4
 800a442:	d0f8      	beq.n	800a436 <sbrk_aligned+0x22>
 800a444:	1a21      	subs	r1, r4, r0
 800a446:	4628      	mov	r0, r5
 800a448:	f000 f89a 	bl	800a580 <_sbrk_r>
 800a44c:	3001      	adds	r0, #1
 800a44e:	d1f2      	bne.n	800a436 <sbrk_aligned+0x22>
 800a450:	e7ef      	b.n	800a432 <sbrk_aligned+0x1e>
 800a452:	bf00      	nop
 800a454:	200009f0 	.word	0x200009f0

0800a458 <_malloc_r>:
 800a458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a45c:	1ccd      	adds	r5, r1, #3
 800a45e:	f025 0503 	bic.w	r5, r5, #3
 800a462:	3508      	adds	r5, #8
 800a464:	2d0c      	cmp	r5, #12
 800a466:	bf38      	it	cc
 800a468:	250c      	movcc	r5, #12
 800a46a:	2d00      	cmp	r5, #0
 800a46c:	4606      	mov	r6, r0
 800a46e:	db01      	blt.n	800a474 <_malloc_r+0x1c>
 800a470:	42a9      	cmp	r1, r5
 800a472:	d904      	bls.n	800a47e <_malloc_r+0x26>
 800a474:	230c      	movs	r3, #12
 800a476:	6033      	str	r3, [r6, #0]
 800a478:	2000      	movs	r0, #0
 800a47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a47e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a554 <_malloc_r+0xfc>
 800a482:	f000 f869 	bl	800a558 <__malloc_lock>
 800a486:	f8d8 3000 	ldr.w	r3, [r8]
 800a48a:	461c      	mov	r4, r3
 800a48c:	bb44      	cbnz	r4, 800a4e0 <_malloc_r+0x88>
 800a48e:	4629      	mov	r1, r5
 800a490:	4630      	mov	r0, r6
 800a492:	f7ff ffbf 	bl	800a414 <sbrk_aligned>
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	4604      	mov	r4, r0
 800a49a:	d158      	bne.n	800a54e <_malloc_r+0xf6>
 800a49c:	f8d8 4000 	ldr.w	r4, [r8]
 800a4a0:	4627      	mov	r7, r4
 800a4a2:	2f00      	cmp	r7, #0
 800a4a4:	d143      	bne.n	800a52e <_malloc_r+0xd6>
 800a4a6:	2c00      	cmp	r4, #0
 800a4a8:	d04b      	beq.n	800a542 <_malloc_r+0xea>
 800a4aa:	6823      	ldr	r3, [r4, #0]
 800a4ac:	4639      	mov	r1, r7
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	eb04 0903 	add.w	r9, r4, r3
 800a4b4:	f000 f864 	bl	800a580 <_sbrk_r>
 800a4b8:	4581      	cmp	r9, r0
 800a4ba:	d142      	bne.n	800a542 <_malloc_r+0xea>
 800a4bc:	6821      	ldr	r1, [r4, #0]
 800a4be:	1a6d      	subs	r5, r5, r1
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f7ff ffa6 	bl	800a414 <sbrk_aligned>
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	d03a      	beq.n	800a542 <_malloc_r+0xea>
 800a4cc:	6823      	ldr	r3, [r4, #0]
 800a4ce:	442b      	add	r3, r5
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	bb62      	cbnz	r2, 800a534 <_malloc_r+0xdc>
 800a4da:	f8c8 7000 	str.w	r7, [r8]
 800a4de:	e00f      	b.n	800a500 <_malloc_r+0xa8>
 800a4e0:	6822      	ldr	r2, [r4, #0]
 800a4e2:	1b52      	subs	r2, r2, r5
 800a4e4:	d420      	bmi.n	800a528 <_malloc_r+0xd0>
 800a4e6:	2a0b      	cmp	r2, #11
 800a4e8:	d917      	bls.n	800a51a <_malloc_r+0xc2>
 800a4ea:	1961      	adds	r1, r4, r5
 800a4ec:	42a3      	cmp	r3, r4
 800a4ee:	6025      	str	r5, [r4, #0]
 800a4f0:	bf18      	it	ne
 800a4f2:	6059      	strne	r1, [r3, #4]
 800a4f4:	6863      	ldr	r3, [r4, #4]
 800a4f6:	bf08      	it	eq
 800a4f8:	f8c8 1000 	streq.w	r1, [r8]
 800a4fc:	5162      	str	r2, [r4, r5]
 800a4fe:	604b      	str	r3, [r1, #4]
 800a500:	4630      	mov	r0, r6
 800a502:	f000 f82f 	bl	800a564 <__malloc_unlock>
 800a506:	f104 000b 	add.w	r0, r4, #11
 800a50a:	1d23      	adds	r3, r4, #4
 800a50c:	f020 0007 	bic.w	r0, r0, #7
 800a510:	1ac2      	subs	r2, r0, r3
 800a512:	bf1c      	itt	ne
 800a514:	1a1b      	subne	r3, r3, r0
 800a516:	50a3      	strne	r3, [r4, r2]
 800a518:	e7af      	b.n	800a47a <_malloc_r+0x22>
 800a51a:	6862      	ldr	r2, [r4, #4]
 800a51c:	42a3      	cmp	r3, r4
 800a51e:	bf0c      	ite	eq
 800a520:	f8c8 2000 	streq.w	r2, [r8]
 800a524:	605a      	strne	r2, [r3, #4]
 800a526:	e7eb      	b.n	800a500 <_malloc_r+0xa8>
 800a528:	4623      	mov	r3, r4
 800a52a:	6864      	ldr	r4, [r4, #4]
 800a52c:	e7ae      	b.n	800a48c <_malloc_r+0x34>
 800a52e:	463c      	mov	r4, r7
 800a530:	687f      	ldr	r7, [r7, #4]
 800a532:	e7b6      	b.n	800a4a2 <_malloc_r+0x4a>
 800a534:	461a      	mov	r2, r3
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	42a3      	cmp	r3, r4
 800a53a:	d1fb      	bne.n	800a534 <_malloc_r+0xdc>
 800a53c:	2300      	movs	r3, #0
 800a53e:	6053      	str	r3, [r2, #4]
 800a540:	e7de      	b.n	800a500 <_malloc_r+0xa8>
 800a542:	230c      	movs	r3, #12
 800a544:	6033      	str	r3, [r6, #0]
 800a546:	4630      	mov	r0, r6
 800a548:	f000 f80c 	bl	800a564 <__malloc_unlock>
 800a54c:	e794      	b.n	800a478 <_malloc_r+0x20>
 800a54e:	6005      	str	r5, [r0, #0]
 800a550:	e7d6      	b.n	800a500 <_malloc_r+0xa8>
 800a552:	bf00      	nop
 800a554:	200009f4 	.word	0x200009f4

0800a558 <__malloc_lock>:
 800a558:	4801      	ldr	r0, [pc, #4]	@ (800a560 <__malloc_lock+0x8>)
 800a55a:	f000 b84b 	b.w	800a5f4 <__retarget_lock_acquire_recursive>
 800a55e:	bf00      	nop
 800a560:	20000b34 	.word	0x20000b34

0800a564 <__malloc_unlock>:
 800a564:	4801      	ldr	r0, [pc, #4]	@ (800a56c <__malloc_unlock+0x8>)
 800a566:	f000 b846 	b.w	800a5f6 <__retarget_lock_release_recursive>
 800a56a:	bf00      	nop
 800a56c:	20000b34 	.word	0x20000b34

0800a570 <memset>:
 800a570:	4402      	add	r2, r0
 800a572:	4603      	mov	r3, r0
 800a574:	4293      	cmp	r3, r2
 800a576:	d100      	bne.n	800a57a <memset+0xa>
 800a578:	4770      	bx	lr
 800a57a:	f803 1b01 	strb.w	r1, [r3], #1
 800a57e:	e7f9      	b.n	800a574 <memset+0x4>

0800a580 <_sbrk_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4d06      	ldr	r5, [pc, #24]	@ (800a59c <_sbrk_r+0x1c>)
 800a584:	2300      	movs	r3, #0
 800a586:	4604      	mov	r4, r0
 800a588:	4608      	mov	r0, r1
 800a58a:	602b      	str	r3, [r5, #0]
 800a58c:	f7f6 fd66 	bl	800105c <_sbrk>
 800a590:	1c43      	adds	r3, r0, #1
 800a592:	d102      	bne.n	800a59a <_sbrk_r+0x1a>
 800a594:	682b      	ldr	r3, [r5, #0]
 800a596:	b103      	cbz	r3, 800a59a <_sbrk_r+0x1a>
 800a598:	6023      	str	r3, [r4, #0]
 800a59a:	bd38      	pop	{r3, r4, r5, pc}
 800a59c:	20000b30 	.word	0x20000b30

0800a5a0 <__errno>:
 800a5a0:	4b01      	ldr	r3, [pc, #4]	@ (800a5a8 <__errno+0x8>)
 800a5a2:	6818      	ldr	r0, [r3, #0]
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	2000002c 	.word	0x2000002c

0800a5ac <__libc_init_array>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	4d0d      	ldr	r5, [pc, #52]	@ (800a5e4 <__libc_init_array+0x38>)
 800a5b0:	4c0d      	ldr	r4, [pc, #52]	@ (800a5e8 <__libc_init_array+0x3c>)
 800a5b2:	1b64      	subs	r4, r4, r5
 800a5b4:	10a4      	asrs	r4, r4, #2
 800a5b6:	2600      	movs	r6, #0
 800a5b8:	42a6      	cmp	r6, r4
 800a5ba:	d109      	bne.n	800a5d0 <__libc_init_array+0x24>
 800a5bc:	4d0b      	ldr	r5, [pc, #44]	@ (800a5ec <__libc_init_array+0x40>)
 800a5be:	4c0c      	ldr	r4, [pc, #48]	@ (800a5f0 <__libc_init_array+0x44>)
 800a5c0:	f000 f864 	bl	800a68c <_init>
 800a5c4:	1b64      	subs	r4, r4, r5
 800a5c6:	10a4      	asrs	r4, r4, #2
 800a5c8:	2600      	movs	r6, #0
 800a5ca:	42a6      	cmp	r6, r4
 800a5cc:	d105      	bne.n	800a5da <__libc_init_array+0x2e>
 800a5ce:	bd70      	pop	{r4, r5, r6, pc}
 800a5d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d4:	4798      	blx	r3
 800a5d6:	3601      	adds	r6, #1
 800a5d8:	e7ee      	b.n	800a5b8 <__libc_init_array+0xc>
 800a5da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5de:	4798      	blx	r3
 800a5e0:	3601      	adds	r6, #1
 800a5e2:	e7f2      	b.n	800a5ca <__libc_init_array+0x1e>
 800a5e4:	0800a6c8 	.word	0x0800a6c8
 800a5e8:	0800a6c8 	.word	0x0800a6c8
 800a5ec:	0800a6c8 	.word	0x0800a6c8
 800a5f0:	0800a6cc 	.word	0x0800a6cc

0800a5f4 <__retarget_lock_acquire_recursive>:
 800a5f4:	4770      	bx	lr

0800a5f6 <__retarget_lock_release_recursive>:
 800a5f6:	4770      	bx	lr

0800a5f8 <_free_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4605      	mov	r5, r0
 800a5fc:	2900      	cmp	r1, #0
 800a5fe:	d041      	beq.n	800a684 <_free_r+0x8c>
 800a600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a604:	1f0c      	subs	r4, r1, #4
 800a606:	2b00      	cmp	r3, #0
 800a608:	bfb8      	it	lt
 800a60a:	18e4      	addlt	r4, r4, r3
 800a60c:	f7ff ffa4 	bl	800a558 <__malloc_lock>
 800a610:	4a1d      	ldr	r2, [pc, #116]	@ (800a688 <_free_r+0x90>)
 800a612:	6813      	ldr	r3, [r2, #0]
 800a614:	b933      	cbnz	r3, 800a624 <_free_r+0x2c>
 800a616:	6063      	str	r3, [r4, #4]
 800a618:	6014      	str	r4, [r2, #0]
 800a61a:	4628      	mov	r0, r5
 800a61c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a620:	f7ff bfa0 	b.w	800a564 <__malloc_unlock>
 800a624:	42a3      	cmp	r3, r4
 800a626:	d908      	bls.n	800a63a <_free_r+0x42>
 800a628:	6820      	ldr	r0, [r4, #0]
 800a62a:	1821      	adds	r1, r4, r0
 800a62c:	428b      	cmp	r3, r1
 800a62e:	bf01      	itttt	eq
 800a630:	6819      	ldreq	r1, [r3, #0]
 800a632:	685b      	ldreq	r3, [r3, #4]
 800a634:	1809      	addeq	r1, r1, r0
 800a636:	6021      	streq	r1, [r4, #0]
 800a638:	e7ed      	b.n	800a616 <_free_r+0x1e>
 800a63a:	461a      	mov	r2, r3
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	b10b      	cbz	r3, 800a644 <_free_r+0x4c>
 800a640:	42a3      	cmp	r3, r4
 800a642:	d9fa      	bls.n	800a63a <_free_r+0x42>
 800a644:	6811      	ldr	r1, [r2, #0]
 800a646:	1850      	adds	r0, r2, r1
 800a648:	42a0      	cmp	r0, r4
 800a64a:	d10b      	bne.n	800a664 <_free_r+0x6c>
 800a64c:	6820      	ldr	r0, [r4, #0]
 800a64e:	4401      	add	r1, r0
 800a650:	1850      	adds	r0, r2, r1
 800a652:	4283      	cmp	r3, r0
 800a654:	6011      	str	r1, [r2, #0]
 800a656:	d1e0      	bne.n	800a61a <_free_r+0x22>
 800a658:	6818      	ldr	r0, [r3, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	6053      	str	r3, [r2, #4]
 800a65e:	4408      	add	r0, r1
 800a660:	6010      	str	r0, [r2, #0]
 800a662:	e7da      	b.n	800a61a <_free_r+0x22>
 800a664:	d902      	bls.n	800a66c <_free_r+0x74>
 800a666:	230c      	movs	r3, #12
 800a668:	602b      	str	r3, [r5, #0]
 800a66a:	e7d6      	b.n	800a61a <_free_r+0x22>
 800a66c:	6820      	ldr	r0, [r4, #0]
 800a66e:	1821      	adds	r1, r4, r0
 800a670:	428b      	cmp	r3, r1
 800a672:	bf04      	itt	eq
 800a674:	6819      	ldreq	r1, [r3, #0]
 800a676:	685b      	ldreq	r3, [r3, #4]
 800a678:	6063      	str	r3, [r4, #4]
 800a67a:	bf04      	itt	eq
 800a67c:	1809      	addeq	r1, r1, r0
 800a67e:	6021      	streq	r1, [r4, #0]
 800a680:	6054      	str	r4, [r2, #4]
 800a682:	e7ca      	b.n	800a61a <_free_r+0x22>
 800a684:	bd38      	pop	{r3, r4, r5, pc}
 800a686:	bf00      	nop
 800a688:	200009f4 	.word	0x200009f4

0800a68c <_init>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	bf00      	nop
 800a690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a692:	bc08      	pop	{r3}
 800a694:	469e      	mov	lr, r3
 800a696:	4770      	bx	lr

0800a698 <_fini>:
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	bf00      	nop
 800a69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a69e:	bc08      	pop	{r3}
 800a6a0:	469e      	mov	lr, r3
 800a6a2:	4770      	bx	lr
